(function () {
    'use strict';

    class SceneData {
        constructor() {
            this.bornPoint = [
                new Laya.Vector3(1, 0, 1),
                new Laya.Vector3(7, 0, 1),
                new Laya.Vector3(4, 0, 1),
                new Laya.Vector3(6, 0, 6),
                new Laya.Vector3(7, 0, 1),
            ];
            this.storagePart1 = [
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
                ],
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
                    [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                    [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                    [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1],
                    [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0],
                    [0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0],
                    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
                ],
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1],
                    [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
                ],
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
                    [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                    [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1],
                    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
                ],
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
                ],
            ];
            this.storagePart2 = [
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0],
                    [1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1],
                    [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0],
                    [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0],
                    [0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
                ],
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0],
                    [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
                    [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
                    [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1],
                    [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
                ],
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0],
                    [0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0],
                    [0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0],
                    [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1],
                    [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0],
                    [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0],
                    [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
                ],
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0],
                    [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0],
                    [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0],
                    [1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1],
                    [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
                ],
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0],
                    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
                    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
                    [1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1],
                    [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
                    [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
                    [0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
                ],
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0],
                    [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0],
                    [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0],
                    [1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1],
                    [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0],
                    [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0],
                    [0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
                ],
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
                    [0, 0, 1, 0, 0, 0, 0, 1, 0, 0],
                    [0, 0, 1, 0, 0, 0, 0, 1, 0, 0],
                    [1, 1, 1, 0, 0, 0, 0, 1, 1, 1],
                    [0, 0, 1, 0, 0, 0, 0, -2, 0, 0],
                    [0, 0, 1, 0, 0, 0, 0, 1, 0, 0],
                    [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
                ],
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0],
                    [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0],
                    [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                    [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                    [0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
                    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
                    [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
                ],
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
                    [0, 0, 1, 0, 0, 0, 0, 1, 0, 0],
                    [0, 0, 1, 0, 0, 0, 0, 1, 0, 0],
                    [1, 1, 1, 0, 0, 0, 0, 1, 1, 1],
                    [0, 0, 0, 0, 0, 0, 0, -2, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
                    [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
                ],
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0],
                    [0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0],
                    [0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0],
                    [1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1],
                    [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0],
                    [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
                ],
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 1, 1, 0, 11, 1, 1, 0, 0, 0],
                    [0, 1, 1, 0, 1, 0, 1, 0, 0, 0],
                    [1, 1, 1, 3, 1, 1, 1, 1, 1, 1],
                    [0, 0, 1, 0, 1, 0, 1, 0, 0, 1],
                    [0, 0, 12, 1, 1, 0, 12, 1, 1, 1],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
                ],
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 1, 1, 1, 1, 1, 1, 1, 0],
                    [0, 0, 1, 1, 1, 1, 1, 1, 1, 0],
                    [0, 1, 1, -2, -2, -2, -2, 1, 1, 0],
                    [1, 1, 0, 1, 1, 1, 1, 1, 1, 1],
                    [0, 0, 0, 0, 1, 0, 0, 0, 0, 1],
                    [0, 0, 0, 0, 1, 0, 0, 0, 0, 1],
                    [0, 0, 0, 0, 1, 1, 1, 1, 1, 10],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
                ],
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 1, -2, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0],
                    [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                    [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, -2, 0],
                    [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1],
                    [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0],
                    [0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0],
                    [0, 0, 0, 0, 0, 1, 1, 1, 1, -2, 1, 1, 1, 1, 1, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
                ],
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 11, 1, 1, 1, 10, 1, 1, 0],
                    [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                    [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0],
                    [1, 1, 1, 1, 11, 1, 1, 1, 1, 1, 1, 1],
                    [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 10, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
                ],
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 10, 0],
                    [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
                    [1, 1, 1, 1, 12, 1, 1, 1, 1, 1, 1, 1],
                    [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0],
                    [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                    [0, 0, 0, 0, 12, 1, 1, 1, 10, 1, 1, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
                ],
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                    [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0],
                    [0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0],
                    [1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1],
                    [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0],
                    [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
                ]
            ];
            this.storagePart3 = [
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0],
                    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
                    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
                    [1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1],
                    [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                    [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                    [0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
                ],
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
                    [0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                    [0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1],
                    [0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
                ],
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0],
                    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0],
                    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0],
                    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1],
                    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
                ],
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 7, 1, 1, 1, 1, 1, 6, 0, 0],
                    [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0],
                    [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0],
                    [1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1],
                    [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
                    [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
                    [0, 5, 1, 1, 1, 1, 1, 8, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
                ],
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 7, 1, 1, 1, 1, 1, 1, 1, 6, 0, 0],
                    [0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0],
                    [0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0],
                    [1, 1, 1, 1, 1, 1, 1, 6, 0, 5, 1, 1],
                    [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0],
                    [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0],
                    [0, 0, 0, 0, 5, 1, 1, 8, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
                ],
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0],
                    [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0],
                    [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0],
                    [1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1],
                    [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0],
                    [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0],
                    [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
                ],
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 7, 1, 1, 1, 1, 1, 6, 0, 0, 0, 0],
                    [0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0],
                    [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0],
                    [1, 1, 1, 8, 0, 0, 1, 1, 1, 1, 1, 1],
                    [0, 0, 7, 1, 1, 6, 0, 1, 0, 1, 0, 0],
                    [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0],
                    [0, 0, 5, 1, 1, 1, 1, 1, 1, 8, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
                ],
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                    [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0],
                    [0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0],
                    [1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1],
                    [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0],
                    [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
                ],
                [
                    [0, 7, 1, 1, 1, 6, 0, 0, 0, 0],
                    [0, 1, 0, 0, 0, 1, 0, 0, 0, 0],
                    [0, 1, 0, 1, 1, 1, 1, 1, 6, 0],
                    [0, 1, 1, 1, 0, 0, 0, 1, 1, 0],
                    [1, 1, 1, 1, 1, 6, 0, 1, 1, 1],
                    [0, 0, 1, 0, 0, 1, 0, 1, 0, 0],
                    [0, 0, 1, 1, 1, 1, 1, 1, 6, 0],
                    [0, 0, 5, 1, 1, 8, 0, 5, 8, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
                ],
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 11, 1, 1, 1, 1, 0],
                    [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0],
                    [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1],
                    [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0],
                    [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0],
                    [0, 0, 1, 1, 1, 1, 1, 1, 12, 1, 1, 1, 1, 1, 10, 1, 1, 1, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
                ],
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 7, 1, 1, 1, 1, 0, 1, 1, 1, 1, 6, 0, 0],
                    [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0],
                    [0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0],
                    [1, 1, 1, 1, 1, 1, 6, 0, 1, 1, 1, 1, 1, 1],
                    [0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0],
                    [0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0],
                    [0, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
                ],
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0],
                    [0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0],
                    [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0],
                    [1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1],
                    [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0],
                    [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0],
                    [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
                ],
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 1, 1, 1, 1, 1, 1, 11, 1, 1, 1, 1, 1, 10, 1, 1, 10, 0, 0],
                    [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0],
                    [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0],
                    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 12, 1, 1],
                    [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0],
                    [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0],
                    [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 12, 1, 1, 1, 1, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
                ],
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 1, 11, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0],
                    [0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 10, 0, 1, 0, 1, 0, 1, 0, 0, 0],
                    [0, 1, 1, 1, 1, 1, 10, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0],
                    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1],
                    [0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0],
                    [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10, 0, 1, 0, 0, 0, 1, 0, 0, 0],
                    [0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
                ],
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0],
                    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0],
                    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0],
                    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1],
                    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                    [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
                ],
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 1, 1, 1, 1, 1, 1, 11, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0],
                    [0, 1, 0, 1, 0, 11, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0],
                    [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0],
                    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1],
                    [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0],
                    [0, 1, 1, 12, 1, 1, 1, 1, 1, 1, 1, 12, 0, 1, 0, 1, 0, 1, 1, 0],
                    [0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
                ],
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0],
                    [0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0],
                    [0, 0, 0, 0, 0, 0, 1, 0, 4, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0],
                    [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1],
                    [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0],
                    [0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0],
                    [0, 1, 1, 1, 4, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
                ],
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 4, 1, 1, 0],
                    [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0],
                    [0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0],
                    [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1],
                    [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0],
                    [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0],
                    [0, 1, 1, 1, 4, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
                ],
                [
                    [0, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 0, 0],
                    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
                    [0, 1, 0, 0, 0, 7, 1, 1, 1, 1, 1, 6, 0, 1, 0, 0],
                    [0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0],
                    [1, 1, 0, 0, 0, 1, 0, 7, 1, 1, 1, 1, 1, 1, 1, 1],
                    [0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0],
                    [0, 1, 1, 1, 1, 1, 0, 5, 1, 1, 1, 8, 0, 1, 0, 0],
                    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
                    [0, 0, 0, 0, 0, 5, 1, 1, 1, 1, 1, 1, 1, 8, 0, 0]
                ],
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
                    [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0],
                    [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0],
                    [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1],
                    [0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0],
                    [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0],
                    [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
                ],
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0],
                    [0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0],
                    [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0],
                    [1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1],
                    [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
                    [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                    [0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
                ],
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 11],
                    [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1],
                    [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1],
                    [0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0],
                    [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0],
                    [0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
                ],
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0],
                    [0, 0, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 3, 1, 1, 0, 1, 0],
                    [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                    [1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1],
                    [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0],
                    [0, 0, 1, 3, 1, 1, 1, 1, 3, 1, 1, 0, 1, 1, 3, 1, 1, 1, 1, 0],
                    [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
                ],
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 7, 1, 1, 1, 1, 1, 1, 1, 1, 6, 0, 0, 0, 0],
                    [0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0],
                    [0, 1, 0, 1, 1, 1, 0, 7, 1, 1, 1, 1, 6, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0],
                    [1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                    [0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 5, 1, 8, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0],
                    [0, 1, 0, 0, 0, 9, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0],
                    [0, 5, 1, 1, 1, 1, 1, 8, 0, 9, 1, 1, 1, 1, 8, 0, 0, 1, 1, 1, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
                ],
            ];
            this.part1 = [];
            this.part2 = [];
            this.part3 = [];
        }
    }
    SceneData.instance = new SceneData();
    const SData = SceneData.instance;

    const WX_VERSION = '1.0';
    const OPPO_VERSION = '1.5';
    const VIVO_VERSION = '1.5';
    const SOUND_TYPE = {
        BGM: 'res/sounds/bgm.wav',
        CLEAR: 'res/sounds/Sound_Clear.wav',
        FALL: 'res/sounds/Fall.wav',
        COMPLETE: 'res/sounds/LevelComplete.wav',
        ADD: 'res/sounds/Puck_Add.wav',
        REMOVE: 'res/sounds/Puck_Remove.wav',
        SNAP: 'res/sounds/Snap.wav',
        BUMPWALL: 'res/sounds/BumpWall.wav'
    };
    const ITEM_TYPE = {
        GOLD: 1,
        KEY: 2,
        SKIN: 3,
        TURN: 4
    };
    const PLAYER_INFO = [
        { "id": 0, "name": "玩家0", "videoTimes": 0 },
        { "id": 1, "name": "玩家1", "videoTimes": 0 },
        { "id": 2, "name": "玩家2", "videoTimes": 0 },
        { "id": 3, "name": "玩家3", "videoTimes": 0 },
        { "id": 4, "name": "玩家4", "videoTimes": 5 },
        { "id": 5, "name": "玩家5", "videoTimes": 0 },
        { "id": 6, "name": "玩家6", "videoTimes": 0 },
        { "id": 7, "name": "玩家7", "videoTimes": 0 },
        { "id": 8, "name": "玩家8", "videoTimes": 0 },
        { "id": 9, "name": "玩家9", "videoTimes": 0 },
        { "id": 10, "name": "玩家10", "videoTimes": 0 },
        { "id": 11, "name": "玩家11", "videoTimes": 0 },
    ];
    const CHEST_TYPE = {
        gold: 1,
        video: 2,
        sign: 3,
        level: 4
    };
    const CHEST_INFO = [
        { id: 0, unlockInfo: [{ type: CHEST_TYPE.level, count: 5 }], buyInfo: [{ type: CHEST_TYPE.gold, count: 100 }] },
        { id: 1, unlockInfo: [{ type: CHEST_TYPE.level, count: 10 }], buyInfo: [{ type: CHEST_TYPE.gold, count: 300 }] },
        { id: 2, unlockInfo: [{ type: CHEST_TYPE.level, count: 20 }], buyInfo: [{ type: CHEST_TYPE.gold, count: 500 }] },
        { id: 3, unlockInfo: [{ type: CHEST_TYPE.sign, count: 3 }], buyInfo: [{ type: CHEST_TYPE.gold, count: 200 }] },
        { id: 4, unlockInfo: [{ type: CHEST_TYPE.sign, count: 6 }], buyInfo: [{ type: CHEST_TYPE.gold, count: 300 }] },
        { id: 5, unlockInfo: [{ type: CHEST_TYPE.sign, count: 7 }], buyInfo: [{ type: CHEST_TYPE.gold, count: 300 }] },
        { id: 6, unlockInfo: [{ type: CHEST_TYPE.level, count: 40 }], buyInfo: [{ type: CHEST_TYPE.gold, count: 500 }] },
        { id: 7, unlockInfo: [{ type: CHEST_TYPE.video, count: 1 }], buyInfo: [{ type: CHEST_TYPE.gold, count: 300 }] },
    ];
    const CHEST_GIFT = [
        { id: 0, type: ITEM_TYPE.KEY, count: 2 },
        { id: 1, type: ITEM_TYPE.KEY, count: 3 },
        { id: 2, type: ITEM_TYPE.SKIN, count: 7 },
        { id: 3, type: ITEM_TYPE.SKIN, count: 8 },
        { id: 4, type: ITEM_TYPE.GOLD, count: 800 },
        { id: 5, type: ITEM_TYPE.GOLD, count: 1000 },
        { id: 6, type: ITEM_TYPE.SKIN, count: 9 },
        { id: 7, type: ITEM_TYPE.SKIN, count: 11 }
    ];
    const SIGN_INFO = [
        { id: 0, type: ITEM_TYPE.GOLD, count: 30 },
        { id: 1, type: ITEM_TYPE.TURN, count: 1 },
        { id: 2, type: ITEM_TYPE.KEY, count: 2 },
        { id: 3, type: ITEM_TYPE.GOLD, count: 50 },
        { id: 4, type: ITEM_TYPE.TURN, count: 2 },
        { id: 5, type: ITEM_TYPE.KEY, count: 3 },
        { id: 6, type: ITEM_TYPE.SKIN, count: 10 }
    ];
    const TURNTABLE_INFO = [
        { id: 0, type: ITEM_TYPE.KEY, describe: "Key", count: 1 },
        { id: 1, type: ITEM_TYPE.GOLD, describe: "Coins", count: 25 },
        { id: 2, type: ITEM_TYPE.KEY, describe: "Key", count: 2 },
        { id: 3, type: ITEM_TYPE.GOLD, describe: "Coins", count: 20 },
        { id: 4, type: ITEM_TYPE.KEY, describe: "Key", count: 3 },
        { id: 5, type: ITEM_TYPE.GOLD, describe: "Coins", count: 25 },
        { id: 6, type: ITEM_TYPE.GOLD, describe: "Coins", count: 50 },
        { id: 7, type: ITEM_TYPE.GOLD, describe: "Coins", count: 30 }
    ];
    const SHOP_TPYE = {
        gold: 1,
        video: 2,
        sign: 3,
        exp: 4
    };
    const SHOP_INFO = [
        { id: 0, unlockInfo: [{ type: SHOP_TPYE.sign, count: 1 }], buyInfo: [{ type: SHOP_TPYE.gold, count: 0 }] },
        { id: 1, unlockInfo: [{ type: SHOP_TPYE.sign, count: 2 }], buyInfo: [{ type: SHOP_TPYE.gold, count: 300 }] },
        { id: 2, unlockInfo: [{ type: SHOP_TPYE.sign, count: 4 }], buyInfo: [{ type: SHOP_TPYE.video, count: 1 }] },
        { id: 3, unlockInfo: [{ type: SHOP_TPYE.sign, count: 5 }], buyInfo: [{ type: SHOP_TPYE.gold, count: 500 }] },
        { id: 4, unlockInfo: [{ type: SHOP_TPYE.video, count: 1 }], buyInfo: [{ type: SHOP_TPYE.gold, count: 200 }] },
        { id: 5, unlockInfo: [{ type: SHOP_TPYE.gold, count: 500 }], buyInfo: [{ type: SHOP_TPYE.video, count: 1 }] },
        { id: 6, unlockInfo: [{ type: SHOP_TPYE.exp, count: 0 }], buyInfo: [] },
        { id: 7, unlockInfo: [{ type: SHOP_TPYE.exp, count: 0 }], buyInfo: [] },
        { id: 8, unlockInfo: [{ type: SHOP_TPYE.exp, count: 0 }], buyInfo: [] },
        { id: 9, unlockInfo: [{ type: SHOP_TPYE.exp, count: 0 }], buyInfo: [] },
        { id: 10, unlockInfo: [{ type: SHOP_TPYE.exp, count: 0 }], buyInfo: [] },
        { id: 11, unlockInfo: [{ type: SHOP_TPYE.exp, count: 0 }], buyInfo: [] }
    ];

    class cc extends Laya.Script {
        static log(str, ...any) {
            console.log("<<<<<<<<<<<<<<<<<<<<<<<<<<<<" + str, ...any);
            if (cc.logView) {
                cc.logView.addLog("log:" + str, ...any);
            }
        }
        static warn(str, ...any) {
            console.warn("<<<<<<<<<<<<<<<<<<<<<<<<<<<<" + str, ...any);
            if (cc.logView) {
                cc.logView.addWarn("warn:" + str, ...any);
            }
        }
        static error(str, ...any) {
            console.error("<<<<<<<<<<<<<<<<<<<<<<<<<<<<" + str, ...any);
            if (cc.logView) {
                cc.logView.addError("error:" + str, ...any);
            }
        }
        static addToStage(view, index) {
            view.zOrder = index + 1000;
            Laya.stage.addChild(view);
        }
        static instantiate(pre) {
            return pre.create();
        }
        static isValid(pre) {
            if (pre)
                return true;
            return false;
        }
        static setItem(key, value) {
            Laya.LocalStorage.setItem(key, value);
        }
        static getItem(key) {
            return Laya.LocalStorage.getItem(key);
        }
        static emit(str, message) {
            Laya.stage.event(str, message);
        }
    }
    cc.loader = Laya.loader;

    class PlatUtils {
        static get IsNativeAndroid() {
            return Laya.Browser.onAndroid && window["PlatformClass"] && window["PlatformClass"].createClass("com.yzxx.jni.JNIHelper");
        }
        static get IsNativeIOS() {
            return Laya.Browser.onIPhone;
        }
        static get IsAndroid() {
            return Laya.Browser.onAndroid;
        }
        static get IsIOS() {
            return Laya.Browser.onIOS;
        }
        static get IsWechat() {
            return Laya.Browser.onWeiXin && !this.IsQQ && !this.IsDouyin && !this.IsBaidu;
        }
        static get IsOPPO() {
            return Laya.Browser.onQGMiniGame;
        }
        static get IsBaidu() {
            return Laya.Browser.onBDMiniGame;
        }
        static get IsVIVO() {
            return Laya.Browser.onVVMiniGame;
        }
        static get IsDouyin() {
            return Laya.Browser.window.tt;
        }
        static get IsQQ() {
            return Laya.Browser.onQQMiniGame;
        }
        static get IsQTT() {
            return Laya.Browser.window.qttGame;
        }
        static get IsXiaoMi() {
            return Laya.Browser.onKGMiniGame;
        }
        static get IsUc() {
            return Laya.Browser.window.uc;
        }
        static get Is4399() {
            return window.h5api;
        }
        static get IsTest() {
            return (Laya.Browser.onPC || Laya.Browser.onMac) && !this.IsQTT && !this.IsNativeAndroid && !this.IsNativeIOS;
        }
    }

    var LevelStatus;
    (function (LevelStatus) {
        LevelStatus["GameStart"] = "start";
        LevelStatus["GameWin"] = "complete";
        LevelStatus["GameFail"] = "fail";
        LevelStatus["GameSkip"] = "skip";
    })(LevelStatus || (LevelStatus = {}));
    var RewardType;
    (function (RewardType) {
        RewardType["Gold"] = "gold";
        RewardType["Skin"] = "Skin";
    })(RewardType || (RewardType = {}));
    ;
    class YZ_Reward {
        constructor() {
            this.rewardType = RewardType.Gold;
            this.rewardValue = 0;
        }
    }
    var BeForGameOverAdId;
    (function (BeForGameOverAdId) {
        BeForGameOverAdId["None"] = "none";
        BeForGameOverAdId["SharePanel"] = "share_panel";
        BeForGameOverAdId["GoldBox"] = "gold_box";
        BeForGameOverAdId["Turntable"] = "turntable";
        BeForGameOverAdId["CreateShortCut"] = "create_short_cut";
        BeForGameOverAdId["RecGame"] = "rec_game";
        BeForGameOverAdId["LuckBox"] = "luck_box";
        BeForGameOverAdId["SyncShow"] = "sync_show";
    })(BeForGameOverAdId || (BeForGameOverAdId = {}));
    ;
    var SubLocation;
    (function (SubLocation) {
        SubLocation["isReward"] = "isReward";
        SubLocation["isQCross"] = "isQCross";
        SubLocation["isMoreGame"] = "isMoreGame";
        SubLocation["isStatement"] = "isStatement";
        SubLocation["isTryGame"] = "isTryGame";
        SubLocation["isYzBanner"] = "isYzBanner";
        SubLocation["isScrollbar"] = "isScrollbar";
        SubLocation["isBeforGameOverAd"] = "isBeforGameOverAd";
        SubLocation["isVerticalPanel"] = "isVerticalPanel";
        SubLocation["isBoxInsertAd"] = "isBoxInsertAd";
    })(SubLocation || (SubLocation = {}));
    var VibrateType;
    (function (VibrateType) {
        VibrateType["Short"] = "short";
        VibrateType["Long"] = "long";
    })(VibrateType || (VibrateType = {}));
    var BannerLocation;
    (function (BannerLocation) {
        BannerLocation[BannerLocation["None"] = 0] = "None";
        BannerLocation[BannerLocation["Home"] = 1] = "Home";
        BannerLocation[BannerLocation["Sign"] = 2] = "Sign";
        BannerLocation[BannerLocation["Level"] = 3] = "Level";
        BannerLocation[BannerLocation["Skin"] = 4] = "Skin";
        BannerLocation[BannerLocation["Game"] = 5] = "Game";
        BannerLocation[BannerLocation["Pause"] = 6] = "Pause";
        BannerLocation[BannerLocation["Over"] = 7] = "Over";
    })(BannerLocation || (BannerLocation = {}));
    ;
    var AldStageType;
    (function (AldStageType) {
        AldStageType["Start"] = "StartGame";
        AldStageType["Running"] = "Running";
        AldStageType["GameWin"] = "GameWin";
        AldStageType["GameFail"] = "GameFail";
    })(AldStageType || (AldStageType = {}));
    var AldEventType;
    (function (AldEventType) {
        AldEventType["TrailSkinClick"] = "\u76AE\u80A4\u8BD5\u7528\u70B9\u51FB";
        AldEventType["TrailSkinSuccess"] = "\u76AE\u80A4\u8BD5\u7528\u6210\u529F";
        AldEventType["TrailSkinFail"] = "\u76AE\u80A4\u8BD5\u7528\u5931\u8D25";
        AldEventType["SkipLevelClick"] = "\u70B9\u51FB\u8DF3\u8FC7\u5173\u5361";
        AldEventType["SkipLevelSuccess"] = "\u8DF3\u8FC7\u5173\u5361\u6210\u529F";
        AldEventType["SkipLevelFail"] = "\u8DF3\u8FC7\u5173\u5361\u5931\u8D25";
        AldEventType["GameOverDoubleGoldClick"] = "\u70B9\u51FB\u6E38\u620F\u7ED3\u675F\u53CC\u500D\u83B7\u53D6\u91D1\u5E01";
        AldEventType["GameOverDoubleGoldSuccess"] = "\u6E38\u620F\u7ED3\u675F\u53CC\u500D\u83B7\u53D6\u91D1\u5E01\u6210\u529F";
        AldEventType["GameOverDoubleGoldFail"] = "\u6E38\u620F\u7ED3\u675F\u53CC\u500D\u83B7\u53D6\u91D1\u5E01\u5931\u8D25";
        AldEventType["SignDoubleGoldClick"] = "\u70B9\u51FB\u7B7E\u5230\u53CC\u500D\u9886\u53D6";
        AldEventType["SignDoubleGoldSuccess"] = "\u7B7E\u5230\u53CC\u500D\u9886\u53D6\u6210\u529F";
        AldEventType["SignDoubleGoldFail"] = "\u7B7E\u5230\u53CC\u500D\u9886\u53D6\u5931\u8D25";
        AldEventType["GameOverDoubleStarClick"] = "\u70B9\u51FB\u6E38\u620F\u7ED3\u675F\u664B\u7EA7\u4E09\u661F";
        AldEventType["GameOverDoubleStarSuccess"] = "\u6E38\u620F\u7ED3\u675F\u664B\u7EA7\u4E09\u661F\u6210\u529F";
        AldEventType["GameOverDoubleStarFail"] = "\u6E38\u620F\u7ED3\u675F\u664B\u7EA7\u4E09\u661F\u5931\u8D25";
        AldEventType["GameVersion"] = "\u6E38\u620F\u7248\u672C";
        AldEventType["LoadSkinScene"] = "\u8FDB\u5165\u76AE\u80A4\u573A\u666F";
        AldEventType["PaySkin"] = "\u8D2D\u4E70\u76AE\u80A4\u6210\u529F";
    })(AldEventType || (AldEventType = {}));
    ;
    var ViewLocation;
    (function (ViewLocation) {
        ViewLocation[ViewLocation["None"] = 0] = "None";
        ViewLocation[ViewLocation["sign"] = 1] = "sign";
        ViewLocation[ViewLocation["trySkin"] = 2] = "trySkin";
        ViewLocation[ViewLocation["box"] = 3] = "box";
        ViewLocation[ViewLocation["over"] = 4] = "over";
        ViewLocation[ViewLocation["turntable"] = 5] = "turntable";
    })(ViewLocation || (ViewLocation = {}));
    ;
    let BannerLocationToString = function (location) {
        let str = ["none", "home", "level", "skin", "game", "pause", "over"];
        return str[location];
    };
    let BannerLocationToEnum = function (locationString) {
        let str = ["none", "home", "level", "skin", "game", "pause", "over"];
        for (let i = 0; i < str.length; i++) {
            if (str[i] == locationString) {
                return i;
            }
        }
        return BannerLocation.None;
    };
    class YZ_Constant {
    }
    YZ_Constant.SERVER_VERSION = "v1";
    YZ_Constant.ST_UID = "UID";
    YZ_Constant.ST_SERVICE_UID = "SERVICE_UID";
    YZ_Constant.ST_SOURCE = "SOURCE";
    YZ_Constant.YZ_EventCommon = "YZ_EventCommon";
    YZ_Constant.EC_ServerInit = "ServerInit";
    YZ_Constant.EC_OnHide = "EventOnHide";
    YZ_Constant.EC_OnShow = "EventOnShow";
    YZ_Constant.ST_RED_BAG_PROGRESS = "YZ_RED_BAG_PROGRESS";
    YZ_Constant.ST_RED_BAG_TOTAL_PROGRESS = "YZ_RED_BAG_TOTAL_PROGRESS";
    YZ_Constant.ST_RED_BAG_BALANCE = "YZ_RED_BAG_BALANCE";
    YZ_Constant.ST_RED_BAG_TOTAL_MONEY = "YZ_RED_BAG_TOTAL_MONEY";
    YZ_Constant.ST_FREE_RED_BAG_TIME = "YZ_ST_FREE_RED_BAG_TIME";
    YZ_Constant.ST_LAST_OPEN_LEVEL = "YZ_ST_LAST_OPEN_LEVEL";
    YZ_Constant.YZ_NativeAdClick = "YZ_NativeAdClick";

    class OtherConfig extends Laya.Script {
        constructor() {
            super(...arguments);
            this.shareTitle = "";
            this.shareImgUrl = "";
            this.rewardLuckBoxPanel = null;
            this.nativeBanner = null;
            this.nativeInsert = null;
            this.recommendGamesBanner = null;
            this.logoutView = null;
            this.recommendGamesBar = null;
            this.tryGamesWidget = null;
            this.nativeTryGamesWidget = null;
            this.moreGamesWidget = null;
            this.recordWidget = null;
            this.shortcutWidget = null;
            this.crossWidget6 = null;
            this.shareRecordPanel = null;
            this.rewardBoxPanel = null;
            this.rewardTurnTablePanel = null;
            this.gameExitDialog = null;
            this.rewardShortCutPanel = null;
            this.beforGameOverRecGamesPanel = null;
            this.withdrawalWidget = null;
            this.withdrawalPanel = null;
            this.openRedBagPanel = null;
            this.redBagProgressWidget = null;
            this.rewardRedBagPanel = null;
            this.verticalRecommentPanel = null;
            this.privacyPolicy = null;
            this.helpHand = null;
            this.singleNativeAd = null;
        }
    }

    class NativeBannerInfo {
        constructor() {
            this.location = BannerLocation.None;
            this.show_st_banner = "false";
            this.banner_close_but_size = 40;
            this.banner_close_but_alpha = 120;
            this.banner_show_height = 160;
            this.banner_close_but_range = 44;
            this.banner_close_but_show = "true";
            this.st_banner_scale = 1;
            this.st_banner_down_btn_image = "";
            this.st_banner_down_but_show = 0;
            this.st_banner_down_but_margin_top = 0;
            this.st_banner_close_but_range = 55;
            this.st_banner_close_but_size = 55;
            this.st_banner_close_but_show = "true";
            this.st_banner_bottom = 0;
            this.st_banner_close_but_alpha = 255;
            this.banner_click_refresh = "true";
            this.auto_refresh = -1;
            this.st_banner_style = -1;
            this.st_banner_width = -1;
            this.st_banner_height = -1;
            this.st_banner_show_back_up = 1;
            this.is_show_rec = -1;
            this.is_show_banner = 1;
            this.delay_show_time = 0;
        }
        init(location, info) {
            this.location = location;
            this.banner_close_but_alpha = info.banner_close_but_alpha != undefined || info.banner_close_but_alpha != null ? info.banner_close_but_alpha : this.banner_close_but_alpha;
            this.banner_close_but_range = info.banner_close_but_range != undefined || info.banner_close_but_range != null ? info.banner_close_but_range : this.banner_close_but_range;
            this.banner_close_but_size = info.banner_close_but_size != undefined || info.banner_close_but_size != null ? info.banner_close_but_size : this.banner_close_but_size;
            this.banner_show_height = info.banner_show_height != undefined || info.banner_show_height != null ? info.banner_show_height : this.banner_show_height;
            this.banner_close_but_show = info.banner_close_but_show != undefined || info.banner_close_but_show != null ? info.banner_close_but_show : this.banner_close_but_show;
            this.st_banner_close_but_range = info.st_banner_close_but_range != undefined || info.st_banner_close_but_range != null ? info.st_banner_close_but_range : this.st_banner_close_but_range;
            this.st_banner_close_but_size = info.st_banner_close_but_size != undefined || info.st_banner_close_but_size != null ? info.st_banner_close_but_size : this.st_banner_close_but_size;
            this.st_banner_down_btn_image = info.st_banner_down_btn_image != undefined || info.st_banner_down_btn_image != null ? info.st_banner_down_btn_image : this.st_banner_down_btn_image;
            this.st_banner_down_but_margin_top = info.st_banner_down_but_margin_top != undefined || info.st_banner_down_but_margin_top != null ? info.st_banner_down_but_margin_top : this.st_banner_down_but_margin_top;
            this.st_banner_down_but_show = info.st_banner_down_but_show != undefined || info.st_banner_down_but_show != null ? info.st_banner_down_but_show : this.st_banner_down_but_show;
            this.st_banner_scale = info.st_banner_scale != undefined || info.st_banner_scale != null ? info.st_banner_scale : this.st_banner_scale;
            this.show_st_banner = info.show_st_banner != undefined || info.show_st_banner != null ? info.show_st_banner : this.show_st_banner;
            this.st_banner_close_but_show = info.st_banner_close_but_show != undefined || info.st_banner_close_but_show != null ? info.st_banner_close_but_show : this.st_banner_close_but_show;
            this.st_banner_bottom = info.st_banner_bottom != undefined || info.st_banner_bottom != null ? info.st_banner_bottom : this.st_banner_bottom;
            this.st_banner_close_but_alpha = info.st_banner_close_but_alpha != undefined || info.st_banner_close_but_alpha != null ? info.st_banner_close_but_alpha : this.st_banner_close_but_alpha;
            this.banner_click_refresh = info.banner_click_refresh != undefined || info.banner_click_refresh != null ? info.banner_click_refresh : this.banner_click_refresh;
            this.auto_refresh = info.auto_refresh != undefined || info.auto_refresh != null ? info.auto_refresh : this.auto_refresh;
            this.st_banner_style = info.st_banner_style != undefined || info.st_banner_style != null ? info.st_banner_style : this.st_banner_style;
            this.st_banner_width = info.st_banner_width != undefined || info.st_banner_width != null ? info.st_banner_width : this.st_banner_width;
            this.st_banner_height = info.st_banner_height != undefined || info.st_banner_height != null ? info.st_banner_height : this.st_banner_height;
            this.st_banner_show_back_up = info.st_banner_show_back_up != undefined || info.st_banner_show_back_up != null ? info.st_banner_show_back_up : this.st_banner_show_back_up;
            this.is_show_banner = info.is_show_banner != undefined || info.is_show_banner != null ? info.is_show_banner : this.is_show_banner;
            this.is_show_rec = info.is_show_rec != undefined || info.is_show_rec != null ? info.is_show_rec : this.is_show_rec;
            this.delay_show_time = info.delay_show_time != undefined || info.delay_show_time != null ? info.delay_show_time : this.delay_show_time;
        }
        toStrong() {
            return `location=${this.location}&is_show_banner=${this.is_show_banner}&banner_close_but_show=${this.banner_close_but_show}&banner_close_but_alpha=${this.banner_close_but_alpha}&banner_close_but_range=${this.banner_close_but_range}&banner_close_but_size=${this.banner_close_but_size}&banner_show_height=${this.banner_show_height}&st_banner_close_but_range=${this.st_banner_close_but_range}&st_banner_close_but_size=${this.st_banner_close_but_size}&st_banner_down_btn_image=${this.st_banner_down_btn_image}&st_banner_down_but_margin_top=${this.st_banner_down_but_margin_top}&st_banner_down_but_show=${this.st_banner_down_but_show}&st_banner_scale=${this.st_banner_scale}&show_st_banner=${this.show_st_banner}&st_banner_close_but_show=${this.st_banner_close_but_show}&st_banner_bottom=${this.st_banner_bottom}&st_banner_close_but_alpha=${this.st_banner_close_but_alpha}&banner_click_refresh=${this.banner_click_refresh}&auto_refresh=${this.auto_refresh}&st_banner_style=${this.st_banner_style}&st_banner_width=${this.st_banner_width}&st_banner_height=${this.st_banner_height}&st_banner_show_back_up=${this.st_banner_show_back_up}`;
        }
    }
    class BannerIdInfo {
        constructor() {
            this.location = BannerLocation.None;
            this.bannerId = "";
        }
    }
    ;
    class DouyinConfig {
        constructor() {
            this.insertId = "";
            this.appID = "";
            this.bannerId = "";
            this.videoId = "";
            this.version = "";
        }
    }
    class WechatConfig {
        constructor() {
            this.appID = "";
            this.bannerIds = [];
            this.videoId = "";
            this.insertId = "";
            this.jumpId = "";
            this.appBoxId = "";
        }
        getBannerId(location) {
            for (let i = 0; i < this.bannerIds.length; i++) {
                utils.showLog("当前banner列表里的banner：", this.bannerIds[i].location, this.bannerIds[i].bannerId);
                if (this.bannerIds[i].location == location) {
                    return this.bannerIds[i].bannerId;
                }
            }
            if (this.bannerIds.length > 0) {
                return this.bannerIds[0];
            }
            return "";
        }
        setBannerId(location, bannerId) {
            for (let i = 0; i < this.bannerIds.length; i++) {
                if (this.bannerIds[i].location == location) {
                    this.bannerIds[i].bannerId = bannerId;
                    return;
                }
            }
        }
    }
    class QQConfig {
        constructor() {
            this.QQ = false;
            this.insertId = "";
            this.appID = "";
            this.bannerId = "";
            this.videoId = "";
            this.boxId = "";
            this.bannerBoxId = "";
            this.version = "";
        }
    }
    class XiaoMiConfig {
        constructor() {
            this.XiaoMi = false;
            this.appID = "";
            this.bannerId = "";
            this.videoId = "";
            this.insertId = "";
        }
    }
    class OppoConfig {
        constructor() {
            this.appID = "";
            this.channel = "oppo";
            this.packageName = "";
            this.bannerId = "";
            this.insertId = "";
            this.videoId = "";
            this.version = "";
            this.recGameBannerId = "";
            this.nativeTryGameIds = [];
            this.nativeBannerIds = [];
            this.nativeInsertIds = [];
            this.nativeSingleAdIds = [];
            this.recPortalId = "";
            this.nativeBannerInfos = [];
        }
        getNativeBannerInfo(location) {
            for (let i = 0; i < this.nativeBannerInfos.length; i++) {
                if (this.nativeBannerInfos[i].location == location) {
                    return this.nativeBannerInfos[i];
                }
            }
            return new NativeBannerInfo();
        }
        setNativeBannerInfo(location, bannerInfo) {
            let nativeBannerInfo = new NativeBannerInfo();
            nativeBannerInfo.init(location, bannerInfo);
            this.nativeBannerInfos.push(nativeBannerInfo);
        }
    }
    class VivoConfig {
        constructor() {
            this.showAd = true;
            this.appID = "";
            this.bannerId = "";
            this.insertId = "";
            this.videoId = "";
            this.nativeTryGameIds = [];
            this.nativeBannerIds = [];
            this.nativeInsertIds = [];
            this.nativeBannerInfos = [];
        }
        getNativeBannerInfo(location) {
            for (let i = 0; i < this.nativeBannerInfos.length; i++) {
                if (this.nativeBannerInfos[i].location == location) {
                    return this.nativeBannerInfos[i];
                }
            }
            return new NativeBannerInfo();
        }
        setNativeBannerInfo(location, bannerInfo) {
            let nativeBannerInfo = new NativeBannerInfo();
            nativeBannerInfo.init(location, bannerInfo);
            this.nativeBannerInfos.push(nativeBannerInfo);
        }
    }
    class BaiduConfig {
        constructor() {
            this.appID = "";
            this.appSID = "";
            this.bannerId = "";
            this.videoId = "";
            this.version = "";
        }
    }
    class QTTConfig {
        constructor() {
            this.QuTouTiao = false;
            this.showAd = true;
            this.gamename = "";
            this.appID = "";
            this.appKey = "";
        }
    }
    class UCConfig {
        constructor() {
            this.appID = "";
            this.appKey = "";
            this.version = "";
        }
    }
    class NativeAndroidConfig {
        constructor() {
            this.appID = "";
            this.channel = "";
            this.version = "";
        }
    }
    class YzRedBagInfo {
        constructor() {
            this._progress = 0;
            this._totalProgress = 5;
            this._balance = 0.00;
            this._totalMoeny = 0;
            this._lastOpenFreeRedBagTime = "";
            this._progressInfos = null;
            this._lastOpenLevel = "-1";
            this._freeRedBagCount = 0;
            this.withdrawaMoneys = [5, 20, 45, 50];
            if (PlatUtils.IsTest) {
                this._progressInfos = [
                    {
                        level: 0,
                        min_money: 0.1,
                        max_money: 5,
                        type: 1
                    },
                    {
                        level: 4,
                        min_money: 0.1,
                        max_money: 3,
                        type: 3
                    },
                    {
                        level: 5,
                        min_money: 0.001,
                        max_money: 0.005,
                        type: 2
                    }
                ];
            }
            this._progress = cc.getItem(YZ_Constant.ST_RED_BAG_PROGRESS) ? cc.getItem(YZ_Constant.ST_RED_BAG_PROGRESS) : 0;
            this._totalProgress = cc.getItem(YZ_Constant.ST_RED_BAG_TOTAL_PROGRESS) ? cc.getItem(YZ_Constant.ST_RED_BAG_TOTAL_PROGRESS) : 5;
            this._balance = cc.getItem(YZ_Constant.ST_RED_BAG_BALANCE) ? parseFloat(cc.getItem(YZ_Constant.ST_RED_BAG_BALANCE)) : 0.00;
            this._totalMoeny = cc.getItem(YZ_Constant.ST_RED_BAG_TOTAL_MONEY) ? parseFloat(cc.getItem(YZ_Constant.ST_RED_BAG_TOTAL_MONEY)) : 0.00;
            this._lastOpenFreeRedBagTime = cc.getItem(YZ_Constant.ST_FREE_RED_BAG_TIME) ? cc.getItem(YZ_Constant.ST_FREE_RED_BAG_TIME) : "";
            this._lastOpenLevel = cc.getItem(YZ_Constant.ST_LAST_OPEN_LEVEL) ? cc.getItem(YZ_Constant.ST_LAST_OPEN_LEVEL) : "-1";
        }
        get freeRedBagCount() {
            return this._freeRedBagCount;
        }
        set freeRedBagCount(value) {
            this._freeRedBagCount = value;
        }
        get lastOpenLevel() {
            return this._lastOpenLevel;
        }
        set lastOpenLevel(value) {
            this._lastOpenLevel = value;
            cc.setItem(YZ_Constant.ST_LAST_OPEN_LEVEL, value);
        }
        get progress() {
            return this._progress;
        }
        set progress(value) {
            this._progress = value;
            if (this._progress > this._totalProgress) {
                this._progress = this._totalProgress;
            }
            else {
                utils._rewardRedBagPanelShowCount = -1;
            }
            cc.setItem(YZ_Constant.ST_RED_BAG_PROGRESS, this._progress + '');
            cc.emit("YZ_RED_BAG_PROGRESS_CHANGE", null);
        }
        get totalProgress() {
            return this._totalProgress;
        }
        set totalProgress(value) {
            this._totalProgress = value;
            cc.setItem(YZ_Constant.ST_RED_BAG_TOTAL_PROGRESS, value + '');
        }
        get totalMoney() {
            return this._totalMoeny;
        }
        set totalMoney(value) {
            this._totalMoeny = value;
            cc.setItem(YZ_Constant.ST_RED_BAG_TOTAL_MONEY, value + '');
        }
        set progressInfos(values) {
            this._progressInfos = values;
        }
        get progressInfos() {
            return this._progressInfos;
        }
        get curProgressInfo() {
            if (this._progressInfos && this._progressInfos.length > 0) {
                if (parseInt(this.lastOpenLevel) > 0 && parseInt(this.lastOpenLevel) >= utils.currentLevel) {
                    return this._progressInfos[this._progressInfos.length - 1];
                }
                let temp = this.lastOpenLevel ? this._progressInfos[0] : this._progressInfos[1];
                for (let i = 0; i < this._progressInfos.length; i++) {
                    if (utils.currentLevel <= this._progressInfos[i].level) {
                        temp = this._progressInfos[i];
                        break;
                    }
                }
                console.log("curInfo " + JSON.stringify(temp));
                return temp;
            }
            return null;
        }
        get balance() {
            return this._balance;
        }
        set balance(value) {
            this._balance = value;
            cc.setItem(YZ_Constant.ST_RED_BAG_BALANCE, value + '');
            cc.emit("YZ_RED_BAG_BALANCE_CHANGE", null);
        }
        get lastOpenFreeRedBagTime() {
            return this._lastOpenFreeRedBagTime;
        }
        set lastOpenFreeRedBagTime(value) {
            this._lastOpenFreeRedBagTime = value;
            cc.setItem(YZ_Constant.ST_FREE_RED_BAG_TIME, value + '');
        }
        get isFreeRedBag() {
            utils.showLog("是否有免费红包：" + new Date().toDateString() != this._lastOpenFreeRedBagTime);
            return new Date().toDateString() != this._lastOpenFreeRedBagTime;
        }
    }
    class CommonConfig extends Laya.Script {
        constructor() {
            super(...arguments);
            this.wechatconfig = new WechatConfig();
            this.oppoconfig = new OppoConfig();
            this.vivoconfig = new VivoConfig();
            this.baiduconfig = new BaiduConfig();
            this.douyinconfig = new DouyinConfig();
            this.ucConfig = new UCConfig();
            this.qqconfig = new QQConfig();
            this.qttconfig = new QTTConfig();
            this.xiaomiConfig = new XiaoMiConfig();
            this.nativeAndroidConfig = new NativeAndroidConfig();
            this.otherconfig = new OtherConfig();
        }
        init(data) {
            if (PlatUtils.IsWechat) {
                utils.showLog("CommonConfig在微信平台");
                return this._init_wechat(data);
            }
            else if (PlatUtils.IsOPPO) {
                return this._init_oppo(data);
            }
            else if (PlatUtils.IsVIVO) {
                return this._init_vivo(data);
            }
            else if (PlatUtils.IsDouyin) {
                return this._init_douyin(data);
            }
            else if (PlatUtils.IsQQ) {
                utils.showLog("CommonConfig在qq平台");
                return this._init_qq(data);
            }
            else if (PlatUtils.IsBaidu) {
                return this._init_baidu(data);
            }
            else if (PlatUtils.IsQTT) {
                return this._init_qtt(data);
            }
            else if (PlatUtils.IsNativeAndroid) {
                return this._init_native_android();
                ;
            }
            else if (PlatUtils.IsUc) {
                return this._init_uc(data);
            }
            else if (PlatUtils.IsXiaoMi) {
                return this._init_xiaomi(data);
            }
            else {
                return true;
            }
        }
        _init_wechat(data) {
            if (!data)
                return false;
            utils.showLog("本地配置数据:", data);
            let configObj = JSON.parse(data);
            if (configObj) {
                if (configObj.wechat) {
                    if (configObj.wechat.app_id) {
                        this.wechatconfig.appID = configObj.wechat.app_id;
                    }
                    else {
                        cc.error("本地配置数据不包含‘app_id’字段！");
                        return false;
                    }
                    if (configObj.wechat.intersititia_pos_id) {
                        this.wechatconfig.insertId = configObj.wechat.intersititia_pos_id;
                    }
                    else {
                        cc.error("本地配置数据不包含‘intersititia_pos_id’字段！");
                        return false;
                    }
                    if (configObj.wechat.video_pos_id) {
                        this.wechatconfig.videoId = configObj.wechat.video_pos_id;
                    }
                    else {
                        cc.error("本地配置数据不包含‘video_pos_id’字段！");
                        return false;
                    }
                    if (configObj.wechat.app_box_pos_id) {
                        this.wechatconfig.appBoxId = configObj.wechat.app_box_pos_id;
                    }
                    else {
                        utils.showLog("本地配置数据不包含‘app_box_pos_id’字段！");
                    }
                    if (configObj.wechat.banner_pos_id) {
                        for (let key in configObj.wechat.banner_pos_id) {
                            let bannerInfo = new BannerIdInfo();
                            bannerInfo.location = this._bannerLocationStringToEnum(key);
                            bannerInfo.bannerId = configObj.wechat.banner_pos_id[key];
                            this.wechatconfig.bannerIds.push(bannerInfo);
                        }
                    }
                    else {
                        cc.error("本地配置数据不包含‘banner_pos_id’字段！");
                        return false;
                    }
                    if (configObj.wechat.shares) {
                        if (configObj.wechat.shares.sy_title) {
                            this.otherconfig.shareTitle = configObj.wechat.shares.sy_title;
                        }
                        else {
                            cc.error("本地配置数据不包含‘share.shareTitle’字段！");
                            return false;
                        }
                        if (configObj.wechat.shares.sy_img) {
                            this.otherconfig.shareImgUrl = configObj.wechat.shares.sy_img;
                        }
                        else {
                            cc.error("本地配置数据不包含‘share.shareImgUrl’字段！");
                            return false;
                        }
                    }
                    else {
                        cc.error("本地配置数据不包含‘share’字段！");
                        return false;
                    }
                    if (configObj.wechat.jump_id) {
                        this.wechatconfig.jumpId = configObj.wechat.jump_id;
                    }
                    else {
                        cc.error("本地配置中不包含 ‘jump_id’ 字段");
                        return false;
                    }
                }
                else {
                    cc.error("本地配置数据不包含‘wechat’字段！");
                    return false;
                }
            }
            else {
                cc.error("本地配置数据不是合法的json数据!");
                return false;
            }
            return true;
        }
        _init_uc(data) {
            if (!data)
                return false;
            utils.showLog("本地配置数据:" + data);
            let configObj = JSON.parse(data);
            if (configObj) {
                if (configObj.uc) {
                    if (configObj.uc.app_id) {
                        this.ucConfig.appID = configObj.uc.app_id;
                    }
                    else {
                        utils.showLog("error" + "本地配置数据不包含‘app_id’字段！");
                        return false;
                    }
                    if (configObj.uc.version) {
                        this.ucConfig.version = configObj.uc.version;
                    }
                    else {
                        utils.showLog("error" + "本地配置数据不包含‘version’字段！");
                        return false;
                    }
                    if (configObj.uc.shares) {
                        if (configObj.uc.shares.sy_title) {
                            this.otherconfig.shareTitle = configObj.uc.shares.sy_title;
                        }
                        else {
                            utils.showLog("error" + "本地配置数据不包含‘shares.shareTitle’字段！");
                            return false;
                        }
                        if (configObj.uc.shares.sy_img) {
                            this.otherconfig.shareImgUrl = configObj.uc.shares.sy_img;
                        }
                        else {
                            utils.showLog("error" + "本地配置数据不包含‘shares.shareImgUrl’字段！");
                            return false;
                        }
                    }
                    else {
                        utils.showLog("error" + "本地配置数据不包含‘shares’字段！");
                        return false;
                    }
                }
                else {
                    utils.showLog("error" + "本地配置数据不包含‘uc’字段！");
                    return false;
                }
            }
            else {
                utils.showLog("error" + "本地配置数据不是合法的json数据!");
                return false;
            }
            return true;
        }
        _init_oppo(data) {
            if (!data)
                return false;
            utils.showLog("本地配置数据:", data);
            let configObj = JSON.parse(data);
            if (configObj) {
                if (configObj.oppo) {
                    if (configObj.oppo.app_id) {
                        this.oppoconfig.appID = configObj.oppo.app_id;
                    }
                    else {
                        cc.error("本地配置数据不包含‘app_id’字段！");
                        return false;
                    }
                    if (configObj.oppo.package_name) {
                        this.oppoconfig.packageName = configObj.oppo.package_name;
                    }
                    else {
                        cc.error("本地配置数据不包含‘package_name’字段！");
                        return false;
                    }
                    if (configObj.oppo.native_trygame_pos_id) {
                        this.oppoconfig.nativeTryGameIds = configObj.oppo.native_trygame_pos_id;
                    }
                    else {
                        utils.showLog("error" + "本地配置数据不包含‘native_trygame_pos_id’字段！");
                    }
                    if (configObj.oppo.version) {
                        this.oppoconfig.version = configObj.oppo.version;
                    }
                    else {
                        utils.showLog("error" + "本地配置数据不包含‘version’字段！");
                        return false;
                    }
                    if (configObj.oppo.rec_game_banner_id) {
                        this.oppoconfig.recGameBannerId = configObj.oppo.rec_game_banner_id;
                    }
                    else {
                        utils.showLog("error" + "本地配置数据不包含‘rec_game_banner_id’字段！");
                    }
                    if (configObj.oppo.banner_pos_id) {
                        this.oppoconfig.bannerId = configObj.oppo.banner_pos_id;
                    }
                    else {
                        cc.error("本地配置数据不包含‘banner_pos_id’字段！");
                        return false;
                    }
                    if (configObj.oppo.intersititia_pos_id) {
                        this.oppoconfig.insertId = configObj.oppo.intersititia_pos_id;
                    }
                    else {
                        cc.error("本地配置数据不包含‘intersititia_pos_id’字段！");
                        return false;
                    }
                    if (configObj.oppo.video_pos_id) {
                        this.oppoconfig.videoId = configObj.oppo.video_pos_id;
                    }
                    else {
                        cc.error("本地配置数据不包含‘video_pos_id’字段！");
                        return false;
                    }
                    if (configObj.oppo.native_banner_pos_id) {
                        this.oppoconfig.nativeBannerIds = configObj.oppo.native_banner_pos_id;
                    }
                    else {
                        cc.error("本地配置数据不包含‘native_banner_pos_id’字段！");
                        return false;
                    }
                    if (configObj.oppo.native_intersititial_pos_id) {
                        this.oppoconfig.nativeInsertIds = configObj.oppo.native_intersititial_pos_id;
                    }
                    else {
                        cc.error("本地配置数据不包含‘native_intersititial_pos_id’字段！");
                        return false;
                    }
                    if (configObj.oppo.rec_portal_id) {
                        this.oppoconfig.recPortalId = configObj.oppo.rec_portal_id;
                    }
                    else {
                        utils.showLog("error" + "本地配置数据不包含‘rec_portal_id’字段！");
                    }
                    if (configObj.oppo.native_single_pos_id) {
                        this.oppoconfig.nativeSingleAdIds = configObj.oppo.native_single_pos_id;
                    }
                    else {
                        cc.error("本地配置数据不包含‘native_single_pos_id’字段！");
                        return false;
                    }
                }
                else {
                    cc.error("本地配置数据不包含‘oppo’字段！");
                    return false;
                }
            }
            else {
                cc.error("本地配置数据不是合法的json数据!");
                return false;
            }
            return true;
        }
        _init_vivo(data) {
            if (!data)
                return false;
            utils.showLog("本地配置数据:", data);
            let configObj = JSON.parse(data);
            if (configObj) {
                if (configObj.vivo) {
                    if (configObj.vivo.app_id) {
                        this.vivoconfig.appID = configObj.vivo.app_id;
                    }
                    else {
                        cc.error("本地配置数据不包含‘app_id’字段！");
                        return false;
                    }
                    if (configObj.vivo.intersititia_pos_id) {
                        this.vivoconfig.insertId = configObj.vivo.intersititia_pos_id;
                    }
                    else {
                        cc.error("本地配置数据不包含‘intersititia_pos_id’字段！");
                        return false;
                    }
                    if (configObj.vivo.video_pos_id) {
                        this.vivoconfig.videoId = configObj.vivo.video_pos_id;
                    }
                    else {
                        cc.error("本地配置数据不包含‘video_pos_id’字段！");
                        return false;
                    }
                    if (configObj.vivo.native_trygame_pos_id) {
                        this.vivoconfig.nativeTryGameIds = configObj.vivo.native_trygame_pos_id;
                    }
                    else {
                        utils.showLog("error" + "本地配置数据不包含‘native_trygame_pos_id’字段！");
                    }
                    if (configObj.vivo.banner_pos_id) {
                        this.vivoconfig.bannerId = configObj.vivo.banner_pos_id;
                    }
                    else {
                        cc.error("本地配置数据不包含‘banner_pos_id’字段！");
                        return false;
                    }
                    if (configObj.vivo.native_banner_pos_id) {
                        this.vivoconfig.nativeBannerIds = configObj.vivo.native_banner_pos_id;
                    }
                    else {
                        cc.error("本地配置数据不包含‘native_banner_pos_id’字段！");
                        return false;
                    }
                    if (configObj.vivo.native_intersititial_pos_id) {
                        this.vivoconfig.nativeInsertIds = configObj.vivo.native_intersititial_pos_id;
                    }
                    else {
                        cc.error("本地配置数据不包含‘native_intersititial_pos_id’字段！");
                        return false;
                    }
                }
                else {
                    cc.error("本地配置数据不包含‘vivo’字段！");
                    return false;
                }
            }
            else {
                cc.error("本地配置数据不是合法的json数据!");
                return false;
            }
            return true;
        }
        _init_baidu(data) {
            if (!data)
                return false;
            utils.showLog("本地配置数据:", data);
            let configObj = JSON.parse(data);
            if (configObj) {
                if (configObj.baidu) {
                    if (configObj.baidu.app_id) {
                        this.baiduconfig.appID = configObj.baidu.app_id;
                    }
                    else {
                        cc.error("本地配置数据不包含‘app_id’字段！");
                        return false;
                    }
                    if (configObj.baidu.app_sid) {
                        this.baiduconfig.appSID = configObj.baidu.app_sid;
                    }
                    else {
                        cc.error("本地配置数据不包含‘app_sid’字段！");
                    }
                    if (configObj.baidu.video_pos_id) {
                        this.baiduconfig.videoId = configObj.baidu.video_pos_id;
                    }
                    else {
                        cc.error("本地配置数据不包含‘video_pos_id’字段！");
                        return false;
                    }
                    if (configObj.baidu.banner_pos_id) {
                        this.baiduconfig.bannerId = configObj.baidu.banner_pos_id;
                    }
                    else {
                        cc.error("本地配置数据不包含‘banner_pos_id’字段！");
                        return false;
                    }
                    if (configObj.baidu.version) {
                        this.baiduconfig.version = configObj.baidu.version;
                    }
                    else {
                        utils.showLog("error" + "本地配置数据不包含‘version’字段！");
                        return false;
                    }
                    if (configObj.baidu.shares) {
                        if (configObj.baidu.shares.sy_title) {
                            this.otherconfig.shareTitle = configObj.baidu.shares.sy_title;
                        }
                        else {
                            cc.error("本地配置数据不包含‘shares.sy_title’字段！");
                            return false;
                        }
                        if (configObj.baidu.shares.sy_img) {
                            this.otherconfig.shareImgUrl = configObj.baidu.shares.sy_img;
                        }
                        else {
                            cc.error("本地配置数据不包含‘shares.sy_img’字段！");
                            return false;
                        }
                    }
                    else {
                        cc.error("本地配置数据不包含‘shares’字段！");
                        return false;
                    }
                }
                else {
                    cc.error("本地配置数据不包含‘baidu’字段！");
                    return false;
                }
            }
            else {
                cc.error("本地配置数据不是合法的json数据!");
                return false;
            }
            return true;
        }
        _init_douyin(data) {
            if (!data)
                return false;
            if (!this.douyinconfig) {
                this.douyinconfig = new DouyinConfig();
            }
            ;
            let configObj = JSON.parse(data);
            if (configObj) {
                if (configObj.toutiao) {
                    if (configObj.toutiao.app_id) {
                        this.douyinconfig.appID = configObj.toutiao.app_id;
                    }
                    else {
                        cc.error("本地配置数据不包含‘app_id’字段！");
                        return false;
                    }
                    if (configObj.toutiao.banner_pos_id) {
                        this.douyinconfig.bannerId = configObj.toutiao.banner_pos_id;
                    }
                    else {
                        cc.error("本地配置数据不包含‘banner_pos_id’字段！");
                        return false;
                    }
                    if (configObj.toutiao.intersititia_pos_id) {
                        this.douyinconfig.insertId = configObj.toutiao.intersititia_pos_id;
                    }
                    else {
                        cc.error("本地配置数据不包含‘intersititia_pos_id’字段！");
                        return false;
                    }
                    if (configObj.toutiao.video_pos_id) {
                        this.douyinconfig.videoId = configObj.toutiao.video_pos_id;
                    }
                    else {
                        cc.error("本地配置数据不包含‘video_pos_id’字段！");
                        return false;
                    }
                    if (configObj.toutiao.version) {
                        this.douyinconfig.version = configObj.toutiao.version;
                    }
                    else {
                        cc.error("本地配置数据不包含‘version’字段！");
                        return false;
                    }
                    if (configObj.toutiao.shares) {
                        if (configObj.toutiao.shares.sy_title) {
                            this.otherconfig.shareTitle = configObj.toutiao.shares.sy_title;
                        }
                        else {
                            cc.error("本地配置数据不包含‘share.sy_title’字段！");
                            return false;
                        }
                        if (configObj.toutiao.shares.sy_img) {
                            this.otherconfig.shareImgUrl = configObj.toutiao.shares.sy_img;
                        }
                        else {
                            cc.error("本地配置数据不包含‘share.sy_img’字段！");
                            return false;
                        }
                    }
                    else {
                        cc.error("本地配置数据不包含‘share’字段！");
                        return false;
                    }
                }
            }
            else {
                cc.warn("本地配置数据不是合法的json数据!");
                return false;
            }
            return true;
        }
        _init_qq(data) {
            if (!data)
                return false;
            utils.showLog("本地配置数据:", data);
            let configObj = JSON.parse(data);
            if (configObj) {
                if (configObj.qq) {
                    if (configObj.qq.app_id) {
                        this.qqconfig.appID = configObj.qq.app_id;
                    }
                    else {
                        cc.error("本地配置数据不包含‘app_id’字段！");
                        return false;
                    }
                    if (configObj.qq.video_pos_id) {
                        this.qqconfig.videoId = configObj.qq.video_pos_id;
                    }
                    else {
                        cc.error("本地配置数据不包含‘video_pos_id’字段！");
                        return false;
                    }
                    if (configObj.qq.intersititia_pos_id) {
                        this.qqconfig.insertId = configObj.qq.intersititia_pos_id;
                    }
                    else {
                        cc.error("本地配置数据不包含‘intersititia_pos_id’字段！");
                        return false;
                    }
                    if (configObj.qq.banner_pos_id) {
                        this.qqconfig.bannerId = configObj.qq.banner_pos_id;
                    }
                    else {
                        cc.error("本地配置数据不包含‘banner_pos_id’字段！");
                        return false;
                    }
                    if (configObj.qq.box_pos_id) {
                        this.qqconfig.boxId = configObj.qq.box_pos_id;
                    }
                    else {
                        utils.showMsg("error" + "本地配置数据不包含‘box_pos_id’字段！");
                        return false;
                    }
                    if (configObj.qq.banner_box_pos_id) {
                        this.qqconfig.bannerBoxId = configObj.qq.banner_box_pos_id;
                    }
                    else {
                        utils.showMsg("error" + "本地配置数据不包含‘banner_box_pos_id’字段！");
                        return false;
                    }
                    if (configObj.qq.version) {
                        this.qqconfig.version = configObj.qq.version;
                    }
                    else {
                        utils.showMsg("error" + "本地配置数据不包含‘version’字段！");
                        return false;
                    }
                    if (configObj.qq.shares) {
                        if (configObj.qq.shares.sy_title) {
                            this.otherconfig.shareTitle = configObj.qq.shares.sy_title;
                        }
                        else {
                            cc.error("本地配置数据不包含‘share.shareTitle’字段！");
                            return false;
                        }
                        if (configObj.qq.shares.sy_img) {
                            this.otherconfig.shareImgUrl = configObj.qq.shares.sy_img;
                        }
                        else {
                            cc.error("本地配置数据不包含‘share.shareImgUrl’字段！");
                            return false;
                        }
                    }
                    else {
                        cc.error("本地配置数据不包含‘share’字段！");
                        return false;
                    }
                }
                else {
                    cc.error("本地配置数据不包含‘qq’字段！");
                    return false;
                }
            }
            else {
                cc.error("本地配置数据不是合法的json数据!");
                return false;
            }
            return true;
        }
        _init_xiaomi(data) {
            if (!data)
                return false;
            utils.showLog("本地配置数据:" + data);
            let configObj = JSON.parse(data);
            if (configObj) {
                if (configObj.xiaomi) {
                    if (configObj.xiaomi.app_id) {
                        this.xiaomiConfig.appID = configObj.xiaomi.app_id;
                    }
                    else {
                        utils.showLog("error" + "本地配置数据不包含‘app_id’字段！");
                        return false;
                    }
                    if (configObj.xiaomi.intersititia_pos_id) {
                        this.xiaomiConfig.insertId = configObj.xiaomi.intersititia_pos_id;
                    }
                    else {
                        utils.showLog("error" + "本地配置数据不包含‘intersititia_pos_id’字段！");
                        return false;
                    }
                    if (configObj.xiaomi.video_pos_id) {
                        this.xiaomiConfig.videoId = configObj.xiaomi.video_pos_id;
                    }
                    else {
                        utils.showLog("error" + "本地配置数据不包含‘video_pos_id’字段！");
                        return false;
                    }
                }
                else {
                    utils.showLog("error" + "本地配置数据不包含‘xiaomi’字段！");
                    return false;
                }
            }
            else {
                utils.showLog("error" + "本地配置数据不是合法的json数据!");
                return false;
            }
            return true;
        }
        _init_qtt(data) {
            if (!data)
                return false;
            utils.showLog("本地配置数据:", data);
            let configObj = JSON.parse(data);
            if (configObj) {
                if (configObj.qutoutiao) {
                    if (configObj.qutoutiao.app_id) {
                        this.qttconfig.appID = configObj.qutoutiao.app_id;
                    }
                    else {
                        cc.error("本地配置数据不包含‘app_id’字段！");
                        return false;
                    }
                    if (configObj.qutoutiao.app_key) {
                        this.qttconfig.appKey = configObj.qutoutiao.app_key;
                    }
                    else {
                        cc.error("本地配置数据不包含‘app_key’字段！");
                        return false;
                    }
                    if (configObj.qutoutiao.game_name) {
                        this.qttconfig.gamename = configObj.qutoutiao.game_name;
                    }
                    else {
                        cc.error("本地配置数据不包含‘game_name’字段！");
                        return false;
                    }
                }
            }
            return true;
        }
        _init_native_android() {
            if (!utils.Tool_Native) {
                return false;
            }
            let data = utils.Tool_Native.getNativeData();
            console.log('原生安卓平台本地配置数据' + data);
            utils.showLog("原生安卓平台本地配置数据:" + data);
            let configObj;
            if (!data) {
                console.log("error : 安卓本地配置数据配置错误 ,使用测试配置");
                utils.showLog("error : 安卓本地配置数据配置错误！,使用测试配置");
                configObj = { "app_id": "app_id", "channel": "channel" };
                return false;
            }
            else {
                configObj = JSON.parse(data);
            }
            if (configObj) {
                console.log('原生安卓configObj', configObj);
                if (configObj.app_id) {
                    this.nativeAndroidConfig.appID = configObj.app_id;
                }
                else {
                    utils.showLog("error" + "本地配置数据不包含‘app_id’字段！");
                    return false;
                }
                if (configObj.version) {
                    this.nativeAndroidConfig.version = configObj.version;
                }
                else {
                    utils.showMsg("error" + "本地配置数据不包含‘version’字段！");
                    return false;
                }
                if (configObj.channel) {
                    this.nativeAndroidConfig.channel = configObj.channel;
                    utils.showLog("原生平台渠道号 channel=" + configObj.channel);
                }
                else {
                    utils.showLog("error" + "本地配置数据不包含‘app_id’字段！");
                    return false;
                }
            }
            else {
                utils.showLog("error" + "本地配置数据不是合法的json数据!");
                return false;
            }
            return true;
        }
        _bannerLocationStringToEnum(str) {
            switch (str) {
                case "home": {
                    return BannerLocation.Home;
                }
                case "game": {
                    return BannerLocation.Game;
                }
                case "level": {
                    return BannerLocation.Level;
                }
                case "skin": {
                    return BannerLocation.Skin;
                }
                case "pause": {
                    return BannerLocation.Pause;
                }
                case "over": {
                    return BannerLocation.Over;
                }
                default:
                    return BannerLocation.None;
            }
        }
    }

    const ST_ServerUrl = "https://apps.youletd.com/aconfig?";
    const GB_ServerUrl = "https://apps.youletd.com/gbs?";
    let ST_DefaultServerConfig = "";
    let GB_DefaultServerConfig = "";
    const ST_LoadConfigInterval = 5000;
    class WechatTool {
        constructor() {
            this._serverConfig = null;
            this._gameBoxServerConfig = null;
            this._shareCallback = null;
            this._isShare = false;
            this._lastUpdateTime = 0;
            this._jumpIds = "";
            this._source = "";
            this._appIdList = [];
            this.wx = Laya.Browser.window.wx;
            this._loginTime = 0;
            this._loginInterval = 30;
            this._reportLoginTime = 0;
            this._reportLoginInterval = 30;
            this._uid = "0";
            this._service_uid = "0";
            this._sysInfo = null;
        }
        get ServerConfig() {
            return this._serverConfig;
        }
        get gameBoxServerConfig() {
            return this._gameBoxServerConfig;
        }
        init(data) {
            if (PlatUtils.IsWechat) {
                try {
                    this._sysInfo = wx.getSystemInfoSync();
                    utils.showLog("微信小游戏平台信息: " + JSON.stringify(this.SysInfo));
                }
                catch (e) {
                }
                let options = wx.getLaunchOptionsSync();
                if (options && options.referrerInfo && options.referrerInfo.appId) {
                    utils.showLog("获取到小程序启动来源：" + options.referrerInfo.appId);
                    this._source = options.referrerInfo.appId;
                }
                if (data) {
                    let configObj = JSON.parse(data);
                    if (configObj && configObj.wechat) {
                        ST_DefaultServerConfig = JSON.stringify(configObj.wechat);
                    }
                    if (configObj && configObj.gamebox) {
                        GB_DefaultServerConfig = JSON.stringify(configObj.gamebox);
                    }
                }
                this._loadConfig();
                wx.showShareMenu();
                wx.onShareAppMessage(this._getShareInfo.bind(this));
                wx.onShow((res) => {
                    utils.showLog("OnShow");
                    if (this._isShare) {
                        this._isShare = false;
                        if (this._shareCallback) {
                            this._shareCallback(true, "分享成功!");
                        }
                    }
                    this._checkForUpdate();
                    utils.emitCommonEvent(YZ_Constant.EC_OnShow);
                });
                wx.onHide(() => {
                    utils.showLog("onHide");
                    utils.emitCommonEvent(YZ_Constant.EC_OnHide);
                });
                this._checkForUpdate();
            }
        }
        loadJumpIds() {
            cc.loader.load("src/game.json", Laya.Handler.create(this, (err, res) => {
                if (!err) {
                    res.navigateToMiniProgramAppIdList.forEach(element => {
                        this._jumpIds += element + ",";
                    });
                    this._jumpIds.substring(0, this._jumpIds.lastIndexOf(","));
                }
            }));
        }
        _checkForUpdate() {
            if (PlatUtils.IsWechat) {
                if ((new Date()).getTime() - this._lastUpdateTime < ST_LoadConfigInterval) {
                    utils.showLog("检查更新太频繁!");
                    return;
                }
                this._lastUpdateTime = (new Date()).getTime();
                if (this.isOverMinVersion("1.9.90")) {
                    utils.showLog("检查更新......");
                    const updateManager = Laya.Browser.window.wx.getUpdateManager();
                    updateManager.onCheckForUpdate((res) => {
                        if (res.hasUpdate) {
                            utils.showLog("有新版本需要更新!");
                        }
                        else {
                            utils.showLog("没有新版本！");
                        }
                    });
                    updateManager.onUpdateReady(() => {
                        Laya.Browser.window.wx.showModal({
                            title: '更新提示',
                            content: '新版本已经准备好，是否重启应用？',
                            success(res) {
                                if (res.confirm) {
                                    updateManager.applyUpdate();
                                }
                            }
                        });
                    });
                    updateManager.onUpdateFailed(() => {
                        utils.showLog("新版本下载失败！");
                    });
                }
            }
        }
        _buildServerUrl() {
            let url = "";
            if (utils.config.wechatconfig && utils.config.wechatconfig.appID) {
                let appid = utils.config.wechatconfig.appID;
                let channel = "wechat";
                let jumpId = utils.config.wechatconfig.jumpId;
                url = ST_ServerUrl + `kyx=true&app_id=${appid}&channel=${channel}&jump_id=${jumpId}`;
            }
            else {
                utils.showLog("微信 APPID配置出错！");
            }
            return url;
        }
        _buildGameBoxServerUrl() {
            let url = GB_ServerUrl + `m=ghome&index=0&type=1`;
            return url;
        }
        _loadConfig() {
            if (PlatUtils.IsWechat) {
                utils.showLog("加载服务器配置.......");
                let url = this._buildServerUrl();
                utils.commomHttpRequest(url, (ret, data) => {
                    if (ret) {
                        utils.showLog("微信服务器配置数据获取成功: data = ", data);
                        if (data) {
                            let result = JSON.parse(data);
                            if (result) {
                                if (!utils.DebugLoacalConfig) {
                                    this._serverConfig = result;
                                }
                                else {
                                    cc.warn("开启了本地数据测试，使用本地配置!");
                                }
                            }
                            else {
                                utils.showLog("微信服务器配置数据不是合法的JSON数据, 使用本地配置!");
                            }
                        }
                    }
                    else {
                        utils.showLog("微信服务器配置数据获取失败, 使用本地配置!");
                    }
                    if (!this._serverConfig) {
                        this._serverConfig = JSON.parse(ST_DefaultServerConfig);
                    }
                    else {
                        if (this._serverConfig.shares) {
                            if (this._serverConfig.shares.sy_title) {
                                utils.config.otherconfig.shareTitle = this._serverConfig.shares.sy_title;
                            }
                            if (this._serverConfig.shares.sy_img) {
                                utils.config.otherconfig.shareImgUrl = this._serverConfig.shares.sy_img;
                            }
                        }
                        if (this._serverConfig.is_local_pos_id == "false") {
                            utils.showLog("使用服务器下发的广告ID");
                            utils.config.wechatconfig.insertId = this.ServerConfig.intersititia_pos_id;
                            utils.config.wechatconfig.videoId = this.ServerConfig.video_pos_id;
                            let bannerLocation = ["home", "game", "level", "skin", "pause", "over"];
                            for (let i = 0; i < bannerLocation.length; i++) {
                                if (this.ServerConfig.banner_pos_id[bannerLocation[i]]) {
                                    utils.config.wechatconfig.setBannerId(BannerLocationToEnum(bannerLocation[i]), this.ServerConfig.banner_pos_id[bannerLocation[i]]);
                                }
                            }
                        }
                        else {
                            utils.showLog("使用本地配置的广告ID");
                        }
                    }
                    utils.emitServerInitEvent();
                    if (this._serverConfig && this._serverConfig.openBox) {
                        if (this._serverConfig.openBox != "true") {
                            utils.showLog("服务器游戏盒子配置为关闭状态！");
                            return;
                        }
                        url = this._buildGameBoxServerUrl();
                        utils.commomHttpRequest(url, (ret, data) => {
                            if (ret) {
                                utils.showLog("微信游戏盒子服务器配置数据获取成功: data = ", data);
                                if (data) {
                                    let result = JSON.parse(data);
                                    if (result) {
                                        if (!utils.DebugLoacalConfig) {
                                            this._gameBoxServerConfig = result;
                                        }
                                        else {
                                            cc.warn("开启了本地数据测试，使用本地配置!");
                                        }
                                    }
                                    else {
                                        utils.showLog("微信游戏盒子微信服务器配置数据不是合法的JSON数据, 使用本地配置!");
                                    }
                                }
                            }
                            else {
                                utils.showLog("微信游戏盒子服务器配置数据获取失败, 使用本地配置!");
                            }
                            if (!this._gameBoxServerConfig) {
                                this._gameBoxServerConfig = JSON.parse(GB_DefaultServerConfig);
                            }
                        });
                    }
                });
            }
        }
        navigateToMiniProgram(id, callback, path) {
            if (PlatUtils.IsWechat) {
                let completeCallback = callback;
                Laya.Browser.window.wx.navigateToMiniProgram({
                    appId: id,
                    path: path ? path : "",
                    success(res) {
                        if (completeCallback) {
                            completeCallback(true);
                        }
                    },
                    fail(res) {
                        utils.showLog(`跳转失败! id=${id}; res=${JSON.stringify(res)}`);
                        if (completeCallback) {
                            completeCallback(false);
                        }
                    }
                });
            }
        }
        getSystemInfo() {
            if (PlatUtils.IsWechat) {
                return Laya.Browser.window.wx.getSystemInfoSync();
            }
        }
        previewImage(url) {
            if (PlatUtils.IsWechat) {
                Laya.Browser.window.wx.previewImage({
                    urls: [url]
                });
            }
        }
        vibrate(isLong) {
            if (isLong) {
                Laya.Browser.window.wx.vibrateLong();
            }
            else {
                Laya.Browser.window.wx.vibrateShort();
            }
        }
        share(callback = null) {
            if (PlatUtils.IsWechat) {
                this._shareCallback = callback;
                this._isShare = true;
                Laya.Browser.window.wx.shareAppMessage(this._getShareInfo());
            }
        }
        postData(otherGameAppId) {
            if (PlatUtils.IsWechat) {
                let appid = utils.config.wechatconfig.appID;
                let uid = "0";
                let channel = "wechat";
                let url = `https://apps.youletd.com/gs?m=jump&app_id=${appid}&uid=${uid}&channel=${channel}&jump_app_id=${otherGameAppId}`;
                utils.showLog("上报数据, url=", url);
                utils.commomHttpRequest(url, function (ret, data) {
                    if (ret) {
                        utils.showLog("数据上报成功！");
                    }
                    else {
                        utils.showLog("数据上报失败！");
                    }
                });
            }
        }
        postDataByLocation(otherGameAppId, location, status = 0) {
            if (PlatUtils.IsWechat) {
                let appid = utils.config.wechatconfig.appID;
                let uid = "0";
                let channel = "wechat";
                let url = `https://apps.youletd.com/gs?m=jump&app_id=${appid}&uid=${uid}&channel=${channel}&jump_app_id=${otherGameAppId}&location=${location}&status=${status}`;
                utils.showLog("上报数据, url=", url);
                utils.commomHttpRequest(url, function (ret, data) {
                    if (ret) {
                        utils.showLog("数据上报成功！");
                    }
                    else {
                        utils.showLog("数据上报失败！");
                    }
                });
            }
        }
        postRecommentShowData(location) {
            if (PlatUtils.IsWechat) {
                let appid = utils.config.wechatconfig.appID;
                let uid = "0";
                let channel = "wechat";
                let url = `https://apps.youletd.com/gs?m=jumplocation&app_id=${appid}&uid=${uid}&channel=${channel}&location=${location}`;
                utils.showLog("上报数据, url=", url);
                utils.commomHttpRequest(url, function (ret, data) {
                    if (ret) {
                        utils.showLog("数据上报成功！");
                    }
                    else {
                        utils.showLog("数据上报失败！");
                    }
                }.bind(this));
            }
        }
        _getShareInfo() {
            if (PlatUtils.IsWechat) {
                return {
                    title: utils.config.otherconfig.shareTitle,
                    imageUrl: utils.config.otherconfig.shareImgUrl
                };
            }
            return {};
        }
        isOverMinVersion(minVersion) {
            let curVersion = Laya.Browser.window.wx.getSystemInfoSync().SDKVersion;
            return this._compareVersion(curVersion, minVersion) >= 0;
        }
        _compareVersion(v1, v2) {
            v1 = v1.split('.');
            v2 = v2.split('.');
            const len = Math.max(v1.length, v2.length);
            while (v1.length < len) {
                v1.push('0');
            }
            while (v2.length < len) {
                v2.push('0');
            }
            for (let i = 0; i < len; i++) {
                const num1 = parseInt(v1[i]);
                const num2 = parseInt(v2[i]);
                if (num1 > num2) {
                    return 1;
                }
                else if (num1 < num2) {
                    return -1;
                }
            }
            return 0;
        }
        getRecommondGameList() {
            if (PlatUtils.IsWechat && utils.wechatTool && utils.wechatTool.ServerConfig) {
                return utils.wechatTool.ServerConfig.jump_list;
            }
            return null;
        }
        checkAppId(appId) {
            if (utils.config.wechatconfig.jumpId.indexOf(appId) > -1) {
                return true;
            }
            utils.showLog("appId :", appId, "不再配置列表中!");
            return false;
        }
        _login() {
            let curTime = new Date().getTime();
            let interval = (curTime - this._loginTime) / 1000;
            if (interval > 0 && interval < this._loginInterval) {
                utils.showLog(`登录请求间隔小于：${this._loginInterval}秒`);
                return;
            }
            this._loginTime = curTime;
            let self = this;
            this._uid = cc.getItem(YZ_Constant.ST_UID);
            this._uid = this._uid ? this._uid : "0";
            this._service_uid = cc.getItem(YZ_Constant.ST_SERVICE_UID);
            this._service_uid = this._service_uid ? this._service_uid : "0";
            utils.showLog("获取本地保存的uid=" + this._uid + "，服务器UID=" + this._service_uid);
            if (this._uid == "0") {
                wx.login({
                    success(res) {
                        if (res.code) {
                            this.reportLogin();
                        }
                        else {
                            utils.showLog('登录失败！' + res.errMsg);
                        }
                    },
                    fail() {
                    },
                    complete() {
                        self.reportLogin();
                    }
                });
            }
        }
        reportLogin(code = "") {
            let self = this;
            let curTime = new Date().getTime();
            let interval = (curTime - this._reportLoginTime) / 1000;
            if (interval > 0 && interval < this._reportLoginInterval) {
                utils.showLog(`上报登录获取UID小于：${this._reportLoginInterval}秒`);
                return;
            }
            this._reportLoginTime = curTime;
            let method = "m=login";
            let url = ST_ServerUrl + method + `&device_data=${encodeURI(JSON.stringify(this._sysInfo))}&code=${code}`;
            utils.commomHttpRequest(url, (ret, data) => {
                if (ret) {
                    if (data) {
                        utils.showLog("#data=" + data);
                        let result = JSON.parse(data);
                        if (result.uid) {
                            self._service_uid = "" + result.uid;
                            cc.setItem(YZ_Constant.ST_SERVICE_UID, self._service_uid);
                        }
                        if (result.device_uid) {
                            self._uid = "" + result.device_uid;
                            cc.setItem(YZ_Constant.ST_UID, self._uid);
                        }
                        utils.showLog("服务器请求登录成功! _service_uid=" + self._service_uid + " #device_id=" + self._uid);
                    }
                }
            });
        }
        postLevel(level, status, levelName) {
            if (PlatUtils.IsWechat) {
                let method = "m=rlevel";
                let url = ST_ServerUrl + method + `&level_id=${level}&level_name=${encodeURI(levelName)}&status=${status}`;
                utils.commomHttpRequest(url, function (ret, data) {
                    if (ret) {
                        utils.showLog("关卡数据上报成功！");
                    }
                    else {
                        utils.showLog("关卡数据上报失败！");
                    }
                }.bind(this));
            }
        }
        get uid() {
            if (this._uid != "0")
                return this._uid;
            this._login();
            return "0";
        }
        get serviceId() {
            if (this._service_uid != "0")
                return this._service_uid;
            this._login();
            return "0";
        }
        get SysInfo() {
            return this._sysInfo;
        }
        showToast(msg) {
            if (PlatUtils.IsWechat) {
                wx.showToast({
                    title: msg,
                    icon: "none",
                    duration: 2000,
                    success(res) {
                        console.log(`${res}`);
                    },
                    fail(res) {
                        console.log(`showToast调用失败`);
                    }
                });
            }
        }
    }

    class AdAgent {
        Init() { }
        ShowBanner(location, args) { }
        HideBanner(location) { }
        ShowInterstitial(location) { }
        ShowVideo(callback) { }
        showInteractiveAd() { }
        ShowAppBox(isMoreGame) { }
        HideAppBox() { }
        showRewardInsert() { }
        hideRewardInsert() { }
        ShowCloseBtnBanner(location, args) { }
        ShowStatementRecomment() { }
        showNativeTryGameWidget() { }
        getNativeAdData(args) { }
        showStatementAds(data) { }
        createNativeAd(yzItem) { }
        hideKyxBanner() { }
        showBlockAd(parme) { }
        hideBlockAd() { }
        showFullScreenVideo(callback) { }
    }

    class YZ_NativeItem extends Laya.Script {
        constructor() {
            super(...arguments);
            this._nativeAdTiltle = null;
            this._nativeAdIcon = null;
            this._nativeAdDesc = null;
            this._nativeAdImg = null;
            this._closeBtn = null;
            this._noImageView = null;
            this.isShow = false;
            this.showType = 1;
            this.content = null;
            this._nativeAd = null;
        }
        init(nativeObj) {
            utils.showLog("初始化单个原生广告>>>");
            this._nativeAd = nativeObj;
        }
        onAwake() {
            this._noImageView = this.owner.getChildByName("noImageView");
            this._nativeAdTiltle = this._noImageView.getChildByName("title");
            this._nativeAdIcon = this._noImageView.getChildByName("icon");
            this._nativeAdDesc = this._noImageView.getChildByName("desc");
            this._nativeAdImg = this.owner.getChildByName("adImage");
            this._closeBtn = this.owner.getChildByName("btnClose");
            Laya.stage.on(YZ_Constant.YZ_NativeAdClick, this, () => {
                this.reportAdClick();
            });
            this.owner.on(Laya.Event.CLICK, this, this.onBtnClickHandler);
            this._closeBtn.on(Laya.Event.CLICK, this, this.onBtnClickHandler);
            this.owner.visible = false;
        }
        hideSelf() {
            Laya.stage.off(YZ_Constant.YZ_NativeAdClick, this, null);
            this.owner.destroy();
        }
        onDisable() {
            this.hideSelf();
        }
        onUpdate() {
            if (this._nativeAd && !this.isShow) {
                this.owner.visible = true;
                this.isShow = true;
                this.showNativeAd();
            }
        }
        reportAdShow() {
            if (this._nativeAd) {
                this._nativeAd.reportAdShow();
            }
        }
        reportAdClick() {
            if (this._nativeAd) {
                this._nativeAd.reportAdClick();
            }
            else {
                utils.showMsg("广告加载失败！");
            }
        }
        onBtnClickHandler(event, data) {
            switch (event.target.name) {
                case "btnClose": {
                    this.hideSelf();
                    break;
                }
                case "Btn_Download": {
                    this.reportAdClick();
                    break;
                }
                default:
                    this.reportAdClick();
                    break;
            }
        }
        showNativeAd() {
            if (utils.ServerConfig.st_native_ad_is_hide_banner && utils.ServerConfig.st_native_ad_is_hide_banner == "true") {
                utils.showLog("服务器配置显示结算原生广告后隐藏banner >>>");
                utils.adManager.HideBanner(BannerLocation.Game);
            }
            if (utils.ServerConfig.st_native_ad_show_rec_banner && utils.ServerConfig.st_native_ad_show_rec_banner == "true") {
                utils.oppoTool.showOppoRecBanner();
            }
            let nativeData = this._nativeAd.data;
            let title = nativeData.title;
            let desc = nativeData.desc;
            if (title.length > 6) {
                title = title.slice(0, 6);
                title += "...";
            }
            if (desc.length > 18) {
                desc = desc.slice(0, 17);
                desc += "...";
            }
            this._nativeAdTiltle.text = title;
            this._nativeAdDesc.text = desc;
            if (utils.ServerConfig.st_native_ad_height) {
                let view = this.owner;
                let scale = utils.ServerConfig.st_native_ad_height / view.height;
                view.height = utils.ServerConfig.st_native_ad_height;
                this._nativeAdImg.height = utils.ServerConfig.st_native_ad_height;
                this._nativeAdIcon.scale(scale, scale);
                if (utils.ServerConfig.st_native_ad_height < 311) {
                    this._nativeAdTiltle.scale(scale, scale);
                    this._nativeAdDesc.scale(scale, scale);
                    this._noImageView.getChildByName("title").y *= scale;
                    this._noImageView.getChildByName("desc").y *= scale;
                }
                this.owner.getChildByName("ad_mask").y = view.height - 34;
            }
            if (nativeData.imgUrlList && nativeData.imgUrlList.length > 0) {
                this._nativeAdImg.skin = nativeData.imgUrlList[0];
                this._noImageView.visible = false;
                this._nativeAdImg.visible = true;
            }
            else if (PlatUtils.IsOPPO && nativeData.iconUrlList && nativeData.iconUrlList.length > 0) {
                this._nativeAdImg.visible = false;
                this._noImageView.visible = true;
                this._nativeAdIcon.skin = nativeData.iconUrlList[0];
            }
            else if (nativeData.icon) {
                this._nativeAdImg.visible = false;
                this._noImageView.visible = true;
                this._nativeAdIcon.skin = nativeData.icon;
            }
            this.reportAdShow();
        }
    }

    class YZ_NativeAdObject {
        constructor() {
            this._nativeObj = null;
            this._nativeAdData = null;
            this.is_reportClick = false;
            this.is_reportShow = false;
        }
        get data() {
            return this._nativeAdData;
        }
        set data(_data) {
            this._nativeAdData = _data;
        }
        reportAdShow() {
            if (this._nativeAdData && !this.is_reportShow) {
                this.is_reportShow = true;
                utils.showLog("上报原生广告展示! adId:", this._nativeAdData.adId);
                if (this._nativeObj) {
                    this._nativeObj.reportAdShow({
                        adId: this._nativeAdData.adId
                    });
                }
            }
        }
        reportAdClick(type = 2) {
            this.is_reportClick = true;
            if (this._nativeAdData) {
                utils.showLog("上报原生广告点击! adId:", this._nativeAdData.adId);
                if (this._nativeObj) {
                    this._nativeObj.reportAdClick({
                        adId: this._nativeAdData.adId
                    });
                    if (type == 2) {
                        if (PlatUtils.IsOPPO) {
                            utils.oppoTool.countNativeInserClick();
                        }
                        else if (PlatUtils.IsVIVO) {
                            utils.Tool_Vivo.countNativeInserClick();
                        }
                    }
                }
            }
        }
    }

    class QCrossWidgetItem extends Laya.Script {
        constructor() {
            super(...arguments);
            this.data = null;
            this._sprite = null;
            this._dataDirty = false;
            this._isReward = false;
            this.isLoop = false;
            this._location = "isQCross";
        }
        init(data) {
            this.data = data;
            this._dataDirty = true;
            if (!this.owner)
                return;
            this._sprite = this.owner.getChildByName("back");
            this.owner && this.owner.on(Laya.Event.CLICK, this, this._onItemClickHandler);
            if (!this.isLoop) {
                Laya.timer.frameLoop(1, this, this.update);
                this.isLoop = true;
            }
        }
        update() {
            if (this._dataDirty) {
                this._dataDirty = false;
                this.updateItem();
            }
        }
        _onItemClickHandler() {
            if (this.data && this.data.appid) {
                this._postClickData(this.data.appid);
            }
            if (!this.data)
                return;
            if (PlatUtils.IsDouyin) {
                utils.Tool_Douyin.showMoreGamesModal();
                return;
            }
            if (this._location == "isReward") {
                utils.navigateToMiniGame(this.data, (ret) => {
                    if (ret) {
                        if (this.data && this.data.appid) {
                            this._postData(this.data.appid);
                        }
                        utils.showLog("激励插屏跳转成功！下发奖励！");
                        utils.adManager.videoCallBack && utils.adManager.videoCallBack(ret);
                        utils.adManager.videoCallBack = null;
                    }
                    else {
                        utils.showLog("激励插屏跳转失败！");
                        utils.adManager.videoCallBack && utils.adManager.videoCallBack(false, "获取试玩奖励失败！");
                    }
                    utils.adManager.videoCallBack = null;
                    utils.adManager.hideRewardInsert();
                });
                return;
            }
            if (this.data.is_jump && this.data.is_jump == "true" && this.data.appid) {
                utils.showLog("直接跳转!", this.data.appid);
                utils.navigateToMiniGame(this.data, (ret) => {
                    if (ret) {
                        if (this.data && this.data.appid) {
                            this._postData(this.data.appid);
                        }
                    }
                });
            }
            else if (this.data.is_jump && this.data.is_jump == "false" && this.data.qr_code) {
                if (PlatUtils.IsWechat) {
                    utils.showLog("二维码跳转!", this.data.qr_code);
                    utils.wechatTool.previewImage(this.data.qr_code);
                }
                else {
                    utils.showLog("不支持二维码跳转!");
                }
            }
            else {
                utils.showLog("没有is_jump直接跳转!", this.data.appid);
                if (this.data.appid) {
                    utils.navigateToMiniGame(this.data, (ret) => {
                        if (ret) {
                            if (this.data.appid) {
                                this._postData(this.data.appid);
                            }
                        }
                    });
                }
            }
        }
        updateItem() {
            if (this.data && this.data.logo) {
                this._sprite.skin = this.data.logo;
                console.log(this._sprite.skin);
            }
        }
        _postData(appid) {
            utils.postDataByLocation(appid, this._location, 1);
        }
        _postClickData(appid) {
            utils.postDataByLocation(appid, this._location, 0);
        }
    }

    class RewardInsert extends Laya.Component {
        constructor() {
            super(...arguments);
            this._jumpList = null;
            this._items = [];
            this.isShow = false;
            this._panel = null;
            this._mask = null;
        }
        onLoad() {
            if (!this.owner)
                return;
            this._mask = this.owner.getChildByName("Mask");
            this._panel = this.owner.getChildByName("Panel");
            for (let i = 0; i < 6; i++) {
                let item = this._panel.getChildByName(`Item${i}`);
                let qcrossWidgetItem = item.getComponent(QCrossWidgetItem);
                qcrossWidgetItem._location = "isReward";
                this._items.push(qcrossWidgetItem);
            }
            let ratio = 1;
            if (cc.winSize.height < cc.winSize.width) {
                ratio = cc.winSize.width / 1920 * 0.7;
            }
            else {
                ratio = cc.winSize.width / 1080;
            }
            this._panel.scale(ratio, ratio);
        }
        start() {
            this._jumpList = utils.getRecommondGameList();
            if (this._jumpList && this._jumpList.length > 0) {
                this._initWidget();
            }
            else {
                cc.warn("交叉推广数据为null,激励插屏组件不显示!");
                utils.adManager.videoCallBack && utils.adManager.videoCallBack(false, "激励组件加载失败！");
                utils.adManager.videoCallBack = null;
                this.owner.destroy();
            }
        }
        _initWidget() {
            let idx = 0;
            for (let i = 0; i < this._jumpList.length; i++) {
                let data = this._jumpList[i];
                if (data && data.logo) {
                    let itemIdx = idx;
                    if (itemIdx >= this._items.length) {
                        return;
                    }
                    idx++;
                    this._items[itemIdx].init(data);
                }
            }
        }
        hide() {
            this._panel.active = false;
            this._mask.active = false;
        }
        onCloseBtnHandler(event, data) {
            this.hide();
            utils.adManager.videoCallBack && utils.adManager.videoCallBack(false, "未点击试玩奖励！");
            utils.adManager.videoCallBack = null;
        }
        update(dt) {
            if (!this.isShow) {
                utils.showLog("show insertReward>>>>>");
                this.isShow = true;
                this._panel.active = true;
                this._mask.active = true;
            }
        }
    }

    class YZ_NativeBanner extends Laya.Script {
        constructor() {
            super(...arguments);
            this._panel = null;
            this._icon = null;
            this._titleLabel = null;
            this._desLabel = null;
            this.btnDown = null;
            this._widget = null;
            this._closeBtn = null;
            this._closeTrueBtn = null;
            this.background = null;
            this._nativeAd = null;
            this._data = null;
            this._dataDirty = false;
            this._panel_widget = null;
            this._closeBtn_widget = null;
            this._mask_widget = null;
            this._st_Panel = null;
            this._st_background = null;
            this._st_Icon = null;
            this._st_TitleLabel = null;
            this._st_DesLabel = null;
            this._st_Widget = null;
            this._st_Img = null;
            this._st_CloseBtn = null;
            this._st_CloseTrueBtn = null;
            this._st_BtnDown = null;
            this._st_down_btn_default_img = "";
            this.nativeBannerInfo = null;
        }
        get ServerConfig() {
            return utils.getServelCofig();
        }
        onAwake() {
            this._widget = this.owner.getComponent(Laya.Widget);
            this._panel = this.owner.getChildByName("Panel");
            this._icon = this._panel.getChildByName("Icon");
            let textbox = this._panel.getChildByName("text_box");
            this._titleLabel = textbox.getChildByName("TitleLabel");
            this._desLabel = textbox.getChildByName("DesLabel");
            this.btnDown = this._panel.getChildByName("Btn_Download");
            this._widget = this.owner.getComponent(Laya.Widget);
            this._panel_widget = this._panel.getComponent(Laya.Widget);
            this._mask_widget = this._panel.getChildByName("admask").getComponent(Laya.Widget);
            this.background = this._panel.getChildByName("background");
            this._closeBtn = this._panel.getChildByName("Btn_Close");
            this._closeBtn.visible = this.ServerConfig.banner_close_but_show ? (this.ServerConfig.banner_close_but_show == "true") : true;
            this._closeBtn.alpha = this.ServerConfig.banner_close_but_alpha / 256;
            if (this.ServerConfig.banner_close_but_size) {
                this._closeBtn.width = this._closeBtn.height = this.ServerConfig.banner_close_but_size;
            }
            this._closeTrueBtn = this._panel.getChildByName("Btn_Close_true");
            if (this.ServerConfig.banner_close_but_range) {
                this._closeTrueBtn.width = this._closeTrueBtn.height = this.ServerConfig.banner_close_but_range;
            }
            this._widget.bottom = 0;
            this._st_Panel = this.owner.getChildByName("Panel_Statement");
            this._st_Widget = this._st_Panel.getComponent(Laya.Widget);
            this._st_background = this._st_Panel.getChildByName("background");
            this._st_Icon = this._st_Panel.getChildByName("Icon");
            this._st_TitleLabel = this._st_Panel.getChildByName("TitleLabel");
            this._st_DesLabel = this._st_Panel.getChildByName("DesLabel");
            this._st_BtnDown = this._st_Panel.getChildByName("Btn_Download");
            this._st_CloseTrueBtn = this._st_Panel.getChildByName("Btn_Close_true");
            this._st_Img = this._st_Panel.getChildByName("adImage");
            this._st_CloseBtn = this._st_Panel.getChildByName("Btn_Close");
            this._st_down_btn_default_img = "";
            let ratio = 1;
            if (cc.winSize) {
                if (cc.winSize.height < cc.winSize.width) {
                    ratio = cc.winSize.width / 1920 * 0.7;
                    this._widget.left = (cc.winSize.width - this._panel.width) / 2;
                }
                else {
                    ratio = cc.winSize.width / 1080;
                }
            }
            this.owner.scale(ratio, ratio);
            Laya.stage.height++;
            this.owner.on(Laya.Event.CLICK, this, this.onBtnClickHandler);
            this.btnDown.on(Laya.Event.CLICK, this, this.onBtnClickHandler);
            Laya.stage.on(YZ_Constant.YZ_NativeAdClick, this, () => {
                this._reportAdClick();
            });
        }
        onEnable() {
            if (PlatUtils.IsOPPO || PlatUtils.IsVIVO) {
                this.background.on(Laya.Event.MOUSE_DOWN, this, () => {
                    this._reportAdClick();
                });
                this._st_background.on(Laya.Event.MOUSE_DOWN, this, () => {
                    this._reportAdClick();
                });
            }
        }
        onDisable() {
            if (PlatUtils.IsOPPO || PlatUtils.IsVIVO) {
            }
        }
        init(nativeAd, data, nativeBannerInfo) {
            utils.showLog("接收到了原生得数据：" + data);
            if (PlatUtils.IsOPPO || PlatUtils.IsVIVO || utils.Tool_Broswer) {
                this._nativeAd = nativeAd;
                this._data = data;
                this._dataDirty = true;
                this.nativeBannerInfo = nativeBannerInfo;
                this._panel.visible = false;
                this._st_Panel.visible = false;
            }
        }
        onUpdate() {
            if (this._data && this._dataDirty) {
                this._dataDirty = false;
                this._updateContent();
            }
            if (!this._data) {
                this._panel.visible = false;
                this._st_Panel.visible = false;
            }
        }
        _updateContent() {
            utils.showLog("数据解析完毕");
            if (this._data) {
                this._reportAdShow();
                this._titleLabel.text = this._data.title;
                this._desLabel.text = this._data.desc;
                this.btnDown.label = this._data.clickBtnTxt ? this._data.clickBtnTxt : "查看详情";
                let iconUrl = PlatUtils.IsOPPO ? this._data.iconUrlList[0] : this._data.icon;
                this._icon.skin = iconUrl;
                if (this.nativeBannerInfo.show_st_banner == "true" && this.nativeBannerInfo.st_banner_style > -1) {
                    if (this.nativeBannerInfo.st_banner_style == 1 || this.nativeBannerInfo.st_banner_style == 2) {
                        if (this.nativeBannerInfo.st_banner_width > -1) {
                            this._st_Panel.width = this.nativeBannerInfo.st_banner_width;
                        }
                        else {
                            this._st_Panel.width = 821.4;
                        }
                        if (this.nativeBannerInfo.st_banner_height > -1) {
                            this._st_Panel.height = this.nativeBannerInfo.st_banner_height;
                        }
                        else {
                            this._st_Panel.height = 589;
                        }
                    }
                    else {
                        this._st_Panel.width = 821.4;
                        this._st_Panel.height = 589;
                    }
                    if (this.nativeBannerInfo.st_banner_style == 0 || this.nativeBannerInfo.st_banner_style == 1) {
                        utils.showLog("//单图片样式，拉伸图片，并且隐藏标题和描述");
                        this._st_Img.top = 0;
                        this._st_Img.bottom = 0;
                        this._st_DesLabel.visible = false;
                        this._st_TitleLabel.visible = false;
                    }
                    else if (this.nativeBannerInfo.st_banner_style == 2) {
                        utils.showLog("默认样式自定义宽高:展示标题和描述");
                        this._st_DesLabel.visible = true;
                        this._st_TitleLabel.visible = true;
                        this._st_Img.top = this._st_TitleLabel.height + this._st_TitleLabel.top;
                        this._st_Img.bottom = this._st_DesLabel.height + this._st_DesLabel.bottom;
                        console.log("this._st_Img.top:" + this._st_Img.top, "this._st_TitleLabel.height:" + this._st_TitleLabel.height, "this._st_TitleLabel.top:" + this._st_TitleLabel.top);
                    }
                    else {
                        this._st_DesLabel.visible = true;
                        this._st_TitleLabel.visible = true;
                    }
                }
                else if (this.nativeBannerInfo.show_st_banner == "true") {
                    utils.showLog("结算banner使用默认样式！");
                    this._st_Panel.width = 821.4;
                    this._st_Panel.height = 589;
                    this._st_DesLabel.visible = true;
                    this._st_TitleLabel.visible = true;
                }
                this._st_CloseBtn.visible = this.nativeBannerInfo.st_banner_close_but_show == "true";
                this._st_CloseBtn.alpha = this.nativeBannerInfo.st_banner_close_but_alpha;
                if (this.nativeBannerInfo.st_banner_close_but_size) {
                    utils.showLog("st_banner_close_but_size........." + this.nativeBannerInfo.st_banner_close_but_size);
                    this._st_CloseBtn.size(this.nativeBannerInfo.st_banner_close_but_size * 1.5, this.nativeBannerInfo.st_banner_close_but_size * 1.5);
                }
                if (this.nativeBannerInfo.st_banner_close_but_range) {
                    utils.showLog("st_banner_close_but_range........." + this.nativeBannerInfo.st_banner_close_but_range);
                    if (this.nativeBannerInfo.st_banner_close_but_range <= 5) {
                        this._st_CloseTrueBtn.visible = false;
                    }
                    else {
                        this._st_CloseTrueBtn.visible = true;
                        this._st_CloseTrueBtn.size(this.nativeBannerInfo.st_banner_close_but_range, this.nativeBannerInfo.st_banner_close_but_range);
                    }
                }
                else {
                    this._st_CloseTrueBtn.visible = false;
                }
                if (this.nativeBannerInfo.st_banner_down_but_show) {
                    this._st_BtnDown.visible = true;
                    if (this.nativeBannerInfo.st_banner_down_btn_image) {
                        utils.showLog("this.nativeBannerInfo.st_banner_down_btn_image", this.nativeBannerInfo.st_banner_down_btn_image);
                        this._st_BtnDown.skin = this.nativeBannerInfo.st_banner_down_btn_image;
                        if (this.nativeBannerInfo.st_banner_down_but_margin_top) {
                            this._st_BtnDown.top = -(this._st_BtnDown.height + this.nativeBannerInfo.st_banner_down_but_margin_top);
                        }
                        else {
                            this._st_BtnDown.top = -this._st_BtnDown.height;
                        }
                    }
                    else {
                        this._st_BtnDown.skin = this._st_down_btn_default_img;
                        if (this.nativeBannerInfo.st_banner_down_but_margin_top) {
                            this._st_BtnDown.top -= this.nativeBannerInfo.st_banner_down_but_margin_top;
                        }
                    }
                    if (this.nativeBannerInfo.st_banner_down_but_show == 2) {
                    }
                    else {
                    }
                    this._st_BtnDown.scale = this.owner.scale;
                }
                else {
                    this._st_BtnDown.visible = false;
                }
                this._closeBtn.visible = this.nativeBannerInfo.banner_close_but_show == "true";
                utils.showLog("banner_close_but_size........." + this.nativeBannerInfo.banner_close_but_size);
                this._closeBtn.alpha = this.nativeBannerInfo.banner_close_but_alpha;
                this._closeBtn.size(this.nativeBannerInfo.banner_close_but_size * 1.5, this.nativeBannerInfo.banner_close_but_size * 1.5);
                if (this.nativeBannerInfo.banner_close_but_range) {
                    utils.showLog("banner_close_but_range........." + this.nativeBannerInfo.banner_close_but_range);
                    if (this.nativeBannerInfo.banner_close_but_range <= 5) {
                        this._closeTrueBtn.visible = false;
                    }
                    else {
                        this._closeTrueBtn.visible = true;
                        this._closeTrueBtn.width = this._closeTrueBtn.height = this.ServerConfig.banner_close_but_range;
                    }
                }
                else {
                    this._closeTrueBtn.visible = false;
                }
                if (this.nativeBannerInfo.show_st_banner == "false") {
                    let height = this.nativeBannerInfo.banner_show_height < 140 ? 140 : this.nativeBannerInfo.banner_show_height;
                    height = this.nativeBannerInfo.banner_show_height > 400 ? 400 : this.nativeBannerInfo.banner_show_height;
                    this._panel.height = height;
                    this._panel.bottom = 0;
                    let h = this.owner.height;
                    this.owner.height = height;
                    this.owner.bottom = height - h;
                    this._widget.bottom = 0;
                    this._widget.left = (cc.winSize.width - this._panel.width) / 2;
                }
                else {
                    this._st_Panel.scaleX = this._st_Panel.scaleY = this.nativeBannerInfo.st_banner_scale ? this.nativeBannerInfo.st_banner_scale : 1;
                    this._st_Widget.bottom = this.nativeBannerInfo.st_banner_bottom ? this.nativeBannerInfo.st_banner_bottom : 0;
                    this._widget.left = (cc.winSize.width - this._st_Panel.width) / 2;
                }
                if (this.nativeBannerInfo.show_st_banner == "true") {
                    utils.showLog("服务器配置显示为结算banner >>>>>");
                    this._st_TitleLabel.text = this._data.title ? this._data.title : "";
                    this._st_DesLabel.text = this._data.desc ? this._data.desc : "";
                    if (this._data.imgUrlList && this._data.imgUrlList.length > 0) {
                        this._st_Icon.visible = false;
                        this._st_Img.visible = true;
                        this._st_Img.skin = this._data.imgUrlList[0];
                    }
                    else if (PlatUtils.IsOPPO && this._data.iconUrlList && this._data.iconUrlList.length > 0) {
                        this._st_Icon.visible = true;
                        this._st_Img.visible = false;
                        this._st_Icon.skin = this._data.iconUrlList[0];
                    }
                    else if (PlatUtils.IsVIVO && this._data.icon) {
                        this._st_Icon.visible = true;
                        this._st_Img.visible = false;
                        this._st_Icon.skin = this._data.icon;
                    }
                }
                else {
                    this._titleLabel.text = this._data.title;
                    this._desLabel.text = this._data.desc;
                    let iconUrl = PlatUtils.IsOPPO ? this._data.iconUrlList[0] : this._data.icon;
                    this._icon.skin = iconUrl;
                }
                if (this.nativeBannerInfo.show_st_banner == "true") {
                    if (this.nativeBannerInfo.st_banner_style > -1) {
                        if (this._data.imgUrlList && this._data.imgUrlList.length > 0) {
                            this._panel.visible = false;
                            this._st_Panel.visible = true;
                        }
                        else {
                            this._panel.visible = false;
                            this._st_Panel.visible = false;
                        }
                    }
                    else {
                        this._panel.visible = false;
                        this._st_Panel.visible = true;
                    }
                }
                else {
                    this._panel.visible = true;
                    this._st_Panel.visible = false;
                }
            }
        }
        onBtnClickHandler(event, data) {
            console.log("event.target.name...", event.target.name);
            switch (event.target.name) {
                case "Btn_Close": {
                    this.owner.visible = false;
                    if (PlatUtils.IsOPPO) {
                        utils.oppoTool.countBannerCloseCount();
                    }
                    break;
                }
                case "Btn_Close_true": {
                    this.owner.visible = false;
                    if (PlatUtils.IsOPPO) {
                        utils.oppoTool.countBannerCloseCount();
                    }
                    break;
                }
                case "Btn_Download": {
                    this._reportAdClick();
                    break;
                }
            }
        }
        _reportAdShow() {
            if (this._data) {
                if (this._nativeAd) {
                    if (!this._data.isReportShow) {
                        this._data.isReportShow = true;
                        utils.showLog("上报原生广告条展示！adId:" + this._data.adId);
                        this._nativeAd.reportAdShow({
                            adId: this._data.adId
                        });
                    }
                    else {
                        utils.showLog("当前广告已经过上报展示！adId:" + this._data.adId + "，当前不做上报");
                    }
                }
            }
        }
        _reportAdClick() {
            if (this._data) {
                utils.showLog("上报原生广告条点击! adId:", this._data.adId);
                if (this._nativeAd) {
                    if (!this._data.isReportClick) {
                        this._data.isReportClick = true;
                        this._nativeAd.reportAdClick({
                            adId: this._data.adId
                        });
                    }
                    this._data = null;
                    if (this.ServerConfig.banner_click_refresh == "true") {
                        utils.showLog("点击之后-先隐藏广告-再刷新广告条！");
                        utils.adManager.HideBanner(this.nativeBannerInfo.location);
                        utils.adManager.ShowBanner(this.nativeBannerInfo.location, { isRefresh: true });
                    }
                }
            }
        }
    }

    class NativeTryGameNode extends Laya.Script {
        constructor() {
            super(...arguments);
            this._data = null;
            this._icon = null;
            this._nameLabel = null;
            this._gameJumpInterval = 1;
            this._jumpInfo = null;
            this._index = -1;
            this._jumping = false;
            this.isScale = false;
            this._isFirst = false;
            this.isReve = false;
            this.shakeTimes = 0;
        }
        init(data) {
            this._data = data;
            this._bg = this.owner.getChildByName("bg");
            this._icon = this.owner.getChildByName("bg").getChildByName("icon");
            this._redPoint = this.owner.getChildByName("redpoint");
            if (this._data) {
                this._jumpInfo = this._data.jump_list;
                this._isFirst = true;
                this._gameJumpInterval = this._data.jump_refresh_time;
                this.owner.visible = true;
            }
            else {
                this.owner.visible = false;
            }
        }
        onAwake() {
            if (!this.owner)
                return;
            this._bg = this.owner.getChildByName("bg");
            this._icon = this.owner.getChildByName("bg").getChildByName("icon");
            this._redPoint = this.owner.getChildByName("redpoint");
        }
        onEnable() {
            if (!this.owner)
                return;
            this.jump();
            this._bg.pivot(94, 94);
            this._bg.x += 94;
            this._bg.y += 94;
            Laya.timer.loop(this._gameJumpInterval * 1000, this, this.jump);
            this.owner.getChildByName("btn").on(Laya.Event.CLICK, this, () => {
                if (utils.tryGameDate != null && utils.tryGameDate != undefined) {
                    if (utils.tryGameDate[this._index].tryGameAd != null && utils.tryGameDate[this._index].tryGameAd != undefined) {
                        let tryGameAd = utils.tryGameDate[this._index].tryGameAd;
                        let adid = utils.tryGameDate[this._index].date[0].adId;
                        if (tryGameAd && adid) {
                            tryGameAd.reportAdClick({
                                adId: adid
                            });
                        }
                        utils.nativeNeedChange = true;
                        if (utils._nativeTryGamesNode) {
                            utils._nativeTryGamesNode.getComponent(NativeTryGamesWidget).initWidget();
                        }
                    }
                }
            });
            if (this._redPoint) {
                this._redPoint.pivot(13, 13);
            }
            this.isScale = true;
            this._redPoint.visible = true;
        }
        onUpdate() {
            if (!this.owner || !this.owner.parent)
                return;
            if (this.isScale && this._redPoint) {
                if (this._redPoint.scaleX >= 1) {
                    this.isReve = true;
                }
                if (this._redPoint.scaleX <= 0.5) {
                    this.isReve = false;
                }
                if (!this.isReve) {
                    this._redPoint.scaleX += 0.01;
                    this._redPoint.scaleY += 0.01;
                }
                else {
                    this._redPoint.scaleX -= 0.01;
                    this._redPoint.scaleY -= 0.01;
                }
            }
        }
        shake() {
            let own = this.owner.getChildByName("bg");
            if (this.shakeTimes > 10) {
                this.shakeTimes = 0;
                own.rotation = 0;
                return;
            }
            this.shakeTimes++;
            let target = 0;
            if (own.rotation >= 5) {
                target = -5;
            }
            else {
                target = 5;
            }
            Laya.Tween.to(own, { rotation: target }, 40, null, Laya.Handler.create(this, this.shake));
        }
        jump() {
            if (this._jumping)
                return;
            this._jumping = true;
            this._index = this._index + 1;
            if (this._index >= utils.tryGameDate.length) {
                this._index = 0;
            }
            if (utils.tryGameDate[this._index] != null && utils.tryGameDate[this._index] != undefined && utils.tryGameDate[this._index].date[0] != null && utils.tryGameDate[this._index].date[0] != undefined) {
                let remoteUrl = null;
                if (utils.tryGameDate[this._index].date[0].iconUrlList != null && utils.tryGameDate[this._index].date[0].iconUrlList != undefined) {
                    if (utils.tryGameDate[this._index].date[0].iconUrlList[0] != null && utils.tryGameDate[this._index].date[0].iconUrlList[0] != undefined) {
                        remoteUrl = utils.tryGameDate[this._index].date[0].iconUrlList[0];
                        let tryGameAd = utils.tryGameDate[this._index].tryGameAd;
                        let adid = utils.tryGameDate[this._index].date[0].adId;
                        if (tryGameAd && adid) {
                            tryGameAd.reportAdShow({
                                adId: adid
                            });
                        }
                    }
                }
                else {
                    if (utils.tryGameDate[this._index].date[0].imgUrlList != null && utils.tryGameDate[this._index].date[0].imgUrlList != undefined) {
                        if (utils.tryGameDate[this._index].date[0].imgUrlList[0] != null && utils.tryGameDate[this._index].date[0].imgUrlList[0] != undefined) {
                            remoteUrl = utils.tryGameDate[this._index].date[0].imgUrlList[0];
                            let tryGameAd = utils.tryGameDate[this._index].tryGameAd;
                            let adid = utils.tryGameDate[this._index].date[0].adId;
                            if (tryGameAd && adid) {
                                tryGameAd.reportAdShow({
                                    adId: adid
                                });
                            }
                        }
                    }
                }
                this._icon.skin = remoteUrl;
                if (this._isFirst == true) {
                    this._isFirst = false;
                }
            }
            this._jumping = false;
            this.shake();
            if (this._gameJumpInterval > 2) {
                Laya.timer.once((this._gameJumpInterval - 1.5) * 1000, this, this.shake);
            }
        }
    }

    class NativeTryGamesWidget extends Laya.Script {
        constructor() {
            super(...arguments);
            this._tryGameNode = null;
            this._isInit = false;
        }
        onAwake() {
            if (!this.owner)
                return;
            this._tryGameNode = this.owner.getChildByName("TryGamesNode").getComponent(NativeTryGameNode);
            this._tryGameNode.owner.visible = false;
        }
        initWidget() {
            if (utils.isShowNativeTryGamesWidget()) {
                let dataValid = true;
                if (utils.tryGameDate) {
                    if (utils.tryGameDate.length <= 0) {
                        cc.warn("res的长度不合法！");
                        dataValid = false;
                    }
                }
                else {
                    cc.warn("res的长度不合法！");
                    dataValid = false;
                }
                if (dataValid) {
                    this._isInit = true;
                    utils.showLog("交叉推广数据.....:" + JSON.stringify(utils.tryGameDate));
                    this._tryGameNode.init({ "jump_refresh_time": utils.ServerConfig.jump_refresh_time, "jump_list": utils.ServerConfig.jump_list });
                    this._tryGameNode.owner.visible = true;
                }
                else {
                    this._tryGameNode.owner.visible = false;
                }
            }
            else {
                this._tryGameNode.owner.visible = false;
            }
        }
    }

    class AdAgentOPPO extends AdAgent {
        constructor() {
            super(...arguments);
            this._bannerAd = null;
            this._insertAd = null;
            this._videoAd = null;
            this._nativeBannerAd = [];
            this._nativeInsertAd = [];
            this._nativeSingleAd = [];
            this._nativeAd = null;
            this._isAdInit = false;
            this._isBannerShow = false;
            this._isInsertShow = false;
            this._curPosIdIndexNativeBanner = 0;
            this._curPosIdIndexNativeInser = 0;
            this._curPosIdIndexSingleNative = 0;
            this._nativeData = null;
            this._nativeInsertData = null;
            this._nativeBannerNode = null;
            this._nativeInsertNode = null;
            this._videoCallback = null;
            this._videoLoaded = null;
            this._miniBannerHeight = 0;
            this._showBannerCallBack = null;
            this._nativeAdObject = null;
            this._insertShowCount = 0;
            this._insertLastShowTime = 0;
            this._curNativeItem = null;
            this._isNativeBannerShow = false;
            this.lastLastShowVideoTime = 0;
            this._bannerHideCount = 0;
            this._nativeBannerInfo = null;
            this.qg = Laya.Browser.window.qg;
            this._nativeIsClose = false;
            this._showBannerTimerId = 0;
            this._delayShowBannerId = 0;
            this._curLocation = BannerLocation.None;
            this._isTimeRefresh = false;
            this._startBannerTimerTask = 0;
            this.canShowNativeBanner = true;
            this.miniInserAdIsCreate = false;
            this._curNativeBannerInfo = {};
            this._singleAdCreateTime = 0;
            this._rewardInsertNode = null;
            this.tryGameAdArr = [];
        }
        getNativeBannerInfo() {
            if (this._nativeBannerInfo && this._nativeBannerInfo.location == this._curLocation) {
                return this._nativeBannerInfo;
            }
            return utils.config.oppoconfig.getNativeBannerInfo(this._curLocation);
        }
        get ServerConfig() {
            return utils.oppoTool.ServerConfig;
        }
        Init() {
            let self = this;
            utils.registerServerInitEvent(() => {
                if (PlatUtils.IsOPPO && utils.oppoTool && utils.oppoTool.isOverMiniVersion("1031")) {
                    utils.showLog("OPPO 广告代理组件初始化!");
                    qg.initAdService({
                        appId: utils.config.oppoconfig.appID,
                        isDebug: true,
                        success: function (res) {
                            utils.showLog("OPPO 小游戏广告组件初始化成功!");
                            self._isAdInit = true;
                            self._initVideoAd();
                        },
                        fail: function (res) {
                            utils.showLog("OPPO 小游戏广告组件初始化失败 :" + res.code + res.msg);
                        },
                        complete: function (res) {
                        }
                    });
                }
            }, this);
        }
        ShowBanner(location = null, args = null, isTimeRefresh = false) {
            if (PlatUtils.IsOPPO) {
                let oldLocation = this._curLocation;
                this._curLocation = location;
                this._isTimeRefresh = isTimeRefresh;
                if (oldLocation != location) {
                    this.HideBanner(location);
                }
                let curTime = new Date().getTime();
                let refresh_ad_time = (curTime - this._startBannerTimerTask) / 1000;
                let interval = this.ServerConfig.refresh_ad_time;
                if (args && args.isRefresh) {
                    isTimeRefresh = true;
                }
                else if (interval && interval > 0) {
                    if (refresh_ad_time > interval) {
                        isTimeRefresh = true;
                    }
                }
                if (this.getNativeBannerInfo().is_show_banner == -1) {
                    utils.showLog("当前位置配置为不展示banner!");
                    this.HideBanner(location);
                    return;
                }
                else if (this.getNativeBannerInfo().is_show_rec > -1) {
                    this.HideBanner(location);
                    utils.showLog("当前位置显示互推banner");
                    if (utils.oppoTool.canShowRecommend()) {
                        utils.oppoTool.showOppoRecBanner();
                        return;
                    }
                    utils.showLog("当前平台不支持互推banner");
                }
                else {
                    if (!isTimeRefresh) {
                        if (this.ServerConfig.nbclr && this.ServerConfig.nbclr == "true" && this._curNativeBannerInfo.nativeBannerAd) {
                            utils.showLog("服务器配置定时器刷新数据 " + this.ServerConfig.nbclr);
                            utils.showLog(`原生banner延迟显示${this.getNativeBannerInfo().delay_show_time}秒`);
                            clearTimeout(this._showBannerTimerId);
                            clearTimeout(this._delayShowBannerId);
                            this._delayShowBannerId = setTimeout(() => {
                                this._showNativeBanner(this._curNativeBannerInfo.nativeBannerAd, this._curNativeBannerInfo.data);
                            }, this.getNativeBannerInfo().delay_show_time * 1000);
                            utils.showLog("开启定时刷新 >>>>>>>>>" + (interval - refresh_ad_time));
                            this._showBannerTimerId = setTimeout(() => {
                                utils.showLog(`定时${interval}秒调用showbanner`);
                                this.ShowBanner(this._curLocation, {}, true);
                            }, (interval - refresh_ad_time) * 1000);
                            return;
                        }
                    }
                }
                this.canShowNativeBanner = true;
                this._nativeIsClose = false;
                clearTimeout(this._delayShowBannerId);
                clearTimeout(this._showBannerTimerId);
                if (this.ServerConfig) {
                    utils.showLog("banner 优先展示 >>>>" + this.ServerConfig.banner_first_ad);
                    if (this.ServerConfig.banner_first_ad && (this.ServerConfig.banner_first_ad.indexOf("yz") > -1) && utils.isShowRecommondGamesBanner()) {
                        utils.showLog(`服务器优先显示自定义的banner ,展示次数为：${this.ServerConfig.banner_jump_show_count}`);
                        if (this.ServerConfig.banner_jump_show_count) {
                            if (utils.oppoTool.yzBannerShowCounts < this.ServerConfig.banner_jump_show_count) {
                                utils.showRecommendGamesBanner();
                                return;
                            }
                            utils.showLog(`自定义banner显示次数达到${this.ServerConfig.banner_jump_show_count}次限制，不显示！`);
                        }
                        else {
                            utils.showRecommendGamesBanner();
                            return;
                        }
                    }
                    if (interval != null && interval != undefined) {
                        if (interval > 0) {
                            this._showBannerTimerId = setTimeout(() => {
                                utils.showLog(`定时${interval}秒调用showbanner`);
                                this.ShowBanner(this._curLocation, {}, true);
                            }, interval * 1000);
                        }
                    }
                    let closeCount = this.ServerConfig.banner_close_count ? this.ServerConfig.banner_close_count : 0;
                    if (utils.config.oppoconfig.version == utils.ServerConfig.version) {
                        if (closeCount > 0 && utils.oppoTool.bannerAdCloseCounts >= closeCount) {
                            if (this.ServerConfig.banner_close_full_count_showyz && this.ServerConfig.banner_close_full_count_showyz == "true" && utils.isShowRecommondGamesBanner()) {
                                utils.showRecommendGamesBanner();
                                utils.showLog(`banner 关闭次数达到${closeCount}次,显示自定义Banner！`);
                                return;
                            }
                            else {
                                utils.showLog(`banner 关闭次数达到${closeCount}次,banner今日不再显示！`);
                            }
                            return;
                        }
                    }
                    else {
                        utils.showLog(`当前的版本号${utils.config.oppoconfig.version}与oppo配置的版本号${utils.ServerConfig.version}不一致，banner关闭次数限制不生效`);
                    }
                    if (this.ServerConfig.banner_first_ad) {
                        if (this.ServerConfig.banner_first_ad.indexOf("native") > -1) {
                            utils.showLog("优先展示原生Banner广告!");
                            if (!this._isTimeRefresh) {
                                utils.showLog(`原生banner延迟显示${this.getNativeBannerInfo().delay_show_time}秒`);
                                this._delayShowBannerId = setTimeout(() => {
                                    this._createNativeBannerAd(this._showNativeBanner);
                                }, this.getNativeBannerInfo().delay_show_time * 1000);
                            }
                            else {
                                this._createNativeBannerAd(this._showNativeBanner);
                            }
                        }
                        else {
                            utils.showLog("优先展示小游戏Banner广告!");
                            this._createMiniGameBannerAd(location);
                        }
                    }
                    else {
                        utils.showLog("配置数据中没有 banner_first_ad 字段， banner广告不显示!");
                    }
                }
                else {
                    utils.showLog("服务器配置数据未初始化!");
                }
            }
        }
        HideBanner(location = null) {
            if (PlatUtils.IsOPPO) {
                clearTimeout(this._showBannerTimerId);
                clearTimeout(this._delayShowBannerId);
                this._isBannerShow = false;
                this._nativeIsClose = true;
                if (this._bannerAd) {
                    if (utils.oppoTool.isOverMiniVersion("1050")) {
                        utils.showLog("销毁小游戏Banner");
                        this._bannerAd.destroy();
                        this._bannerAd = null;
                    }
                    else {
                        utils.showLog("当前小游戏平台小于1051，只能隐藏小游戏Banner");
                        this._bannerAd.hide();
                    }
                }
                this.canShowNativeBanner = false;
                if (this._nativeBannerNode) {
                    utils.showLog("隐藏原生Banner");
                    this._nativeBannerNode.visible = false;
                }
                utils.hideRecommendGamesBanner();
                utils.oppoTool && utils.oppoTool.hideOppoRecBanner();
            }
        }
        hideKyxBanner() {
            if (this._nativeBannerNode) {
                utils.showLog("隐藏原生Banner");
                this._nativeBannerNode.visible = false;
            }
            if (utils.oppoTool.isOverMiniVersion("1050")) {
                utils.showLog("销毁小游戏Banner");
                this._bannerAd && this._bannerAd.destroy();
                this._bannerAd = null;
            }
            else {
                utils.showLog("当前小游戏平台小于1051，只能隐藏小游戏Banner");
                this._bannerAd && this._bannerAd.hide();
            }
        }
        ShowInterstitial(location = null) {
            utils.showLog("oppo平台不显示插屏广告......");
            return;
        }
        ShowVideo(callback) {
            if (PlatUtils.IsOPPO) {
                this._videoCallback = callback;
                let curTime = new Date().getTime();
                let interval = (curTime - this.lastLastShowVideoTime) / 1000;
                if (interval < 4) {
                    utils.showLog("视频广告请求间隔小于4秒,直接返回false");
                    if (this._videoCallback) {
                        this._videoCallback(false, "暂无视频广告!");
                        this._videoCallback = null;
                    }
                    return;
                }
                if (this.ServerConfig) {
                    if (this.checkRewardInsertIsShow() && utils.oppoTool
                        && utils.oppoTool.ServerConfig
                        && utils.oppoTool.ServerConfig.reward_first_ad && utils.oppoTool.ServerConfig.reward_first_ad != "video") {
                        utils.showLog("<<<服务器默认优先展示激励插屏>>>");
                        this.showRewardInsert();
                        return;
                    }
                    if (utils.oppoTool.isOverMiniVersion("1040")) {
                        if (!this._videoAd) {
                            this._initVideoAd();
                        }
                        if (this._videoAd && this._videoLoaded) {
                            this._videoAd.show();
                            return;
                        }
                    }
                }
                utils.showLog("暂无视频广告!");
                if (this._videoCallback) {
                    this._videoAd.load();
                    this._videoCallback(false, "暂无视频广告!");
                    this._videoCallback = null;
                }
            }
        }
        _initVideoAd() {
            if (!this._videoAd) {
                if (utils.config.oppoconfig.videoId) {
                    utils.showLog("oppo视频的posId为:" + utils.config.oppoconfig.videoId);
                    this._videoAd = this.qg.createRewardedVideoAd({
                        posId: utils.config.oppoconfig.videoId
                    });
                    let self = this;
                    if (this._videoAd) {
                        utils.showLog("初始化注册视频回调!");
                        this._videoAd.load();
                        this._videoAd.onLoad(function () {
                            utils.showLog("激励视频加载成功");
                            self._videoLoaded = true;
                        });
                        this._videoAd.onError((err) => {
                            utils.showLog("激励视频出错: " + err.code + err.msg);
                            self._videoLoaded = false;
                            if (self._videoCallback) {
                                self._videoCallback(false, "暂无视频广告!");
                                self._videoCallback = null;
                            }
                        });
                        this._videoAd.onClose((res) => {
                            setTimeout(() => {
                                self._videoAd.load();
                                utils.showLog("延迟3秒重新加载视频广告");
                            }, 3000);
                            if (res.isEnded) {
                                utils.showLog('激励视频广告完成，发放奖励');
                                this.lastLastShowVideoTime = new Date().getTime();
                                if (self._videoCallback) {
                                    self._videoCallback(true, "");
                                    self._videoCallback = null;
                                }
                            }
                            else {
                                utils.showLog('激励视频广告取消关闭，不发放奖励');
                                if (self._videoCallback) {
                                    self._videoCallback(false, "观看完视频才能获得奖励!");
                                    self._videoCallback = null;
                                }
                            }
                        });
                    }
                }
                else {
                    cc.warn("视频广告Id配置错误!");
                }
            }
        }
        _createMiniGameInsertAd(isUnique = false) {
            if (PlatUtils.IsOPPO) {
            }
        }
        _createMiniGameBannerAd(location = null) {
            if (PlatUtils.IsOPPO) {
                this._isBannerShow = true;
                if (this._isAdInit
                    && utils.config.oppoconfig
                    && utils.config.oppoconfig.bannerId) {
                    if (!this._bannerAd) {
                        this._bannerAd = this.qg.createBannerAd({
                            posId: utils.config.oppoconfig.bannerId
                        });
                        if (this._bannerAd) {
                            utils.showLog("注册小游戏banner回调!");
                            this._bannerAd.onError(((err) => {
                                utils.showLog("OPPO 小游戏Banner广告出错: ", err.code, err.msg);
                                let bannerInfo = this.getNativeBannerInfo();
                                if (bannerInfo.st_banner_show_back_up == -1) {
                                    utils.showLog("服务器配置不显示备用广告");
                                    return;
                                }
                                if (this._isBannerShow) {
                                    this._isBannerShow = false;
                                    if (this.ServerConfig.banner_first_ad == "default") {
                                        this._curPosIdIndexNativeBanner = 0;
                                        this._createNativeBannerAd(this._showNativeBanner.bind(this));
                                    }
                                    else {
                                        if (utils.isShowRecommondGamesBanner()) {
                                            clearTimeout(this._showBannerTimerId);
                                            utils.showRecommendGamesBanner();
                                            utils.showLog(`小游戏、原生广告条都无法展示，展示自定义banner`);
                                            return;
                                        }
                                    }
                                }
                            }).bind(this));
                            this._bannerAd.onShow((() => {
                                utils.showLog("OPPO 小游戏Banner显示成功！");
                                if (this._nativeBannerNode) {
                                    this._nativeBannerNode.visible = false;
                                }
                                utils.hideRecommendGamesBanner();
                                this._showBannerCallBack && this._showBannerCallBack();
                                this._showBannerCallBack = null;
                            }).bind(this));
                            this._bannerAd.onHide(function () {
                                if (!this._isNativeBannerShow) {
                                    utils.oppoTool.countBannerCloseCount();
                                    utils.showLog("OPPO 小游戏Banner 广告隐藏,当前隐藏次数>", utils.oppoTool.bannerAdCloseCounts);
                                }
                                else {
                                    this._isNativeBannerShow = false;
                                    utils.showLog("OPPO 小游戏Banner 广告隐藏,来自原生的显示，不增加隐藏次数，当前隐藏次数>", utils.oppoTool.bannerAdCloseCounts);
                                }
                            });
                        }
                        else {
                            if (this.ServerConfig.banner_first_ad == "default") {
                                this._curPosIdIndexNativeBanner = 0;
                                this._createNativeBannerAd(this._showNativeBanner.bind(this));
                            }
                            else {
                                if (utils.isShowRecommondGamesBanner()) {
                                    clearTimeout(this._showBannerTimerId);
                                    utils.showRecommendGamesBanner();
                                    utils.showLog(`小游戏、原生广告条都无法展示，展示自定义banner`);
                                    return;
                                }
                            }
                        }
                    }
                    if (this._bannerAd) {
                        this._bannerAd.show();
                    }
                    else {
                        utils.showLog("OPPO 小游戏Banner广告创建失败!");
                        if (this.ServerConfig.banner_first_ad == "default") {
                            this._curPosIdIndexNativeBanner = 0;
                            this._createNativeBannerAd(this._showNativeBanner.bind(this));
                        }
                        else {
                            if (utils.isShowRecommondGamesBanner()) {
                                clearTimeout(this._showBannerTimerId);
                                utils.showRecommendGamesBanner();
                                utils.showLog(`小游戏、原生广告条都无法展示，展示自定义banner`);
                                return;
                            }
                        }
                    }
                }
                else {
                    utils.showLog("OPPO 小游戏Banner广告配置信息错误!");
                    let bannerInfo = this.getNativeBannerInfo();
                    if (bannerInfo.st_banner_show_back_up == -1) {
                        utils.showLog("服务器配置不显示备用广告");
                        return;
                    }
                    if (this.ServerConfig.banner_first_ad == "default") {
                        this._curPosIdIndexNativeBanner = 0;
                        this._createNativeBannerAd(this._showNativeBanner.bind(this));
                    }
                    else {
                        if (utils.isShowRecommondGamesBanner()) {
                            clearTimeout(this._showBannerTimerId);
                            utils.showRecommendGamesBanner();
                            utils.showLog(`小游戏、原生广告条都无法展示，展示自定义banner`);
                            return;
                        }
                    }
                }
            }
        }
        _createNativeBannerAd(completeCallback) {
            if (PlatUtils.IsOPPO) {
                let callback = completeCallback;
                utils.showLog("curPosIdIndexNativeBanner:", this._curPosIdIndexNativeBanner);
                let nativeBannerAd = this._nativeBannerAd[this._curPosIdIndexNativeBanner];
                if (!nativeBannerAd) {
                    if (utils.config.oppoconfig.nativeBannerIds
                        && utils.config.oppoconfig.nativeBannerIds[this._curPosIdIndexNativeBanner]) {
                        utils.showLog("创建原生广告Banner。 posId:", utils.config.oppoconfig.nativeBannerIds[this._curPosIdIndexNativeBanner]);
                        nativeBannerAd = this.qg.createNativeAd({
                            posId: utils.config.oppoconfig.nativeBannerIds[this._curPosIdIndexNativeBanner]
                        });
                        if (nativeBannerAd) {
                            this._nativeBannerAd.push(nativeBannerAd);
                            nativeBannerAd.onLoad((res) => {
                                if (this._nativeIsClose) {
                                    utils.showLog("隐藏了BANNER，不做任何处理！");
                                    return;
                                }
                                if (res && res.adList && res.adList.length > 0) {
                                    this._startBannerTimerTask = new Date().getTime();
                                    utils.showLog("原生Banner广告资源拉取成功！");
                                    utils.showLog(JSON.stringify(res));
                                    res = JSON.parse(JSON.stringify(res));
                                    let data = res.adList[0];
                                    if (this._checkNativeDataValid(data) || this.getNativeBannerInfo().show_st_banner == "true") {
                                        if (this.canShowNativeBanner) {
                                            this._curPosIdIndexNativeBanner = 0;
                                            this._showNativeBanner(nativeBannerAd, data);
                                            this._curNativeBannerInfo.nativeBannerAd = nativeBannerAd;
                                            this._curNativeBannerInfo.data = data;
                                            if (this._bannerAd) {
                                                this._isNativeBannerShow = true;
                                                if (utils.oppoTool.isOverMiniVersion("1050")) {
                                                    utils.showLog("销毁小游戏Banner");
                                                    this._bannerAd.destroy();
                                                    this._bannerAd = null;
                                                }
                                                else {
                                                    utils.showLog("当前小游戏平台小于1051，只能隐藏小游戏Banner");
                                                    this._bannerAd.hide();
                                                }
                                            }
                                            utils.hideRecommendGamesBanner();
                                        }
                                        else {
                                            cc.warn("已经隐藏banner不可重复展示");
                                        }
                                        return;
                                    }
                                }
                                utils.showLog("原生Banner广告资源出错！");
                                this._curPosIdIndexNativeBanner++;
                                if (this._curPosIdIndexNativeBanner < utils.config.oppoconfig.nativeBannerIds.length) {
                                    this._createNativeBannerAd(callback);
                                }
                                else {
                                    this._curPosIdIndexNativeBanner = 0;
                                    utils.showLog("原生广告条遍历完毕，无法展示！");
                                    let bannerInfo = this.getNativeBannerInfo();
                                    if (bannerInfo.st_banner_show_back_up == -1) {
                                        utils.showLog(">>>>>服务器配置不显示备用广告！");
                                        return;
                                    }
                                    if (this.ServerConfig.banner_first_ad.indexOf("native") > -1) {
                                        utils.showLog("开始展示小游戏广告条！");
                                        this._createMiniGameBannerAd();
                                    }
                                    else {
                                        if (utils.isShowRecommondGamesBanner()) {
                                            clearTimeout(this._showBannerTimerId);
                                            utils.showRecommendGamesBanner();
                                            utils.showLog(`小游戏、原生广告条都无法展示，展示自定义banner`);
                                            return;
                                        }
                                    }
                                }
                            });
                            nativeBannerAd.onError((err) => {
                                if (this._nativeIsClose) {
                                    utils.showLog("隐藏了BANNER，不做任何处理！");
                                    return;
                                }
                                utils.showLog("原生Banner广告资源拉取失败！", err.code, err.msg);
                                this._curPosIdIndexNativeBanner++;
                                if (this._curPosIdIndexNativeBanner < utils.config.oppoconfig.nativeBannerIds.length) {
                                    this._createNativeBannerAd(callback);
                                }
                                else {
                                    this._curPosIdIndexNativeBanner = 0;
                                    utils.showLog("原生广告条遍历完毕，无法展示！");
                                    utils.showLog("开始展示小游戏广告条！");
                                    let bannerInfo = this.getNativeBannerInfo();
                                    if (bannerInfo.st_banner_show_back_up == -1) {
                                        utils.showLog(">>>>>服务器配置不显示备用广告！");
                                        return;
                                    }
                                    if (this.ServerConfig.banner_first_ad.indexOf("native") > -1) {
                                        utils.showLog("开始展示小游戏广告条！");
                                        this._createMiniGameBannerAd();
                                    }
                                    else {
                                        if (utils.isShowRecommondGamesBanner()) {
                                            clearTimeout(this._showBannerTimerId);
                                            utils.showRecommendGamesBanner();
                                            utils.showLog(`小游戏、原生广告条都无法展示，展示自定义banner`);
                                            return;
                                        }
                                    }
                                }
                            });
                        }
                    }
                }
                if (nativeBannerAd) {
                    utils.showLog("nativeBannerAd reLoad>>");
                    nativeBannerAd.load();
                }
                else {
                    this._curPosIdIndexNativeBanner++;
                    if (utils.config.oppoconfig.nativeBannerIds && this._curPosIdIndexNativeBanner < utils.config.oppoconfig.nativeBannerIds.length) {
                        this._createNativeBannerAd(callback);
                    }
                    else {
                        this._curPosIdIndexNativeBanner = 0;
                        utils.showLog("原生广告条遍历完毕，无法展示！");
                        let bannerInfo = this.getNativeBannerInfo();
                        if (bannerInfo.st_banner_show_back_up == -1) {
                            utils.showLog(">>>>>服务器配置不显示备用广告！");
                            return;
                        }
                        if (this.ServerConfig.banner_first_ad.indexOf("native") > -1) {
                            utils.showLog("开始展示小游戏广告条！");
                            this._createMiniGameBannerAd();
                        }
                        else {
                            if (utils.isShowRecommondGamesBanner()) {
                                clearTimeout(this._showBannerTimerId);
                                utils.showRecommendGamesBanner();
                                utils.showLog(`小游戏、原生广告条都无法展示，展示自定义banner`);
                                return;
                            }
                        }
                    }
                }
            }
        }
        _createNativeInsertAd(completeCallback) {
        }
        getNativeAdData() {
            if (!this._nativeAdObject) {
                this._nativeAdObject = new YZ_NativeAdObject();
            }
            this._nativeAdObject._nativeObj = this._nativeAd;
            this._nativeAdObject.data = this._nativeData;
            if (this._nativeData && this._nativeAd) {
                this._nativeData = null;
                return this._nativeAdObject;
            }
            return null;
        }
        createNativeAd(nativeItem) {
            utils.showLog("_createNativeAd >>>>>");
            if (PlatUtils.IsOPPO) {
                if (nativeItem) {
                    this._curNativeItem = nativeItem;
                }
                let refreshTime = this.ServerConfig.st_native_ad_refresh_time ? this.ServerConfig.st_native_ad_refresh_time : 0;
                if (this._nativeAdObject && this._nativeAdObject.data && !this._nativeAdObject.is_reportClick && (new Date().getTime() - this._singleAdCreateTime) / 1000 < refreshTime) {
                    utils.showLog(`当前原生广告的展示时间${(new Date().getTime() - this._singleAdCreateTime) / 1000}秒，未达刷新时间${refreshTime}秒限制，直接使用上一次数据！`);
                    this._showNativeAd();
                    return;
                }
                utils.showLog("_curPosIdIndexSingleNative:", this._curPosIdIndexSingleNative, "  #this._nativeSingleAd.length", this._nativeSingleAd.length);
                let nativeSingleAd = this._nativeSingleAd[this._curPosIdIndexSingleNative];
                if (!nativeSingleAd) {
                    if (utils.config.oppoconfig.nativeSingleAdIds
                        && utils.config.oppoconfig.nativeSingleAdIds[this._curPosIdIndexSingleNative]) {
                        utils.showLog("创建原生广告。 posId:", utils.config.oppoconfig.nativeSingleAdIds[this._curPosIdIndexSingleNative]);
                        nativeSingleAd = this.qg.createNativeAd({
                            posId: utils.config.oppoconfig.nativeSingleAdIds[this._curPosIdIndexSingleNative]
                        });
                        if (nativeSingleAd) {
                            this._nativeSingleAd.push(nativeSingleAd);
                            nativeSingleAd.onLoad((res) => {
                                if (res && res.adList && res.adList.length > 0) {
                                    this._singleAdCreateTime = new Date().getTime();
                                    utils.showLog("原生广告资源拉取成功！");
                                    utils.showLog(JSON.stringify(res));
                                    res = JSON.parse(JSON.stringify(res));
                                    let data = res.adList[0];
                                    if (this._checkNativeDataValid(data)) {
                                        this._curPosIdIndexSingleNative = 0;
                                        this._nativeData = data;
                                        this._nativeAd = nativeSingleAd;
                                        this._showNativeAd();
                                        return;
                                    }
                                    else {
                                        utils.showLog("原生广告资源不合法！");
                                    }
                                }
                                utils.showLog("原生广告资源出错！");
                                this._curPosIdIndexSingleNative++;
                                if (this._curPosIdIndexSingleNative < utils.config.oppoconfig.nativeSingleAdIds.length) {
                                    this.createNativeAd();
                                }
                                else {
                                    this._curPosIdIndexSingleNative = 0;
                                    utils.showLog("单个原生广告ID遍历完毕，无法展示！");
                                }
                            });
                            nativeSingleAd.onError((err) => {
                                utils.showLog("原生单个广告资源拉取失败！", err.code, err.msg);
                                this._curPosIdIndexSingleNative++;
                                if (this._curPosIdIndexSingleNative < utils.config.oppoconfig.nativeSingleAdIds.length) {
                                    this.createNativeAd();
                                }
                                else {
                                    this._curPosIdIndexSingleNative = 0;
                                    utils.showLog("单个原生广告ID遍历完毕，无法展示！");
                                }
                            });
                        }
                    }
                }
                if (nativeSingleAd) {
                    utils.showLog("nativeSingleAd reload");
                    nativeSingleAd.load();
                }
                else {
                    this._curPosIdIndexSingleNative++;
                    if (utils.config.oppoconfig.nativeSingleAdIds && this._curPosIdIndexSingleNative < utils.config.oppoconfig.nativeSingleAdIds.length) {
                        this.createNativeAd();
                    }
                    else {
                        this._curPosIdIndexSingleNative = 0;
                        utils.showLog("单个原生广告ID 遍历完毕，无法展示！");
                    }
                }
            }
        }
        _showNativeBanner(nativeBannerAd, data) {
            if (PlatUtils.IsOPPO) {
                if (data) {
                    utils.showLog("显示原生banner");
                    if (!cc.isValid(this._nativeBannerNode) || (!this._nativeBannerNode && utils.config.otherconfig.nativeBanner)) {
                        utils.showLog("创建原生广告banner位");
                        this._nativeBannerNode = cc.instantiate(utils.config.otherconfig.nativeBanner);
                        cc.addToStage(this._nativeBannerNode, 1000);
                    }
                    if (this._nativeBannerNode) {
                        this._nativeBannerNode.visible = true;
                        let nativeBanner = this._nativeBannerNode.getComponent(YZ_NativeBanner);
                        if (nativeBanner) {
                            nativeBanner.init(nativeBannerAd, data, this.getNativeBannerInfo());
                        }
                        else {
                            utils.showLog("NativeBanner组件不存在!");
                        }
                        this._showBannerCallBack && this._showBannerCallBack();
                        this._showBannerCallBack = null;
                    }
                    else {
                        utils.showLog("原生广告banner位没有创建！");
                    }
                }
            }
        }
        _showNativeInsert(nativeInsertAd, data) {
        }
        ShowCloseBtnBanner(location = BannerLocation.Home, args) {
            utils.showLog("ShowCloseBtnBanner >>>>>>>>>.");
            let isMoveBtn = 0;
            let fadeInTime = 0;
            let btn = args.closeBtn;
            let winHeight = cc.winSize.height;
            btn.alpha = 0;
            if (this.ServerConfig) {
                if (this.ServerConfig.is_move_btn) {
                    isMoveBtn = this.ServerConfig.is_move_btn;
                }
                if (this.ServerConfig.close_btn_fade_in_time) {
                    fadeInTime = this.ServerConfig.close_btn_fade_in_time;
                }
                utils.showLog(isMoveBtn == 0 ? "显示banner,且按钮在上面" : `显示Banner,按钮居底部且${isMoveBtn}毫秒后移动`);
                setTimeout(() => {
                    utils.showLog("延迟调用关闭按钮的Banner >>>>");
                    this.ShowBanner(location, args);
                    var adY = 240;
                    utils.showLog('utils - adY:', adY);
                    if (adY > 0 && btn) {
                        btn.y = -(winHeight / 2 - adY) + btn.height;
                        utils.showLog("btnClose.y", btn.y);
                    }
                }, isMoveBtn);
                setTimeout(() => {
                    btn.alpha = 1;
                }, fadeInTime * 1000);
            }
        }
        _checkNativeInsertDataValid(data) {
            if (!data) {
                return false;
            }
            return data.title && ((data.iconUrlList && data.iconUrlList.length > 0) || (data.imgUrlList && data.imgUrlList.length > 0));
        }
        _checkNativeDataValid(data) {
            if (!data) {
                return false;
            }
            return data.title && data.desc && data.clickBtnTxt && ((data.iconUrlList && data.iconUrlList.length > 0) || (data.imgUrlList && data.imgUrlList.length > 0));
        }
        checkRewardInsertIsShow() {
            let jumpList = utils.getRecommondGameList();
            if (utils.isSupportnavigateToMiniGame()) {
                if (utils.oppoTool
                    && utils.oppoTool.ServerConfig
                    && utils.oppoTool.ServerConfig.is_reward_intersititia) {
                    if (utils.oppoTool.ServerConfig.is_reward_intersititia == "true"
                        && jumpList && jumpList.length > 0) {
                        utils.showLog("激励插屏显示环境验证通过！");
                        return true;
                    }
                    else {
                        cc.warn("is_reward_intersititia 参数为false，激励插屏组件不显示！");
                        return false;
                    }
                }
                else {
                    cc.warn("配置中没有is_reward_intersititia参数，激励插屏组件组件不显示！");
                    return false;
                }
            }
            utils.showLog("当前平台不支持小程序跳转！");
            return false;
        }
        showRewardInsert() {
            utils.showLog("show reward");
            if (!this.checkRewardInsertIsShow()) {
                utils.adManager.videoCallBack && utils.adManager.videoCallBack(false, "暂无视频广告！");
                utils.adManager.videoCallBack = null;
                return;
            }
            if (this._rewardInsertNode) {
                let rewardInsert = this._rewardInsertNode.getComponent(RewardInsert);
            }
            else {
                utils.showLog("激励插屏没有创建！");
            }
        }
        hideRewardInsert() {
            if (this._rewardInsertNode) {
                let rewardInsert = this._rewardInsertNode.getComponent(RewardInsert);
            }
            else {
                utils.showLog("激励插屏没有创建！");
            }
        }
        checkIsShowStatementAd() {
            if (utils.isSupportnavigateToMiniGame() && this.ServerConfig) {
                return true;
            }
            else {
                cc.warn("当前平台不支持游戏内跳转，6元素交叉推广组件不显示！");
            }
        }
        showNativeTryGameWidget() {
            if (PlatUtils.IsOPPO) {
                if (utils.nativeNeedChange || !utils.tryGameDate) {
                    if (utils.config.oppoconfig.nativeTryGameIds) {
                        let len = utils.config.oppoconfig.nativeTryGameIds.length;
                        utils.showLog("len:" + len);
                        for (let i = 0; i < len; i++) {
                            if (!this.tryGameAdArr[i]) {
                                let posId = utils.config.oppoconfig.nativeTryGameIds[i];
                                utils.showLog("创建原生广告Banner。 posId:" + posId);
                                let tryGameAd = qg.createNativeAd({
                                    posId: posId
                                });
                                if (tryGameAd) {
                                    tryGameAd.onLoad((res) => {
                                        utils.nativeNeedChange = false;
                                        if (res && res.adList && res.adList.length > 0) {
                                            res = JSON.parse(JSON.stringify(res));
                                            let adId = res.adList[0].adId;
                                            utils.showLog("adId:" + adId);
                                            let canAdd = true;
                                            utils.tryGameDate.forEach((element) => {
                                                if (adId == element.date[0].adId) {
                                                    canAdd = false;
                                                }
                                            });
                                            if (canAdd) {
                                                utils.tryGameDate.push({ "tryGameAd": tryGameAd, "date": res.adList });
                                                if (utils._nativeTryGamesNode) {
                                                    utils._nativeTryGamesNode.getComponent(NativeTryGamesWidget).initWidget();
                                                }
                                            }
                                            utils.showLog("原生抖动试完广告资源拉取成功，是否可以添加广告" + canAdd);
                                            utils.showLog(JSON.stringify(res));
                                        }
                                    });
                                    tryGameAd.onError((err) => {
                                        utils.showLog("原生抖动广告资源拉取失败！" + err.code + err.msg);
                                        utils.nativeNeedChange = true;
                                    });
                                    tryGameAd.load();
                                    this.tryGameAdArr[i] = tryGameAd;
                                }
                            }
                            else {
                                this.tryGameAdArr[i].load();
                            }
                        }
                    }
                }
            }
        }
        ShowStatementRecomment(showNativeAd = true) {
            if (this.checkIsShowStatementAd()) {
            }
            else {
                return null;
            }
        }
        _showNativeAd() {
            if (this._curNativeItem && cc.isValid(this._curNativeItem)) {
                this._curNativeItem.init(this.getNativeAdData());
            }
        }
        ShowSingleNativeAd() {
            if (utils.config.otherconfig.singleNativeAd) {
                let node = cc.instantiate(utils.config.otherconfig.singleNativeAd);
                let nativeItem = node.getComponent(YZ_NativeItem);
                nativeItem.showType = 2;
                this._curNativeItem = nativeItem;
                this.createNativeAd();
                utils.showLog("单个原生广告创建成功！");
                return node;
            }
            else {
                utils.showLog("未找到预制体 singleNativeAd, 请查看CommonUtils组件上是否赋值！");
                return null;
            }
        }
        showStatementAds(data) {
            let result = { "type": 0, "node": null };
            if (this.ServerConfig && this.ServerConfig.statement_type) {
                result.type = 2;
                result.node = this.ShowSingleNativeAd();
                ;
                utils.showLog("结算广告 >> 单个原生广告>>" + result.node.name);
                return result;
            }
            return result;
        }
        GameExit() { }
        Share() { }
    }

    class AdAgentWechat extends AdAgent {
        constructor() {
            super(...arguments);
            this._curBannerAd = null;
            this._videoAd = null;
            this._videoCallback = null;
            this._insertAd = null;
            this._rewardInsertNode = null;
            this.wx = Laya.Browser.window.wx;
            this._bannerSizePercent = 0.1;
            this._bannerBottom = 0;
            this._oldBannerLocation = BannerLocation.None;
            this._showBannerTimerId = 0;
        }
        get ServerConfig() {
            return utils.wechatTool.ServerConfig;
        }
        Init() {
            if (PlatUtils.IsWechat) {
                utils.registerServerInitEvent(() => {
                    this._initVideoAd();
                    this._initInsertAd();
                }, this);
            }
        }
        _initVideoAd() {
            if (PlatUtils.IsWechat) {
                if (!utils.wechatTool.isOverMinVersion("2.0.4")) {
                    utils.showLog("当前版本不支持视频广告!");
                    return;
                }
                if (!this._videoAd) {
                    utils.showLog("初始化视频!");
                    if (!utils.config.wechatconfig.videoId) {
                        utils.showLog("视频ID配置错误!");
                        return;
                    }
                    utils.showLog("视频广告ID:", utils.config.wechatconfig.videoId.trim());
                    this._videoAd = this.wx.createRewardedVideoAd({
                        adUnitId: utils.config.wechatconfig.videoId
                    });
                    let self = this;
                    if (this._videoAd) {
                        utils.showLog("初始化注册视频回调!");
                        this._videoAd.onLoad(function () {
                            utils.showLog("激励视频加载成功");
                        }.bind(this));
                        this._videoAd.onError(function (err) {
                            utils.showLog("激励视频加载失败!", err.code, err.msg);
                        }.bind(this));
                        this._videoAd.onClose(function (res) {
                            if (res && res.isEnded || res === undefined) {
                                utils.showLog('激励视频广告完成，发放奖励');
                                if (self._videoCallback) {
                                    self._videoCallback(true, "");
                                    self._videoCallback = null;
                                }
                            }
                            else {
                                utils.showLog('激励视频广告取消关闭，不发放奖励');
                                if (self._videoCallback) {
                                    self._videoCallback(false, "观看完视频才能获得奖励!");
                                    self._videoCallback = null;
                                }
                            }
                        }.bind(this));
                    }
                    else {
                        utils.showLog("激励视频初始化失败!");
                    }
                }
            }
        }
        _createBanner(location, args = null) {
            if (PlatUtils.IsWechat) {
                let locationTmp = location;
                let argsTmp = args;
                if (argsTmp && argsTmp.width) {
                    this._bannerSizePercent = argsTmp.width < 0 ? 0 : argsTmp.width;
                    this._bannerSizePercent = argsTmp.width > 1 ? 1 : argsTmp.width;
                }
                if (argsTmp && argsTmp.bottom) {
                    this._bannerBottom = argsTmp.bottom < 0 ? 0 : argsTmp.bottom;
                    this._bannerBottom = argsTmp.bottom > cc.winSize.height ? cc.winSize.height : argsTmp.bottom;
                }
                let params = {
                    adUnitId: utils.config.wechatconfig.getBannerId(locationTmp),
                    style: {
                        left: 0,
                        width: 300,
                        top: 0
                    }
                };
                if (this._oldBannerLocation != locationTmp && this._curBannerAd) {
                    this._curBannerAd.destroy();
                    this._oldBannerLocation = locationTmp;
                }
                let curBannerAd = this.wx.createBannerAd(params);
                if (curBannerAd) {
                    curBannerAd.onError((err) => {
                        utils.showLog("广告条加载失败! ", JSON.stringify(err));
                        if (curBannerAd) {
                            curBannerAd.destroy();
                        }
                    });
                    let self = this;
                    curBannerAd.onLoad(() => {
                        curBannerAd.show().then(() => {
                            let old = self._curBannerAd;
                            if (old) {
                                old.destroy();
                            }
                            self._curBannerAd = curBannerAd;
                            utils.showLog("Banner广告显示成功!");
                        }).catch((err) => {
                            utils.showLog("Banner广告出错", JSON.stringify(err));
                            if (curBannerAd) {
                                curBannerAd.destroy();
                            }
                        });
                    });
                    curBannerAd.onResize((res) => {
                        curBannerAd.style.width = utils.wechatTool.getSystemInfo().screenWidth * self._bannerSizePercent;
                        curBannerAd.style.left = (utils.wechatTool.getSystemInfo().screenWidth - res.width) * 0.5;
                        if (self._bannerBottom == cc.winSize.height) {
                            curBannerAd.style.top = 0;
                        }
                        else {
                            curBannerAd.style.top = utils.wechatTool.getSystemInfo().screenHeight - res.height - self._bannerBottom;
                        }
                    });
                }
                else {
                    utils.showLog("广告条创建失败!");
                }
            }
        }
        _initInsertAd() {
            if (PlatUtils.IsWechat) {
                if (!utils.wechatTool.isOverMinVersion("2.6.0")) {
                    utils.showLog("当前版本不支持插屏广告!");
                    return;
                }
                if (!this._insertAd) {
                    utils.showLog("初始化插屏广告!");
                    if (!utils.config.wechatconfig.insertId) {
                        utils.showLog("插屏广告ID配置错误!");
                        return;
                    }
                    utils.showLog("插屏广告ID:", utils.config.wechatconfig.insertId.trim());
                    this._insertAd = this.wx.createInterstitialAd({
                        adUnitId: utils.config.wechatconfig.insertId.trim()
                    });
                    if (this._insertAd) {
                        this._insertAd.onLoad(function () {
                            utils.showLog("插屏广告拉取成功!");
                        });
                        this._insertAd.onError(function (err) {
                            utils.showLog("插屏广告拉取失败!", JSON.stringify(err));
                        });
                        this._insertAd.onClose(function () {
                            utils.showLog("插屏广告被关闭!");
                        });
                    }
                    else {
                        utils.showLog("插屏组件初始化失败!");
                    }
                }
            }
        }
        _showBannerTimer(location, args) {
            let locationTmp = location;
            let argsTmp = args;
            utils.showLog(`显示Banner广告xxx！location:${locationTmp}; args:${JSON.stringify(argsTmp)}; 间隔时间:${utils.wechatTool.ServerConfig.refresh_ad_time}`);
            if (locationTmp == BannerLocation.None) {
                utils.showLog("未定义的BannerLocation,", locationTmp);
            }
            else {
                if (utils.config.wechatconfig.getBannerId(locationTmp)) {
                    this._createBanner(locationTmp, argsTmp);
                }
                else {
                    utils.showLog(`未找到位置为 ${locationTmp} 的广告ID!`);
                }
            }
        }
        ShowBanner(location = BannerLocation.Home, args = null) {
            if (PlatUtils.IsWechat) {
                if (!utils.wechatTool.isOverMinVersion("2.0.4")) {
                    utils.showLog("当前版本不支持Banner广告!");
                    return;
                }
                if (utils.wechatTool.ServerConfig) {
                    let locationTmp = location;
                    let argsTmp = args;
                    this._showBannerTimer(locationTmp, argsTmp);
                    let interval = 18;
                    if (utils.wechatTool.ServerConfig.refresh_ad_time) {
                        interval = utils.wechatTool.ServerConfig.refresh_ad_time;
                    }
                    clearInterval(this._showBannerTimerId);
                    this._showBannerTimerId = setInterval(function () {
                        utils.showLog(`显示Banner广告！location:${locationTmp}; args:${JSON.stringify(argsTmp)}; 间隔时间:${utils.wechatTool.ServerConfig.refresh_ad_time}`);
                        this._showBannerTimer(locationTmp, argsTmp);
                    }.bind(this), interval * 1000);
                }
                else {
                    utils.showLog("服务器配置数据未初始化!");
                }
            }
        }
        HideBanner(location = BannerLocation.Home) {
            if (PlatUtils.IsWechat) {
                utils.showLog("隐藏广告条");
                if (this._curBannerAd) {
                    this._curBannerAd.hide();
                    clearInterval(this._showBannerTimerId);
                }
            }
        }
        ShowInterstitial(location = BannerLocation.Home) {
            if (PlatUtils.IsWechat) {
                if (!utils.wechatTool.isOverMinVersion("2.6.0")) {
                    utils.showLog("当前版本不支持插屏广告!");
                    return;
                }
                let delayTime = 0;
                if (utils.wechatTool
                    && utils.wechatTool.ServerConfig
                    && utils.wechatTool.ServerConfig.intersititia_delay_show_time) {
                    delayTime = utils.wechatTool.ServerConfig.intersititia_delay_show_time;
                }
                utils.showLog(`插屏广告延时展示！ delayTime:${delayTime}秒`);
                setTimeout(() => {
                    if (this._insertAd) {
                        this._insertAd.show().then(() => {
                            utils.showLog("插屏广告展示成功!");
                        }).catch(function (err) {
                            utils.showLog("插屏广告展示失败!", err);
                        });
                    }
                    else {
                        utils.showLog("插屏广告未初始化!");
                    }
                }, delayTime * 1000);
            }
        }
        ShowVideo(callback) {
            if (PlatUtils.IsWechat) {
                this._videoCallback = callback;
                if (this.checkRewardInsertIsShow() && utils.wechatTool
                    && utils.wechatTool.ServerConfig
                    && utils.wechatTool.ServerConfig.reward_first_ad && utils.wechatTool.ServerConfig.reward_first_ad != "video") {
                    utils.showLog("<<<服务器默认优先展示激励插屏>>>");
                    this.showRewardInsert();
                    return;
                }
                if (!utils.wechatTool.isOverMinVersion("2.0.4")) {
                    utils.showLog("当前版本不支持视频广告!");
                    if (this._videoCallback) {
                        this.showRewardInsert();
                    }
                    return;
                }
                if (this._videoAd) {
                    this._videoAd.show().then(function () {
                        utils.showLog("视频显示成功！");
                    }.bind(this)).catch(function (err) {
                        utils.showLog("视频未加载！");
                        this._videoAd.load();
                        if (this._videoCallback) {
                            this.showRewardInsert();
                        }
                    }.bind(this));
                }
                else {
                    utils.showLog("视频未初始化!");
                    if (this._videoCallback) {
                        this.showRewardInsert();
                    }
                }
            }
        }
        checkRewardInsertIsShow() {
            let jumpList = utils.getRecommondGameList();
            if (utils.isSupportnavigateToMiniGame()) {
                if (utils.wechatTool
                    && utils.wechatTool.ServerConfig
                    && utils.wechatTool.ServerConfig.is_reward_intersititia) {
                    if (utils.wechatTool.ServerConfig.is_reward_intersititia == "true"
                        && jumpList && jumpList.length > 0) {
                        utils.showLog("激励插屏显示环境验证通过！");
                        return true;
                    }
                    else {
                        cc.warn("is_reward_intersititia 参数为false，激励插屏组件不显示！");
                        return false;
                    }
                }
                else {
                    cc.warn("配置中没有is_reward_intersititia参数，激励插屏组件组件不显示！");
                    return false;
                }
            }
            utils.showLog("当前平台不支持小程序跳转！");
            return false;
        }
        showRewardInsert() {
            utils.showLog("show reward");
            if (!this.checkRewardInsertIsShow()) {
                utils.adManager.videoCallBack && utils.adManager.videoCallBack(false, "激励组件加载失败！");
                utils.adManager.videoCallBack = null;
                return;
            }
            if (this._rewardInsertNode) {
                let rewardInsert = this._rewardInsertNode.getComponent(RewardInsert);
                if (rewardInsert) {
                    rewardInsert.isShow = false;
                    utils.showLog("显示激励插屏组件！");
                }
                else {
                    utils.showLog("RewardInsert组件不存在!");
                }
            }
            else {
                utils.showLog("激励插屏没有创建！");
            }
        }
        hideRewardInsert() {
            if (this._rewardInsertNode) {
                let rewardInsert = this._rewardInsertNode.getComponent(RewardInsert);
                if (rewardInsert) {
                    rewardInsert.hide();
                    utils.showLog("隐藏激励插屏组件！");
                }
                else {
                    utils.showLog("RewardInsert组件不存在!");
                }
            }
            else {
                utils.showLog("激励插屏没有创建！");
            }
        }
        ShowCloseBtnBanner(location = BannerLocation.Home, args) {
            if (PlatUtils.IsWechat) {
                if (utils.wechatTool && !utils.wechatTool.isOverMinVersion("2.0.4")) {
                    utils.showLog("当前版本不支持Banner广告!");
                    return;
                }
                if (utils.wechatTool.ServerConfig && (!utils.wechatTool.ServerConfig.isMoveBtn || utils.wechatTool.ServerConfig.isMoveBtn != "true")) {
                    utils.showLog("服务器没有开启移动按钮，不显示广告！");
                    return;
                }
                if (utils.wechatTool && utils.wechatTool.ServerConfig) {
                    if (PlatUtils.IsWechat) {
                        let locationTmp = location;
                        let params = {
                            adUnitId: utils.config.wechatconfig.getBannerId(locationTmp),
                            style: {
                                left: 0,
                                width: 300,
                                top: 0
                            }
                        };
                        if (this._oldBannerLocation != locationTmp && this._curBannerAd) {
                            this._curBannerAd.destroy();
                            this._oldBannerLocation = locationTmp;
                        }
                        let curBannerAd = this.wx.createBannerAd(params);
                        if (curBannerAd) {
                            curBannerAd.onError((err) => {
                                utils.showLog("广告条加载失败! ", JSON.stringify(err));
                                if (curBannerAd) {
                                    curBannerAd.destroy();
                                }
                            });
                            let self = this;
                            curBannerAd.onLoad(() => {
                                curBannerAd.show().then(() => {
                                    let old = self._curBannerAd;
                                    if (old) {
                                        old.destroy();
                                    }
                                    self._curBannerAd = curBannerAd;
                                    let closeBtn = args.closeBtn;
                                    if (!closeBtn) {
                                        return;
                                    }
                                    let winHeight = cc.winSize.height;
                                    var adY = self.getBannerAdHeight();
                                    utils.showLog('utils - adY:', adY);
                                    if (adY > 0) {
                                        closeBtn.y = -(winHeight / 2 - adY) + closeBtn.height;
                                        utils.showLog("btnClose.y", closeBtn.y);
                                    }
                                    utils.showLog("关闭按钮---Banner广告显示成功!");
                                }).catch((err) => {
                                    utils.showLog("Banner广告出错", JSON.stringify(err));
                                    if (curBannerAd) {
                                        curBannerAd.destroy();
                                    }
                                });
                            });
                            curBannerAd.onResize((res) => {
                                curBannerAd.style.width = utils.wechatTool.getSystemInfo().screenWidth * 0.6;
                                curBannerAd.style.left = (utils.wechatTool.getSystemInfo().screenWidth - res.width) * 0.5;
                                curBannerAd.style.top = utils.wechatTool.getSystemInfo().screenHeight - res.height;
                            });
                        }
                        else {
                            utils.showLog("广告条创建失败!");
                        }
                    }
                }
                else {
                    utils.showLog("服务器配置数据未初始化!");
                }
            }
        }
        canShowCrossWidget6() {
            if (PlatUtils.IsWechat) {
                if (utils.isSupportnavigateToMiniGame()) {
                    return true;
                }
                else {
                    cc.warn("当前平台不支持游戏内跳转，6元素交叉推广组件不显示！");
                    return false;
                }
            }
        }
        showCrossWidget6() {
            if (this.canShowCrossWidget6()) {
                if (utils.config.otherconfig.crossWidget6) {
                    return cc.instantiate(utils.config.otherconfig.crossWidget6);
                }
                else {
                    cc.warn("未找到预制体 CrossWidget6, 请查看CommonUtils组件上是否赋值！");
                }
            }
            return null;
        }
        showStatementAds(data) {
            let result = { "type": 0, "node": null };
            let node = null;
            this.ShowInterstitial();
            if (utils.canShowCrossWidget6()) {
                utils.showLog("服务器配置显示6个互推组件");
                node = utils.showCrossWidget6({ top: data });
                result.type = 1;
                result.node = node;
                return result;
            }
            return result;
        }
        getBannerAdHeight() {
            if (this._curBannerAd) {
                let i = this._curBannerAd.style.realHeight * 2;
                if (i === null || i === undefined || isNaN(i)) {
                    return 0;
                }
                else {
                    return i;
                }
            }
            return 0;
        }
    }

    class AdAgentqq extends AdAgent {
        constructor() {
            super(...arguments);
            this._sysData = null;
            this._curBannerAd = null;
            this._videoAd = null;
            this._insertAd = null;
            this._oldAd = null;
            this._appBox = null;
            this.qq = Laya.Browser.window.wx;
            this._videoCallback = null;
            this._isVideoLoaded = false;
            this._isVideoShow = false;
            this._bannerShow = false;
            this._bannerSizePercent = 0.5;
            this._bannerBottom = 0;
            this._oldBannerLocation = BannerLocation.None;
            this._curBannerHeight = 240;
            this._cur_level = null;
            this._moveBtn = null;
            this._showBannerTimerId = 0;
            this._isShow = false;
            this._blockAd = null;
        }
        Init() {
            if (PlatUtils.IsQQ) {
                this._sysData = utils.Tool_QQ.getSystemInfo();
                utils.registerServerInitEvent(() => {
                    this._initVideoAd();
                }, this);
            }
        }
        get ServerConfig() {
            return utils.Tool_QQ.ServerConfig;
        }
        _initVideoAd() {
            if (!this._videoAd) {
                utils.showLog("初始化视频!");
                if (!utils.config.qqconfig.videoId) {
                    utils.showLog("视频ID配置错误!");
                    if (this._videoCallback) {
                        this._videoCallback(false, "暂无视频广告!");
                        this._videoCallback = null;
                    }
                    return;
                }
                utils.showLog("视频广告ID:", utils.config.qqconfig.videoId.trim());
                this._videoAd = this.qq.createRewardedVideoAd({
                    adUnitId: utils.config.qqconfig.videoId
                });
                if (this._videoAd) {
                    utils.showLog("初始化注册视频回调!");
                    this._videoAd.onLoad(() => {
                        utils.showLog("激励视频加载成功");
                        this._isVideoLoaded = true;
                        if (this._isVideoShow) {
                            this._videoAd.show().then(() => {
                            }).catch(() => {
                                utils.showLog("视频播放失败！");
                                if (this._videoCallback) {
                                    this._videoCallback("暂无视频广告!");
                                    this._videoCallback = null;
                                }
                            });
                        }
                    });
                    this._videoAd.onError((err) => {
                        utils.showLog("激励视频加载失败!", err.code, err.msg);
                        this._isVideoLoaded = false;
                        if (this._videoCallback) {
                            this._videoCallback(false, "暂无视频广告!");
                            this._videoCallback = null;
                        }
                    });
                    this._videoAd.onClose((res) => {
                        this._isVideoShow = false;
                        if (res && res.isEnded || res === undefined) {
                            utils.showLog('激励视频广告完成，发放奖励');
                            if (this._videoCallback) {
                                this._videoCallback(true, "");
                                this._videoCallback = null;
                            }
                        }
                        else {
                            utils.showLog('激励视频广告取消关闭，不发放奖励');
                            if (this._videoCallback) {
                                this._videoCallback(false, "观看完视频才能获得奖励!");
                                this._videoCallback = null;
                            }
                        }
                    });
                }
                else {
                    utils.showLog("激励视频初始化失败!");
                    if (this._videoCallback) {
                        this._videoCallback(false, "暂无视频广告!");
                        this._videoCallback = null;
                    }
                }
            }
        }
        _createBanner(location, args = null) {
            if (PlatUtils.IsQQ) {
                let argsTmp = args;
                this._bannerShow = false;
                if (argsTmp && argsTmp.width) {
                    this._bannerSizePercent = argsTmp.width < 0 ? 0 : argsTmp.width;
                    this._bannerSizePercent = argsTmp.width > 1 ? 1 : this._bannerSizePercent;
                }
                if (argsTmp && argsTmp.bottom) {
                    this._bannerBottom = argsTmp.bottom / this._sysData.pixelRatio;
                    this._bannerBottom = this._bannerBottom < 0 ? 0 : this._bannerBottom;
                    this._bannerBottom = this._bannerBottom > this._sysData.screenHeight ? this._sysData.screenHeight : this._bannerBottom;
                }
                let width = 300;
                let height = 72;
                let left = (this._sysData.screenWidth - width) / 2;
                let top = this._sysData.screenHeight - height - this._bannerBottom;
                let params = {
                    adUnitId: utils.config.qqconfig.bannerId,
                    style: {
                        left: left,
                        width: width,
                        top: top,
                        height: height,
                    }
                };
                let bannerAd = null;
                let oldBannerAd = this._curBannerAd;
                bannerAd = this.qq.createBannerAd(params);
                if (bannerAd) {
                    bannerAd.onError((err) => {
                        utils.showLog("广告条加载失败! ", JSON.stringify(err));
                        this._bannerShow = false;
                    });
                    bannerAd.onLoad(() => {
                        if (this._bannerShow) {
                            return;
                        }
                        this._bannerShow = true;
                        bannerAd.show().then(() => {
                            utils.showLog("Banner广告显示成功!");
                            if (this.ServerConfig.banner_move_btn_interval && this._cur_level && this._cur_level % this.ServerConfig.banner_move_btn_interval == 0) {
                                this.moveBtnToBannerTop();
                            }
                            if (oldBannerAd) {
                                oldBannerAd.destroy();
                            }
                            this._curBannerAd = bannerAd;
                        }).catch((err) => {
                            utils.showLog("Banner广告出错", JSON.stringify(err));
                            this._bannerShow = false;
                        });
                    });
                    bannerAd.onResize((res) => {
                        if (res) {
                            this._curBannerHeight = res.height * this._sysData.pixelRatio;
                        }
                    });
                }
            }
        }
        _showBannerTimer(location, args) {
            let locationTmp = location;
            let argsTmp = args;
            utils.showLog(`显示Banner广告xxx！location:${locationTmp}; args:${JSON.stringify(argsTmp)}; 间隔时间:${utils.Tool_QQ.ServerConfig.refresh_ad_time}`);
            let banner_delay_time = this.ServerConfig.banner_delay_time ? this.ServerConfig.banner_delay_time : 0;
            utils.showLog(`延迟${banner_delay_time}秒显示banner`);
            if (!this.ServerConfig.banner_move_btn_interval || !this._cur_level || this._cur_level % this.ServerConfig.banner_move_btn_interval != 0) {
                utils.showLog("当前关卡不做延迟移动！");
                this.moveBtnToBannerTop();
            }
            this._showBannerTimerId = setTimeout(() => {
                this._createBanner(locationTmp, argsTmp);
            }, banner_delay_time * 1000);
        }
        ShowBanner(location = BannerLocation.Home, args = null) {
            if (PlatUtils.IsQQ) {
                if (utils.Tool_QQ.ServerConfig) {
                    let locationTmp = location;
                    let argsTmp = args;
                    this._moveBtn = args ? args.moveBtn : null;
                    this._cur_level = args ? args.cur_level : null;
                    this._showBannerTimer(locationTmp, argsTmp);
                }
                else {
                    utils.showLog("服务器配置数据未初始化!");
                }
            }
        }
        HideBanner(location = BannerLocation.Home) {
            if (PlatUtils.IsQQ) {
                utils.showLog("隐藏广告条");
                this._bannerShow = false;
                if (this._curBannerAd) {
                    this._curBannerAd.hide();
                    clearInterval(this._showBannerTimerId);
                }
            }
        }
        ShowInterstitial(location = null) {
            if (PlatUtils.IsQQ) {
                if (!utils.Tool_QQ.isOverMinVersion("1.12.0")) {
                    utils.showLog("当前版本" + utils.Tool_QQ._sysInfo.SDKVersion + "不支持插屏广告和盒子广告!");
                    return;
                }
                if (this.ServerConfig) {
                    if (this.ServerConfig.intersititial_first_ad) {
                        utils.showLog(`服务器插屏优先级>>>${this.ServerConfig.intersititial_first_ad}`);
                        switch (this.ServerConfig.intersititial_first_ad) {
                            case "default":
                                utils.delayCall(this._createInsterstitial.bind(this), this.ServerConfig.intersititia_delay_show_time || 0);
                                break;
                            case "box":
                                if (!utils.Tool_QQ.isOverMinVersion("1.7.1")) {
                                    utils.showLog("当前版本" + utils.Tool_QQ._sysInfo.SDKVersion + "不支持盒子广告,显示插屏");
                                    utils.delayCall(this._createInsterstitial.bind(this), this.ServerConfig.intersititia_delay_show_time || 0);
                                    return;
                                }
                                utils.delayCall(this.ShowAppBox.bind(this), this.ServerConfig.intersititia_delay_show_time || 0);
                                break;
                            case "onlydefault":
                                utils.delayCall(this._createInsterstitial.bind(this), this.ServerConfig.intersititia_delay_show_time || 0);
                                break;
                        }
                    }
                    else {
                        utils.showLog("服务器未配置优先级，显示默认插屏");
                        utils.delayCall(this._createInsterstitial.bind(this), this.ServerConfig.intersititia_delay_show_time || 0);
                    }
                }
            }
        }
        _createInsterstitial() {
            if (!this._insertAd) {
                this._insertAd = this.qq.createInterstitialAd({ adUnitId: utils.config.qqconfig.insertId });
                this._insertAd.onError((err) => {
                    switch (err.errCode) {
                        case 2001:
                            console.log("小程序启动一定时间内不允许展示插屏广告");
                            break;
                        case 2002:
                            console.log("距离小程序插屏广告或者激励视频广告上次播放时间间隔不足，不允许展示插屏广告");
                            break;
                        case 2003:
                            console.log("当前正在播放激励视频广告或者插屏广告，不允许再次展示插屏广告");
                            break;
                        case 2004:
                            console.log("该项错误不是开发者的异常情况，或因小程序页面切换导致广告渲染失败");
                            break;
                        case 2005:
                            console.log("插屏广告实例不允许跨页面调用");
                            break;
                        default:
                            utils.showLog("插屏加载失败! ", JSON.stringify(err));
                            console.log("插屏加载失败! ", JSON.stringify(err));
                            break;
                    }
                    if (this.ServerConfig.intersititial_first_ad && this.ServerConfig.intersititial_first_ad == "default") {
                        utils.showLog("优先显示的是插屏广告，备用显示插屏");
                        this.ShowAppBox();
                    }
                });
                this._insertAd.onClose(() => {
                    utils.showLog("插屏广告关闭成功！");
                });
            }
            if (this._insertAd) {
                this._insertAd.load().then(() => {
                    utils.showLog("插屏加载成功! ");
                    this._insertAd.show().then(() => {
                        utils.showLog("插屏广告显示成功!");
                    }).catch((err) => {
                        utils.showLog("插屏广告出错" + JSON.stringify(err));
                    });
                }).catch(() => {
                    utils.showLog("插屏加载失败! ");
                });
                if (!this._isShow) {
                    this._insertAd.show().then(() => {
                        utils.showLog("插屏广告显示成功!");
                    }).catch((err) => {
                        utils.showLog("插屏广告出错" + JSON.stringify(err));
                    });
                    this._isShow = true;
                }
            }
        }
        ShowVideo(callback) {
            if (PlatUtils.IsQQ) {
                this._videoCallback = callback;
                this._isVideoShow = true;
                if (!this._videoAd) {
                    this._initVideoAd();
                }
                else {
                    this._videoAd.show().then(() => {
                        utils.showLog("视频显示成功！");
                    }).catch((err) => {
                        utils.showLog("视频未加载！");
                        this._videoAd.load();
                    });
                }
            }
        }
        ShowAppBox(isMoreGame) {
            if (PlatUtils.IsQQ) {
                if (PlatUtils.IsQQ) {
                    if (!utils.Tool_QQ.isOverMinVersion("1.7.1")) {
                        utils.showLog("当前版本" + utils.Tool_QQ._sysInfo.SDKVersion + "不支持游戏盒子!");
                        return;
                    }
                }
                if (this._appBox) {
                    this._appBox.destroy().then(() => {
                        utils.showLog("游戏盒子id为:", utils.config.qqconfig.boxId);
                        this._appBox = this.qq.createAppBox({
                            adUnitId: utils.config.qqconfig.boxId
                        });
                        this._appBox.load().then(() => {
                            utils.showLog("游戏盒子加载成功！");
                            this._appBox.show().then(() => {
                                utils.showLog("游戏盒子显示成功！");
                            }).catch((err) => {
                                utils.showLog("游戏盒子未加载！#err=", JSON.stringify(err));
                            });
                        }).catch((err) => {
                            utils.showLog("游戏盒子加载失败！ #err=", JSON.stringify(err));
                            if (!isMoreGame && this.ServerConfig.intersititial_first_ad && this.ServerConfig.intersititial_first_ad == "box") {
                                utils.showLog("优先显示的是盒子广告，备用显示插屏");
                                this._createInsterstitial();
                            }
                        });
                    }).catch((err) => {
                        utils.showLog("游戏盒子销毁失败！ #err=", JSON.stringify(err));
                    });
                    ;
                }
                else {
                    utils.showLog("游戏盒子id为:", utils.config.qqconfig.boxId);
                    this._appBox = this.qq.createAppBox({
                        adUnitId: utils.config.qqconfig.boxId
                    });
                    this._appBox.load().then(() => {
                        utils.showLog("游戏盒子加载成功！");
                        this._appBox.show().then(() => {
                            utils.showLog("游戏盒子显示成功！");
                        }).catch((err) => {
                            utils.showLog("游戏盒子未加载！#err=", JSON.stringify(err));
                        });
                    }).catch((err) => {
                        utils.showLog("游戏盒子加载失败！ #err=", JSON.stringify(err));
                        if (!isMoreGame && this.ServerConfig.intersititial_first_ad && this.ServerConfig.intersititial_first_ad == "box") {
                            utils.showLog("优先显示的是盒子广告，备用显示插屏");
                            this._createInsterstitial();
                        }
                    });
                }
            }
        }
        HideAppbox() {
            if (PlatUtils.IsQQ) {
                if (this._appBox) {
                    this._appBox.destroy().then(() => {
                        utils.showLog("游戏盒子销毁成功！");
                    }).catch(() => {
                        cc.warn("游戏盒子销毁失败!");
                    });
                }
            }
        }
        showBlockAd(parme) {
            utils.showLog("showBlockAd............");
            if (!utils.config.qqconfig.bannerBoxId) {
                utils.showLog("积木广告ID不存在");
                return;
            }
            if (this.ServerConfig.is_banner_box == "false") {
                utils.showLog("服务器配置积木广告不展示！");
                return;
            }
            if (this._blockAd) {
                this._blockAd.offLoad();
                this._blockAd.offResize();
                this._blockAd.offError();
                this._blockAd.destroy();
            }
            if (PlatUtils.IsIOS && this._sysData.screenHeight < 736) {
                let top = 16;
                let left = 16;
                let width = 65;
                if (parme.top) {
                    top = parme.top;
                }
                else {
                    top = this._sysData.screenHeight - 65.5 - parme.bottom;
                }
                this._blockAd = this.qq.createBlockAd({
                    adUnitId: utils.config.qqconfig.bannerBoxId,
                    style: {
                        left: left,
                        top: top
                    },
                    size: parme.showNum ? parme.showNum : 5,
                    orientation: "landscape"
                });
                this._blockAd.onResize((res) => {
                    this._blockAd.offResize();
                    utils.showLog("this._sysData" + JSON.stringify(this._sysData));
                    utils.showLog("onresize >>" + JSON.stringify(res));
                    this._blockAd.show().then(() => {
                        utils.showLog("显示成功！");
                    }).catch((res) => {
                        utils.showLog("显示异常" + JSON.stringify(res));
                    });
                    if (parme.showNum == 1) {
                        width = 0;
                    }
                    else {
                        width = res.width;
                    }
                    if (parme.left) {
                        left = width + parme.left;
                    }
                    else if (parme.right) {
                        left = this._sysData.screenWidth - res.width - parme.right;
                    }
                    else {
                        left = (this._sysData.screenWidth - width) / 2;
                    }
                    this._blockAd.style.left = left;
                    utils.showLog("onresize end>>" + this._blockAd.style.top + "<<" + this._blockAd.style.left + "<<");
                });
            }
            else {
                this._blockAd = this.qq.createBlockAd({
                    adUnitId: utils.config.qqconfig.bannerBoxId,
                    style: {
                        left: 16,
                        top: 16
                    },
                    size: parme.showNum ? parme.showNum : 5,
                    orientation: "landscape"
                });
                this._blockAd.onResize((res) => {
                    this._blockAd.offResize();
                    utils.showLog("this._sysData" + JSON.stringify(this._sysData));
                    utils.showLog("onresize >>" + JSON.stringify(res));
                    if (parme) {
                        utils.showLog("parme:" + JSON.stringify(parme));
                        if (parme.top) {
                            utils.showLog("积木广告TOP位置：" + parme.top);
                            this._blockAd.style.top = parme.top;
                        }
                        else if (parme.bottom) {
                            let bottom = this._sysData.screenHeight - res.height;
                            this._blockAd.style.top = bottom - parme.bottom;
                        }
                        if (parme.left) {
                            this._blockAd.style.left = parme.left;
                        }
                        else if (parme.right) {
                            this._blockAd.style.left = this._sysData.screenWidth - res.width - parme.right;
                        }
                        else {
                            this._blockAd.style.left = (this._sysData.screenWidth - res.width) / 2;
                        }
                    }
                    else {
                        this._blockAd.style.top = this._sysData.screenHeight - res.height;
                        this._blockAd.style.left = (this._sysData.screenWidth - res.width) / 2;
                    }
                    this._blockAd.show().then(() => {
                        utils.showLog("显示成功！");
                    }).catch((res) => {
                        utils.showLog("显示异常" + JSON.stringify(res));
                    });
                    utils.showLog("onresize end>>" + this._blockAd.style.top + "<<" + this._blockAd.style.left + "<<");
                });
            }
            this._blockAd.onLoad(() => {
                utils.showLog("积木广告加载成功！");
            });
            this._blockAd.onError((res) => {
                utils.showLog("积木广告加载失败！" + res.errMsg + ">>" + res.errCode);
            });
        }
        hideBlockAd() {
            utils.showLog("隐藏积木广告");
            if (this._blockAd)
                this._blockAd.hide();
        }
        moveBtnToBannerTop() {
            utils.showLog("moveBtnToBannerTop >>>>>>>>>.");
            if (this.ServerConfig && this._moveBtn && cc.isValid(this._moveBtn)) {
                let moveBtnTime = 0;
                let btn = this._moveBtn;
                if (this.ServerConfig.banner_move_btn_interval && this._cur_level && this._cur_level % this.ServerConfig.banner_move_btn_interval == 0) {
                    if (this.ServerConfig.banner_move_btn_time) {
                        moveBtnTime = this.ServerConfig.banner_move_btn_time;
                    }
                }
                utils.showLog(moveBtnTime == 0 ? "按钮直接显示在banner上面" : `按钮居底部且${moveBtnTime}秒后移动`);
                setTimeout(() => {
                    if (btn && cc.isValid(btn)) {
                        if (this._sysData.screenHeight < 600) {
                            btn.bottom = 250;
                        }
                        else {
                            btn.bottom = 220;
                        }
                    }
                }, moveBtnTime * 1000);
            }
        }
    }

    class AdAgentBaidu extends AdAgent {
        constructor() {
            super(...arguments);
            this._sysData = null;
            this._baiduVersion = "";
            this._recorder = null;
            this._bannerAd = null;
            this._videoAd = null;
            this._videoCallback = null;
            this._isVideoShow = false;
            this._isVideoLoaded = false;
            this.swan = Laya.Browser.window.swan;
            this._bannerSizePercent = 0.8;
            this._bannerBottom = 0;
        }
        Init() {
            if (PlatUtils.IsBaidu) {
                this._sysData = this.swan.getSystemInfoSync();
                this._initVideoAd();
            }
        }
        canShowCrossWidget6() {
            if (PlatUtils.IsWechat) {
                if (utils.isSupportnavigateToMiniGame()) {
                    return true;
                }
                else {
                    cc.warn("当前平台不支持游戏内跳转，6元素交叉推广组件不显示！");
                    return false;
                }
            }
        }
        showCrossWidget6() {
            if (this.canShowCrossWidget6()) {
                if (utils.config.otherconfig.crossWidget6) {
                    return cc.instantiate(utils.config.otherconfig.crossWidget6);
                }
                else {
                    cc.warn("未找到预制体 CrossWidget6, 请查看CommonUtils组件上是否赋值！");
                }
            }
            return null;
        }
        showStatementAds(data) {
            let result = { "type": 0, "node": null };
            this.ShowInterstitial();
            return result;
        }
        ShowBanner(location = BannerLocation.Home, args = null) {
            if (PlatUtils.IsBaidu) {
                let argsTmp = args;
                if (argsTmp && argsTmp.width) {
                    this._bannerSizePercent = ((argsTmp.width <= 0.8) ? 0.8 : argsTmp.width);
                    this._bannerSizePercent = ((argsTmp.width > 1) ? 1 : this._bannerSizePercent);
                }
                if (argsTmp && argsTmp.bottom) {
                    this._bannerBottom = argsTmp.bottom / this._sysData.pixelRatio;
                    this._bannerBottom = ((this._bannerBottom < 0) ? 0 : this._bannerBottom);
                    this._bannerBottom = ((this._bannerBottom > this._sysData.screenHeight) ? this._sysData.screenHeight : this._bannerBottom);
                }
                if (utils.config.baiduconfig
                    && utils.config.baiduconfig.bannerId
                    && utils.config.baiduconfig.appSID) {
                    let left = (this._sysData.screenWidth - this._sysData.screenWidth * this._bannerSizePercent) / 2;
                    let width = this._sysData.screenWidth * this._bannerSizePercent;
                    let bannerOpts = {
                        adUnitId: utils.config.baiduconfig.bannerId,
                        appSid: utils.config.baiduconfig.appSID,
                        style: {
                            top: 0,
                            left: left,
                            width: width
                        }
                    };
                    let bannerAd = null;
                    let oldBannerAd = this._bannerAd;
                    let onLoadFunc = () => {
                        if (bannerAd) {
                            bannerAd.show().then(() => {
                                this._bannerAd = bannerAd;
                                if (oldBannerAd) {
                                    oldBannerAd.destroy();
                                    oldBannerAd.offLoad(onLoadFunc);
                                    oldBannerAd.offError(onErrorFunc);
                                }
                                utils.showLog("Banner显示成功！");
                            }).catch(() => {
                                utils.showLog("Banner显示出错!");
                            });
                        }
                    };
                    let onErrorFunc = (err) => {
                        if (err) {
                            utils.showLog("Banner 广告出错 : ", err.errCode, err.errMsg);
                        }
                    };
                    let onResizeFunc = (res) => {
                        bannerAd.style.width = width;
                        bannerAd.style.top = this._sysData.screenHeight - res.height - this._bannerBottom;
                    };
                    bannerAd = this.swan.createBannerAd(bannerOpts);
                    if (bannerAd) {
                        bannerAd.onLoad(onLoadFunc);
                        bannerAd.onError(onErrorFunc);
                        bannerAd.onResize(onResizeFunc);
                        bannerAd.style.width = width + 1;
                    }
                }
                else {
                    cc.warn("百度广告配置文件出错!");
                }
            }
        }
        HideBanner(location = BannerLocation.Home) {
            if (PlatUtils.IsBaidu) {
                if (this._bannerAd) {
                    this._bannerAd.hide();
                }
            }
        }
        ShowInterstitial(location = BannerLocation.Home) { }
        ShowVideo(callback) {
            if (PlatUtils.IsBaidu) {
                if (this._videoCallback) {
                    return;
                }
                else {
                    this._videoCallback = callback;
                }
                this._isVideoShow = true;
                if (!this._videoAd) {
                    this._initVideoAd();
                }
                else {
                    if (this._isVideoLoaded) {
                        this._videoAd.show().then(() => {
                            utils.showLog("视频显示成功!");
                            this._isVideoLoaded = false;
                        }).catch((err) => {
                        });
                    }
                    else {
                        this._videoAd.load().catch((err) => {
                        });
                    }
                }
            }
        }
        _initVideoAd() {
            if (!this._videoAd) {
                if (!(utils.config.baiduconfig
                    && utils.config.baiduconfig.appSID
                    && utils.config.baiduconfig.videoId)) {
                    utils.showLog("视频ID配置不正确！");
                    if (this._videoCallback) {
                        this._videoCallback(false, "暂无视频广告!");
                        this._videoCallback = null;
                    }
                    return;
                }
                let videoOpts = {
                    adUnitId: utils.config.baiduconfig.videoId,
                    appSid: utils.config.baiduconfig.appSID
                };
                utils.showLog("视频广告参数:", JSON.stringify(videoOpts));
                this._videoAd = this.swan.createRewardedVideoAd(videoOpts);
                if (this._videoAd) {
                    this._videoAd.onLoad(() => {
                        utils.showLog("视频加载成功");
                        this._isVideoLoaded = true;
                        if (this._isVideoShow) {
                            this._videoAd.show().then(() => {
                                this._isVideoLoaded = false;
                            }).catch(() => {
                                utils.showLog("视频播放失败！");
                            });
                        }
                    });
                    this._videoAd.onClose((res) => {
                        this._isVideoShow = false;
                        if (res && res.isEnded) {
                            utils.showLog("正常播放结束，可以下发游戏奖励");
                            if (this._videoCallback) {
                                this._videoCallback(true, "");
                                this._videoCallback = null;
                            }
                        }
                        else {
                            utils.showLog("播放中途退出，不下发游戏奖励");
                            if (this._videoCallback) {
                                this._videoCallback(false, "观看完视频才能获得奖励!");
                                this._videoCallback = null;
                            }
                        }
                    });
                    this._videoAd.onError((err) => {
                        utils.showLog("激励视频异常!", err.errCode);
                        this._isVideoLoaded = false;
                        if (this._videoCallback) {
                            this._videoCallback(false, "暂无视频广告!");
                            this._videoCallback = null;
                        }
                    });
                }
            }
        }
    }

    class AdAgentDouyin extends AdAgent {
        constructor() {
            super(...arguments);
            this._bannerAd = null;
            this._videoAd = null;
            this._sysData = null;
            this._bannerAds = [];
            this._isBannerShow = false;
            this.tt = Laya.Browser.window.tt;
            this._bannerBottom = 0;
            this._lastShowInterstitialTime = 0;
            this.interstitialAd = null;
            this._videoCallback = null;
            this._isVideoLoaded = false;
            this._isVideoShow = false;
        }
        Init() {
            if (PlatUtils.IsDouyin) {
                this._sysData = utils.Tool_Douyin._sysInfo;
            }
        }
        ShowBanner(location, args = null) {
            if (PlatUtils.IsDouyin) {
                if (utils.isShowRecommondGamesBanner() && utils.Tool_Douyin.isShowMoreGamesModal()) {
                    utils.showRecommendGamesBanner();
                    utils.showLog(`服务器配置展示自定义banner`);
                    return;
                }
                if (utils.Tool_Douyin.isNewsArticleLite) {
                    utils.showLog("头条极速版不显示Banner广告");
                    return;
                }
                if (this._isConfigValid()) {
                    let argsTmp = args;
                    let bannerSizePercent = 1;
                    if (argsTmp && argsTmp.width) {
                        bannerSizePercent = ((argsTmp.width < 0) ? 0.1 : argsTmp.width);
                        bannerSizePercent = ((argsTmp.width > 1) ? 1 : bannerSizePercent);
                    }
                    if (argsTmp && argsTmp.bottom) {
                        this._bannerBottom = argsTmp.bottom / this._sysData.pixelRatio;
                        this._bannerBottom = ((this._bannerBottom < 0) ? 0 : this._bannerBottom);
                        this._bannerBottom = ((this._bannerBottom > this._sysData.screenHeight) ? this._sysData.screenHeight : this._bannerBottom);
                    }
                    let targetBannerAdWidth = 60;
                    let left = (this._sysData.screenWidth - targetBannerAdWidth) * 0.5;
                    let top = this._sysData.screenHeight - (targetBannerAdWidth / 16 * 9 - this._bannerBottom);
                    let bannerId = utils.config.douyinconfig.bannerId;
                    utils.showLog("显示Banner广告: bannerId=", bannerId);
                    let bannerAd = this.tt.createBannerAd({
                        adUnitId: bannerId,
                        style: {
                            width: targetBannerAdWidth,
                            left: left,
                            top: top
                        }
                    });
                    if (bannerAd) {
                        let self = this;
                        bannerAd.onLoad(function () {
                            bannerAd.show().then(() => {
                                utils.showLog('广告显示成功');
                                for (let i = 0; i < self._bannerAds.length; i++) {
                                    if (self._bannerAds[i] != bannerAd && self._bannerAds[i] != null) {
                                        self._bannerAds[i].destroy();
                                    }
                                }
                                self._bannerAds.length = 0;
                                self._bannerAds.push(bannerAd);
                            }).catch(err => {
                                utils.showLog('广告组件出现问题 ', err.errCode, err.errMsg);
                            });
                        });
                        bannerAd.onError((err) => {
                            if (err) {
                                utils.showLog("Banner 广告出错: errCode:", err.errCode, " errMsg:", err.errMsg);
                            }
                        });
                        bannerAd.onResize((res) => {
                            if (targetBannerAdWidth != res.width) {
                                bannerAd.style.top = this._sysData.screenHeight - res.height - this._bannerBottom;
                                bannerAd.style.left = (this._sysData.screenWidth - res.width) * 0.5;
                            }
                        });
                        this._bannerAds.push(bannerAd);
                    }
                }
                else {
                    utils.showLog("抖音小游戏配置文件出错!");
                }
            }
        }
        HideBanner(location) {
            if (PlatUtils.IsDouyin) {
                for (let i = 0; i < this._bannerAds.length; i++) {
                    if (this._bannerAds[i] != null) {
                        console.log("_bannerAds....", JSON.stringify(this._bannerAds[i]));
                        this._bannerAds[i].destroy();
                    }
                }
                this._bannerAds.length = 0;
            }
        }
        checkCanShowInterstitial() {
            if (utils.Tool_Douyin.isOverMiniVersion("1.71.0")) {
                return true;
            }
            return false;
        }
        ShowInterstitial(location) {
            if (PlatUtils.IsDouyin) {
                if (this.checkCanShowInterstitial()) {
                    let curTime = new Date().getTime();
                    let interval = (curTime - this._lastShowInterstitialTime) / 1000;
                    if (interval < 30) {
                        utils.showLog("距离插屏广告或者激励视频广告上次播放时间间隔不足30秒");
                        return;
                    }
                    this._lastShowInterstitialTime = curTime;
                    utils.delayCall(this._createMiniGameInsertAd.bind(this), utils.getServelCofig().intersititia_delay_show_time || 0);
                }
                else {
                    utils.showLog("当前客户端版本不支持插屏！");
                }
            }
        }
        _createMiniGameInsertAd() {
            try {
                if (!utils.config.douyinconfig.insertId) {
                    utils.showLog("插屏ID配置有误");
                    return;
                }
                if (this.interstitialAd) {
                    this.interstitialAd.destroy();
                    this.interstitialAd = null;
                }
                this.interstitialAd = this.tt.createInterstitialAd({
                    adUnitId: utils.config.douyinconfig.insertId
                });
                utils.showLog(utils.config.douyinconfig.insertId);
                this.interstitialAd.load().then(() => {
                    this.interstitialAd.show();
                }).catch(err => {
                    utils.showLog(err);
                    utils.showLog("err.errCode:" + err.errCode);
                    switch (err.errCode) {
                        case 2001:
                            utils.showLog("小程序启动一定时间内不允许展示插屏广告");
                            break;
                        case 2002:
                            utils.showLog("距离小程序插屏广告或者激励视频广告上次播放时间间隔不足，不允许展示插屏广告");
                            break;
                        case 2003:
                            utils.showLog("当前正在播放激励视频广告或者插屏广告，不允许再次展示插屏广告");
                            break;
                        case 2004:
                            utils.showLog("该项错误不是开发者的异常情况，或因小程序页面切换导致广告渲染失败");
                            break;
                        case 2005:
                            utils.showLog("插屏广告实例不允许跨页面调用");
                            break;
                        default:
                            utils.showLog("插屏广告展示失败");
                            break;
                    }
                });
            }
            catch (error) {
                utils.showLog(error);
            }
        }
        ShowVideo(callback) {
            if (PlatUtils.IsDouyin) {
                this._videoCallback = callback;
                this._isVideoShow = true;
                if (utils.Tool_Douyin.ServerConfig) {
                    let posId = utils.config.douyinconfig.videoId.trim();
                    utils.showLog("video广告ID:" + posId);
                    if (!this._videoAd) {
                        this._videoAd = tt.createRewardedVideoAd({
                            adUnitId: posId
                        });
                        if (this._videoAd) {
                            utils.showLog("初始化注册视频回调!");
                            this._videoAd.onError((err) => {
                                utils.showLog(`激励视频出错: ${err.code, err.msg}`);
                                this._isVideoLoaded = false;
                                if (this._videoCallback) {
                                    this._videoCallback(false, "暂无视频广告!");
                                    this._videoCallback = null;
                                }
                            });
                            this._videoAd.onClose((res) => {
                                this._isVideoShow = false;
                                this._isVideoLoaded = false;
                                if (res.isEnded) {
                                    utils.showLog('激励视频广告完成，发放奖励');
                                    if (this._videoCallback) {
                                        this._videoCallback(true, "");
                                        this._videoCallback = null;
                                    }
                                }
                                else {
                                    utils.showLog('激励视频广告取消关闭，不发放奖励');
                                    if (this._videoCallback) {
                                        this._videoCallback(false, "观看完视频才能获得奖励!");
                                        this._videoCallback = null;
                                    }
                                }
                            });
                        }
                        else {
                            utils.showLog("videoAd 对象创建失败，播放失败!");
                            if (this._videoCallback) {
                                this._videoCallback(false, "暂无视频广告!");
                                this._videoCallback = null;
                            }
                        }
                    }
                    this._videoAd.load().then(() => {
                        utils.showLog("激励视频加载成功");
                        this._videoAd.show().then(() => {
                            utils.showLog("激励视频播放成功!");
                        }).catch(() => {
                            utils.showLog("激励视频播放失败!");
                            if (this._videoCallback) {
                                this._videoCallback(false, "视频播放失败,请稍后再试!");
                                this._videoCallback = null;
                            }
                        });
                    }).catch(() => {
                        utils.showLog("再次播放视频资源加载失败!");
                        if (this._videoCallback) {
                            this._videoCallback(false, "视频播放失败,请稍后再试!");
                            this._videoCallback = null;
                        }
                    });
                }
            }
            else {
                utils.showLog("获取配置失败，视频无法播放!");
                if (this._videoCallback) {
                    this._videoCallback(false, "暂无视频广告!");
                    this._videoCallback = null;
                }
            }
        }
        _initVideoAd() {
            if (!this._videoAd) {
                if (utils.Tool_Douyin.ServerConfig) {
                    let posId = utils.config.douyinconfig.videoId.trim();
                    utils.showLog("video广告ID:" + posId);
                    this._videoAd = tt.createRewardedVideoAd({
                        adUnitId: posId
                    });
                    if (this._videoAd) {
                        utils.showLog("初始化注册视频回调!");
                        this._videoAd.onLoad(() => {
                            utils.showLog("激励视频加载成功");
                            this._isVideoLoaded = true;
                            if (this._isVideoShow) {
                                this._videoAd.show().then(() => {
                                    utils.showLog("激励视频播放成功!");
                                }).catch(() => {
                                    utils.showLog("激励视频播放失败!");
                                    if (this._videoCallback) {
                                        this._videoCallback(false, "视频播放失败,请稍后再试!");
                                        this._videoCallback = null;
                                    }
                                });
                                this._isVideoShow = false;
                            }
                        });
                        this._videoAd.onError((err) => {
                            utils.showLog(`激励视频出错: ${err.code, err.msg}`);
                            this._isVideoLoaded = false;
                            if (this._videoCallback) {
                                this._videoCallback(false, "暂无视频广告!");
                                this._videoCallback = null;
                            }
                        });
                        this._videoAd.onClose((res) => {
                            this._isVideoShow = false;
                            this._isVideoLoaded = false;
                            if (res.isEnded) {
                                utils.showLog('激励视频广告完成，发放奖励');
                                if (this._videoCallback) {
                                    this._videoCallback(true, "");
                                    this._videoCallback = null;
                                }
                            }
                            else {
                                utils.showLog('激励视频广告取消关闭，不发放奖励');
                                if (this._videoCallback) {
                                    this._videoCallback(false, "观看完视频才能获得奖励!");
                                    this._videoCallback = null;
                                }
                            }
                            this._videoAd.load().then(() => {
                                utils.showLog("关闭视频后重新加载视频资源成功！");
                                this._isVideoShow = false;
                                this._isVideoLoaded = true;
                            });
                        });
                    }
                    else {
                        utils.showLog("暂无视频广告!");
                        if (this._videoCallback) {
                            this._videoCallback(false, "暂无视频广告!");
                            this._videoCallback = null;
                        }
                    }
                }
                else {
                    utils.showLog("暂无视频广告!");
                    if (this._videoCallback) {
                        this._videoCallback(false, "暂无视频广告!");
                        this._videoCallback = null;
                    }
                }
            }
        }
        _isConfigValid() {
            if (PlatUtils.IsDouyin) {
                return (utils.config.douyinconfig
                    && utils.config.douyinconfig.appID
                    && utils.config.douyinconfig.bannerId
                    && utils.config.douyinconfig.videoId);
            }
            return false;
        }
    }

    class YZ_NativeInsert extends Laya.Script {
        constructor() {
            super(...arguments);
            this._panel = null;
            this._titleLabel = null;
            this._desLabel = null;
            this._icon = null;
            this._mask = null;
            this.btnDown = null;
            this._closeBtn = null;
            this._img = null;
            this._hideInstallBtn = null;
            this._nativeAd = null;
            this._data = null;
            this._dataDirty = false;
            this.insert_url = "res/common/Textures/NativeAd/";
        }
        get ServerConfig() {
            return utils.getServelCofig();
        }
        onAwake() {
            this._panel = this.owner.getChildByName("Panel");
            this._icon = this._panel.getChildByName("Icon");
            this._img = this._panel.getChildByName("Img");
            this._titleLabel = this._panel.getChildByName("TitleLabel");
            this._desLabel = this._panel.getChildByName("DesLabel");
            this._mask = this.owner.getChildByName("Mask");
            this.btnDown = this._panel.getChildByName("Btn_Download");
            this._closeBtn = this._panel.getChildByName("Btn_Close");
            this._hideInstallBtn = this._panel.getChildByName("Btn_HideInstall");
            this._closeBtn.size(this.ServerConfig.intersititia_close_but_size, this.ServerConfig.intersititia_close_but_size);
            this._hideInstallBtn.size(this.ServerConfig.intersititia_close_but_range, this.ServerConfig.intersititia_close_but_range);
            let Btn_Install = this._panel.getChildByName("Btn_Install");
            let bg = this._panel.getChildByName("bg");
            if (utils.getServelCofig().native_intersititial_bg_img) {
                bg.skin = utils.getServelCofig().native_intersititial_bg_img;
            }
            if (utils.getServelCofig().native_intersititial_btn_img) {
                Btn_Install.skin = utils.getServelCofig().native_intersititial_btn_img;
            }
            let ratio = 1;
            if (cc.winSize) {
                if (cc.winSize.height < cc.winSize.width) {
                    ratio = cc.winSize.width / 1920 * 0.7;
                }
                else {
                    ratio = cc.winSize.width / 1080;
                }
            }
            this._panel.scale(ratio, ratio);
            Btn_Install.on(Laya.Event.CLICK, this, this.onBtnClickHandler);
            this._closeBtn.on(Laya.Event.CLICK, this, this.onBtnClickHandler);
            this.btnDown.on(Laya.Event.CLICK, this, this.onBtnClickHandler);
            this._hideInstallBtn.on(Laya.Event.CLICK, this, this.onBtnClickHandler);
        }
        onEnable() {
        }
        init(nativeAd, data) {
            if (PlatUtils.IsOPPO || PlatUtils.IsVIVO || utils.Tool_Broswer) {
                this._nativeAd = nativeAd;
                this._data = data;
                this._dataDirty = true;
            }
        }
        onUpdate() {
            if (this._data && this._dataDirty) {
                this.hideSelf(true);
                this._dataDirty = false;
                this._updateContent();
            }
            if (!this._data) {
                this.hideSelf();
            }
        }
        hideSelf(isShow = false) {
            this._mask.visible = isShow;
            this._panel.visible = isShow;
            this.owner.mouseEnabled = isShow;
        }
        _updateContent() {
            if (this._data) {
                this._reportAdShow();
                this._hideInstallBtn.alpha = this.ServerConfig.intersititia_close_but_alpha;
                this._titleLabel.text = this._data.title;
                this._desLabel.text = this._data.desc;
                this.btnDown.label = this._data.clickBtnTxt ? this._data.clickBtnTxt : "查看详情";
                let self = this;
                if (this._data.imgUrlList && this._data.imgUrlList.length > 0) {
                    utils.showLog("insert 有图片，优先显示图片");
                    this._titleLabel.visible = true;
                    this._icon.visible = false;
                    this._img.visible = true;
                    this._desLabel.visible = true;
                    this._img.skin = this._data.imgUrlList[0];
                    if (this._data.desc) {
                        this._img.height = 550;
                    }
                    else {
                        this._img.height = 625;
                    }
                }
                else if (PlatUtils.IsOPPO && this._data.iconUrlList && this._data.iconUrlList.length > 0) {
                    utils.showLog("insert 有icon");
                    this._titleLabel.visible = true;
                    this._icon.visible = true;
                    this._img.visible = false;
                    this._desLabel.visible = true;
                    this._icon.skin = this._data.iconUrlList[0];
                }
                else if (PlatUtils.IsVIVO && this._data.icon) {
                    utils.showLog("insert 有图片，有icon");
                    this._titleLabel.visible = true;
                    this._icon.visible = true;
                    this._img.visible = false;
                    this._desLabel.visible = true;
                    this._icon.skin = this._data.icon;
                }
                this._hideInstallBtn.visible = false;
                this._closeBtn.visible = false;
                Laya.timer.once(this.ServerConfig.intersititia_close_delay_time * 1000 || 0, this, () => {
                    this._closeBtn.visible = true;
                    this._hideInstallBtn.visible = true;
                });
            }
        }
        onBtnClickHandler(event, data) {
            switch (event.target.name) {
                case "Btn_Close": {
                    this.hideSelf();
                    break;
                }
                case "Btn_HideInstall":
                    this._reportAdClick();
                    break;
                case "Btn_Install":
                    this._reportAdClick();
                    break;
                case "Btn_Download": {
                    if (utils.getServelCofig().native_intersititial_click_range && utils.getServelCofig().native_intersititial_click_range == 2) {
                        utils.showLog("服务器native_intersititial_click_range配置为2，只能点击安装按钮算安装");
                        return;
                    }
                    this._reportAdClick();
                    break;
                }
            }
        }
        _reportAdShow() {
            if (this._data) {
                utils.showLog("上报原生插屏广告展示! adId:", this._data.adId);
                if (this._nativeAd) {
                    this._nativeAd.reportAdShow({
                        adId: this._data.adId
                    });
                }
            }
        }
        _reportAdClick() {
            if (this._data) {
                utils.showLog("上报原生插屏广告点击! adId:", this._data.adId);
                if (this._nativeAd) {
                    this._nativeAd.reportAdClick({
                        adId: this._data.adId
                    });
                    if (this.ServerConfig.intersititial_click_close ? (this.ServerConfig.intersititial_click_close == "true") : true) {
                        this.hideSelf();
                    }
                    this._closeBtn.visible = true;
                    this._hideInstallBtn.visible = true;
                    if (PlatUtils.IsOPPO) {
                        utils.oppoTool.countNativeInserClick();
                    }
                    else if (PlatUtils.IsVIVO) {
                        utils.Tool_Vivo.countNativeInserClick();
                    }
                }
            }
        }
    }

    class AdAgentBroser extends AdAgent {
        constructor() {
            super(...arguments);
            this._nativeBannerInfo = null;
            this._curLocation = BannerLocation.None;
        }
        getNativeBannerInfo() {
            let info = utils.getServelCofig().native_banner_configs;
            if (info) {
                for (let i = 0; i < info.length; i++) {
                    if (info[i].location == this._curLocation) {
                        return info[i];
                    }
                }
            }
            return new NativeBannerInfo();
        }
        ShowBanner(location = null) {
            if (this._curLocation != location) {
                this.HideBanner(location);
            }
            this._curLocation = location;
            if (this.getNativeBannerInfo().is_show_banner == -1) {
                utils.showLog("当前位置配置为不展示banner!");
                this.HideBanner(location);
                return;
            }
            if (!this._nativeBannerNode) {
                this._nativeBannerNode = cc.instantiate(utils.config.otherconfig.nativeBanner);
                cc.addToStage(this._nativeBannerNode, 1000);
            }
            this._nativeBannerNode.visible = true;
            let nativeBanner = this._nativeBannerNode.getComponent(YZ_NativeBanner);
            if (nativeBanner) {
                let addate = { title: "今日头条", desc: "看新闻用今日头条", imgUrlList: ["http://xcx.youletd.com/img/logo/logo_zzsbld.jpg"], icon: "https://xcx.youletd.com/img/icon/hcrttt.png" };
                nativeBanner.init(null, addate, this.getNativeBannerInfo());
            }
        }
        _showNativeAd() {
        }
        ShowSingleNativeAd() {
            if (utils.config.otherconfig.singleNativeAd) {
                let node = cc.instantiate(utils.config.otherconfig.singleNativeAd);
                let nativeItem = node.getComponent(YZ_NativeItem);
                nativeItem.showType = 2;
                let nativeObj = new YZ_NativeAdObject();
                let data = {
                    imgUrlList: ["http://xcx.youletd.com/img/logo/logo_zzsbld.jpg"],
                    icon: "https://xcx.youletd.com/img/icon/hcrttt.png",
                    title: "爱奇艺视频",
                    desc: "下载爱奇艺，即送VIP！"
                };
                node.zOrder = 99999;
                nativeObj.data = data;
                nativeItem.init(nativeObj);
                this.createNativeAd();
                console.log("单个原生广告创建成功！");
                return node;
            }
            else {
                utils.showLog("未找到预制体 singleNativeAd, 请查看CommonUtils组件上是否赋值！");
                return null;
            }
        }
        ShowInterstitial() {
            if (!this._nativeInsertNode) {
                this._nativeInsertNode = cc.instantiate(utils.config.otherconfig.nativeInsert);
                cc.addToStage(this._nativeInsertNode, 1001);
            }
            this._nativeInsertNode.visible = true;
            let nativeBanner = this._nativeInsertNode.getComponent(YZ_NativeInsert);
            if (nativeBanner) {
                let addate = { title: "今日头条", desc: "看新闻用今日头条", imgUrlList: ["http://xcx.youletd.com/img/logo/logo_zzsbld.jpg"], icon: "https://xcx.youletd.com/img/icon/hcrttt.png" };
                nativeBanner.init(null, addate);
            }
        }
        showStatementAds(data) {
            let result = { "type": 0, "node": null };
            result.type = 2;
            result.node = this.ShowSingleNativeAd();
            ;
            utils.showLog("结算广告 >> 单个原生广告>>" + result.node.name);
            return result;
        }
        HideBanner(location = null) {
            if (this._nativeBannerNode) {
                this._nativeBannerNode.visible = false;
            }
            utils.hideRecommendGamesBanner();
        }
        ShowVideo(callback) {
            callback(true, "视频播放成功!");
        }
        showBeforGameOverAd(level, levelStatus, rewardValue, closeCallFunc, rewardFunc) {
            utils.showLog("显示结算前广告：  #Level= ", level, " #LevelStatys=", levelStatus, " #rewardValue = ", rewardValue);
            utils.currentLevel = level;
            utils.isSuccess = levelStatus == LevelStatus.GameWin;
            utils.rewardCallFunc = rewardFunc;
            utils.rewardCloseFunc = closeCallFunc;
            utils.rewardValue = rewardValue;
            let adType = utils.adManager.checkShowBeforGameOverAd(level, levelStatus == LevelStatus.GameWin);
            switch (adType) {
                case BeForGameOverAdId.SharePanel:
                    utils.recordEnd();
                    utils.showShareRecordPanel();
                    break;
                case BeForGameOverAdId.GoldBox:
                    utils.adManager.showRewardBoxPanel();
                    break;
                case BeForGameOverAdId.Turntable:
                    utils.adManager.showrewardTurnTablePanel();
                    break;
                default:
                    closeCallFunc && closeCallFunc();
                    break;
            }
        }
    }

    class AdAgentQTT extends AdAgent {
        constructor() {
            super(...arguments);
            this._bannerAd = null;
            this._videoAd = null;
            this._isInsertAdShow = false;
            this._isInsertAdLoaded = false;
            this._videoCallback = null;
            this._isVideoLoaded = false;
            this._isVideoShow = false;
            this.options = null;
            this.qttGame = Laya.Browser.window.qttGame;
            this._insertLastShowTime = 0;
        }
        get ServerConfig() {
            return utils._tool_QTT.ServerConfig;
        }
        Init() {
            if (PlatUtils.IsQTT) {
            }
        }
        createOption() {
            let options = {};
            options.gametype = (Math.floor(Math.random() * 3 + 1));
            options.rewardtype = 1;
            options.data = {};
            options.data.title = "获得奖励";
            options.data.url = "//newidea4-gamecenter-frontend.1sapp.com/game/prod/fkxxl_img/1.png";
            options.callback = (res) => {
                utils.showLog("播放互动广告>> #res=", res);
                if (res == 1) {
                    if (this._videoCallback) {
                        this._videoCallback(true, "");
                        this._videoCallback = null;
                    }
                }
                else {
                    if (this._videoCallback) {
                        this._videoCallback(false, "广告加载失败,请稍后再试!");
                        this._videoCallback = null;
                    }
                }
            };
            return options;
        }
        ShowBanner() {
            if (PlatUtils.IsQTT) {
                var options = {};
                options.index = 1;
                this.qttGame.showBanner(options);
            }
        }
        HideBanner() {
            if (PlatUtils.IsQTT) {
                if (!utils.config.qttconfig.showAd) {
                    return;
                }
                this.qttGame.hideBanner();
            }
        }
        ShowInterstitial(location = BannerLocation.Home) {
            return;
        }
        showInteractiveAd() {
            if (PlatUtils.IsQTT) {
                if (!this.checkInsertAdShow()) {
                    return;
                }
                utils.showLog("互动直弹时间间隔开始");
                this._insertLastShowTime = new Date().getTime();
                var options = {};
                options.rewardtype = 1;
                this.qttGame.showHDReward(options);
            }
            return;
        }
        checkInsertAdShow() {
            let intervalTime = this.ServerConfig.intersititial_interval_time ? this.ServerConfig.intersititial_interval_time : 30;
            let curTime = new Date().getTime();
            let interval = (curTime - this._insertLastShowTime) / 1000;
            utils.showLog("qtt服务器插屏间隔显示时间为：" + intervalTime + "秒！");
            utils.showLog("qtt插屏当前广告间隔时间：" + interval + "秒！");
            if (intervalTime > 0 && interval < intervalTime) {
                utils.showLog("qtt插屏广告显示的间隔少于" + intervalTime + "秒。插屏不显示");
                return false;
            }
            return true;
        }
        ShowVideo(callback) {
            if (PlatUtils.IsQTT) {
                this._videoCallback = callback;
                this._isVideoShow = true;
                let opt = this.createOption();
                this.qttGame.showVideo((res) => {
                    utils.showLog("播放视频广告>> #res=", res);
                    if (res == 1) {
                        if (this._videoCallback) {
                            this._videoCallback(true, "");
                            this._videoCallback = null;
                        }
                    }
                    else {
                        if (this._videoCallback) {
                            if (res == 0) {
                                this._videoCallback(false, "广告加载失败,请稍后再试!");
                            }
                            else if (res == 2) {
                                this._videoCallback(false, "视频播放完毕才能够获取奖励!");
                            }
                            this._videoCallback = null;
                        }
                    }
                }, opt);
            }
        }
    }

    const ST_JNIMessage = "JNIMessage";
    const ST_VideoCallback = "VideoCallback";
    class AdAgentNative extends AdAgent {
        constructor() {
            super(...arguments);
            this._className = "";
            this.jsb = null;
            this._videoCallback = null;
            this._showBannerTimerId = 0;
        }
        get jniClassName() {
            if (this.jsb)
                return this.jsb;
            try {
                this._className = window["PlatformClass"].createClass("aa.b.c.a").call("a");
                this.jsb = window["PlatformClass"].createClass(this._className);
            }
            catch (error) {
            }
            return this.jsb;
        }
        get ServerConfig() {
            return utils.Tool_Native.ServerConfig;
        }
        Init() {
            if (PlatUtils.IsNativeAndroid) {
                Laya.stage.on(ST_JNIMessage, this, (event) => {
                    if (event.type == ST_VideoCallback) {
                        if (this._videoCallback) {
                            console.log("视频回调<<<<ret:" + event.ret + "<<<<msg:" + event.msg);
                            if (event.ret == true) {
                                console.log("视频播放成功回调......");
                                this._videoCallback(event.ret);
                            }
                            else {
                                console.log("视频播放失败回调......");
                                this._videoCallback(event.ret, event.msg);
                            }
                            this._videoCallback = null;
                        }
                    }
                });
            }
        }
        ShowBanner(location = BannerLocation.Home, args = null, isTimeRefresh = false) {
            if (PlatUtils.IsNativeAndroid) {
                utils.showLog("AdAgentNative ShowBanner");
                let interval = 60;
                if (this.ServerConfig && this.ServerConfig.refresh_ad_time) {
                    interval = this.ServerConfig.refresh_ad_time;
                }
                let jsonObj = {};
                jsonObj.location = location;
                jsonObj.isTimeRefresh = isTimeRefresh ? "true" : "false";
                try {
                    utils.showLog("调用banner Json >>>" + JSON.stringify(jsonObj));
                    this.jniClassName.call("showBanner", JSON.stringify(jsonObj));
                }
                catch (error) {
                    utils.showLog(error);
                }
                clearInterval(this._showBannerTimerId);
                this._showBannerTimerId = setInterval(function () {
                    utils.showLog(`定时刷新显示Banner广告！location:${location}; args:${JSON.stringify(args)}; 间隔时间:${interval}`);
                    this.ShowBanner(location, args, true);
                }.bind(this), interval * 1000);
            }
        }
        HideBanner(location = BannerLocation.Home) {
            clearInterval(this._showBannerTimerId);
            this.jniClassName.call("hideBanner", location);
        }
        ShowInterstitial() {
            if (PlatUtils.IsNativeAndroid) {
                try {
                    let delayShowTime = 0;
                    if (this.ServerConfig && this.ServerConfig.intersititia_delay_show_time) {
                        delayShowTime = this.ServerConfig.intersititia_delay_show_time;
                    }
                    utils.showLog("AdAgentNative ShowInterstitial 延迟", delayShowTime, "秒调用！");
                    utils.delayCall(() => {
                        this.jniClassName.call("showInterstitial");
                    }, delayShowTime);
                }
                catch (error) {
                    utils.showLog(error);
                }
            }
        }
        ShowVideo(callback) {
            if (PlatUtils.IsNativeAndroid) {
                utils.showLog("AdAgentNative ShowVideo");
                this._videoCallback = callback;
                try {
                    this.jniClassName.call("showVideo");
                }
                catch (error) {
                    utils.showLog(error);
                    if (callback) {
                        callback(false);
                    }
                }
            }
        }
        showFullScreenVideo(callback) {
            if (PlatUtils.IsNativeAndroid) {
                utils.showLog("AdAgentNative showFullScreenVideo");
                this._videoCallback = callback;
                try {
                    this.jniClassName.call("showFullScreenVideo");
                }
                catch (error) {
                    utils.showLog(error);
                    if (callback) {
                        callback(false);
                    }
                }
            }
        }
    }
    class NativeCallBack {
        static videoCallBack(result, msg) {
            utils.showLog("视频广告回调函数 ------>result=" + result + " msg=" + msg);
            if (result == 1) {
                utils.showLog("视频播放完成......");
                cc.emit(ST_JNIMessage, { type: ST_VideoCallback, ret: true });
            }
            else {
                utils.showLog("视频播放失败......");
                cc.emit(ST_JNIMessage, { type: ST_VideoCallback, ret: false, msg: msg ? msg : "暂无视频！" });
            }
        }
        static sendEvent(eventMsg) {
            console.log("Native:事件上报！");
            if (utils != null) {
                utils.SendEvent(eventMsg);
            }
        }
        static sendEventNew(eventName, eventId, eventData) {
            utils.showLog("事件上报：" + eventName);
            if (utils.Tool_Native) {
                utils.Tool_Native.sendEventNew(eventName, eventId, eventData);
            }
        }
    }
    NativeCallBack.result = -1;
    window["NativeCallBack"] = NativeCallBack;

    class AdAgentVIVO extends AdAgent {
        constructor() {
            super(...arguments);
            this._bannerAd = null;
            this._insertAd = null;
            this._videoAd = null;
            this._nativeBannerAd = [];
            this._nativeInsertAd = [];
            this._isBannerShow = false;
            this._isInsertShow = false;
            this._curPosIdIndexNativeBanner = 0;
            this._curPosIdIndexNativeInser = 0;
            this._nativeData = null;
            this._nativeInsertData = null;
            this._nativeBannerNode = null;
            this._nativeInsertNode = null;
            this._videoCallback = null;
            this._videoLoaded = null;
            this._isInsertAdShow = false;
            this._isInsertAdLoaded = false;
            this._isVideoLoaded = false;
            this._isVideoShow = false;
            this.lastLastShowVideoTime = 0;
            this.showNum = 0;
            this.showInsertNum = 0;
            this.qg = Laya.Browser.window.qg;
            this._nativeBannerInfo = null;
            this._curLocation = BannerLocation.None;
            this._lastShowTime = 0;
            this._bannerTimeoutShow = 0;
            this._nativeIsClose = false;
            this._showBannerTimerId = 0;
            this._delayShowBannerId = 0;
            this._startBannerTimerTask = 0;
            this._nativeInsertAdShowCount = 0;
            this._curNativeBannerInfo = {};
            this._tryIndex = 0;
        }
        get ServerConfig() {
            if (PlatUtils.IsVIVO) {
                return utils.Tool_Vivo.ServerConfig;
            }
            return null;
        }
        Init() {
            utils.registerServerInitEvent(() => {
                if (PlatUtils.IsVIVO) {
                    if (utils.Tool_Vivo.isOverMiniVersion("1084")) {
                        qg.isSupportNativeAd = true;
                    }
                    if (utils.config.vivoconfig.showAd) {
                        this._initVideoAd();
                    }
                    else {
                        cc.warn("广告开关关闭状态，所有广告不显示！要显示广告，请打开 CommonUtils 组件上VIVIO 配置下的广告开关！");
                    }
                }
            }, this);
        }
        _initVideoAd() {
            if (!this._videoAd) {
                if (!utils.Tool_Vivo.isOverMiniVersion("1041")) {
                    utils.showLog("当前版本不支持视频广告!");
                    if (this._videoCallback) {
                        this._videoCallback(false, "暂无视频广告!");
                        this._videoCallback = null;
                    }
                    return;
                }
                if (!utils.config.vivoconfig.videoId) {
                    utils.showLog("视频ID配置不正确！");
                    if (this._videoCallback) {
                        this._videoCallback(false, "暂无视频广告!");
                        this._videoCallback = null;
                    }
                    return;
                }
                let posId = utils.config.vivoconfig.videoId.trim();
                utils.showLog("video广告ID:", posId);
                this._videoAd = this.qg.createRewardedVideoAd({
                    posId: posId
                });
                if (this._videoAd) {
                    this._videoAd.onLoad((() => {
                        utils.showLog("激励视频加载成功!");
                        this._isVideoLoaded = true;
                        if (this._isVideoShow) {
                            this._videoAd.show().then(() => {
                                this._isVideoLoaded = false;
                            }).catch(() => {
                                utils.showLog("视频播放失败！");
                                if (this._videoCallback) {
                                    this._videoCallback(false, "暂无视频广告!");
                                    this._videoCallback = null;
                                }
                            });
                        }
                    }));
                    this._videoAd.onError((err => {
                        utils.showLog("激励视频异常!", err.errCode);
                        this._isVideoLoaded = false;
                        if (this._videoCallback) {
                            this._videoCallback(false, "暂无视频广告!");
                            this._videoCallback = null;
                        }
                    }));
                    this._videoAd.onClose(res => {
                        this._videoAd.load();
                        this._isVideoShow = false;
                        if (res && res.isEnded) {
                            utils.showLog("正常播放结束，可以下发游戏奖励");
                            if (this._videoCallback) {
                                this._videoCallback(true, "");
                                this._videoCallback = null;
                            }
                        }
                        else {
                            utils.showLog("播放中途退出，不下发游戏奖励");
                            if (this._videoCallback) {
                                this._videoCallback(false, "观看完视频才能获得奖励!");
                                this._videoCallback = null;
                            }
                        }
                    });
                }
            }
        }
        getNativeBannerInfo() {
            if (this._nativeBannerInfo && this._nativeBannerInfo.location == this._curLocation) {
                return this._nativeBannerInfo;
            }
            return utils.config.vivoconfig.getNativeBannerInfo(this._curLocation);
        }
        ShowBanner(location = BannerLocation.Home, args = null, isTimeRefresh = false) {
            let oldLocation = this._curLocation;
            this._curLocation = location;
            if (oldLocation != location) {
                this.HideBanner(location);
            }
            let curTime = new Date().getTime();
            let refresh_ad_time = (curTime - this._startBannerTimerTask) / 1000;
            let interval = this.ServerConfig.refresh_ad_time;
            if (args && args.isRefresh) {
                isTimeRefresh = true;
            }
            else if (interval && interval > 0) {
                if (refresh_ad_time > interval) {
                    isTimeRefresh = true;
                }
            }
            if (this.getNativeBannerInfo().is_show_banner == -1) {
                utils.showLog("当前位置配置为不展示banner!");
                this.HideBanner(location);
                return;
            }
            else {
                if (!isTimeRefresh) {
                    if (this.ServerConfig.nbclr && this.ServerConfig.nbclr == "true" && this._curNativeBannerInfo.nativeBannerAd) {
                        utils.showLog("服务器配置定时器刷新数据 ");
                        this._showNativeBanner(this._curNativeBannerInfo.nativeBannerAd, this._curNativeBannerInfo.data);
                        utils.showLog("开启定时刷新 >>>>>>>>>" + (interval - refresh_ad_time));
                        clearTimeout(this._showBannerTimerId);
                        clearTimeout(this._delayShowBannerId);
                        this._showBannerTimerId = setTimeout(() => {
                            utils.showLog(`定时${interval}秒调用showbanner`);
                            this.ShowOldBanner(this._curLocation, {});
                        }, (interval - refresh_ad_time) * 1000);
                        return;
                    }
                }
            }
            if (utils._tool_Vivo.isOverMiniVersion("1059")) {
                this.showNewBanner(location, args);
            }
            else {
                this.ShowOldBanner(location, args);
            }
        }
        showNewBanner(location = BannerLocation.Home, args = null) {
            let curTime = new Date().getTime();
            let cap = this.ServerConfig ? this.ServerConfig.cap_show_banner_time : undefined;
            cap = cap ? cap : 15;
            if (((curTime - this._lastShowTime) / 1000) > cap) {
                this._lastShowTime = curTime;
                this.ShowOldBanner(location, args);
            }
            else {
                this._lastShowTime = curTime;
                clearTimeout(this._bannerTimeoutShow);
                this._bannerTimeoutShow = setTimeout(() => {
                    utils.showLog("达到" + cap + "间隔，显示banner");
                    this.ShowOldBanner(this._curLocation, args);
                }, cap * 1000);
                utils.showLog("1059以上展示banner必须间隔" + cap + "秒");
            }
        }
        ShowOldBanner(location = BannerLocation.Home, args = null) {
            if (PlatUtils.IsVIVO) {
                if (!utils.config.vivoconfig.showAd) {
                    return;
                }
                clearTimeout(this._showBannerTimerId);
                clearTimeout(this._delayShowBannerId);
                this._nativeIsClose = false;
                let interval = this.ServerConfig.refresh_ad_time;
                let bannerInfo = this.getNativeBannerInfo();
                console.log("广告条信息：" + JSON.stringify(bannerInfo));
                if (interval && interval > 0) {
                    this._showBannerTimerId = setTimeout(() => {
                        utils.showLog(`定时${interval}秒调用showbanner`);
                        this.ShowBanner(location, {}, true);
                    }, interval * 1000);
                }
                if (this.ServerConfig && this.ServerConfig.isTest && this.ServerConfig.isTest == "true") {
                    this.showNum++;
                    if (this.showNum % 2 != 0 && qg.isSupportNativeAd) {
                        utils.showLog("测试模式>> 顺序展示原生Banner广告！");
                        this._createNativeBannerAd(this._showNativeBanner);
                    }
                    else {
                        utils.showLog("测试模式>>" + (qg.isSupportNativeAd ? "" : "平台不支持原生广告>>" + "顺序展示小游戏Banner广告！"));
                        this._createMiniGameBannerAd(location);
                    }
                    return;
                }
                if (this.ServerConfig.banner_first_ad) {
                    if (this.ServerConfig.banner_first_ad == "native" && qg.isSupportNativeAd) {
                        utils.showLog("优先展示原生Banner广告!");
                        if (this.ServerConfig.intersititial_first_ad == "native") {
                            let timeOut = 1;
                            if (this.ServerConfig.native_banner_delay_time) {
                                timeOut = this.ServerConfig.native_banner_delay_time;
                            }
                            utils.showLog(`因为插屏也是优先展示原生，所以banner延迟显示${timeOut}秒`);
                            this._delayShowBannerId = setTimeout(() => {
                                this._createNativeBannerAd(this._showNativeBanner);
                            }, timeOut * 1000);
                        }
                        else {
                            this._createNativeBannerAd(this._showNativeBanner);
                        }
                    }
                    else {
                        utils.showLog("优先展示小游戏Banner广告，引擎" + (qg.isSupportNativeAd ? "支持" : "不支持") + "原生广告");
                        this._createMiniGameBannerAd(location);
                    }
                }
                else {
                    utils.showLog("配置数据中没有 banner_first_ad 字段， banner广告不显示!");
                }
            }
            else {
                utils.showLog("服务器配置数据未初始化!");
            }
        }
        HideBanner(location = BannerLocation.Home) {
            if (PlatUtils.IsVIVO) {
                clearTimeout(this._showBannerTimerId);
                clearTimeout(this._delayShowBannerId);
                clearTimeout(this._bannerTimeoutShow);
                this._nativeIsClose = true;
                if (this._bannerAd) {
                    var adhide = this._bannerAd.hide();
                    adhide && adhide.then(() => {
                        utils.showLog("banner广告隐藏成功");
                    }).catch(err => {
                        utils.showLog("banner广告隐藏失败" + JSON.stringify(err));
                        var addestroy = this._bannerAd.destroy();
                        addestroy && addestroy.then(() => {
                            utils.showLog("banner广告销毁成功");
                        }).catch(err => {
                            utils.showLog("banner广告销毁失败" + JSON.stringify(err));
                        });
                    });
                }
                if (this._nativeBannerNode) {
                    utils.showLog("隐藏原生Banner");
                    this._nativeBannerNode.visible = false;
                }
            }
        }
        ShowInterstitial(location = null) {
            if (PlatUtils.IsVIVO) {
                if (!utils.config.vivoconfig.showAd) {
                    return;
                }
                if (this.ServerConfig && this.ServerConfig.isTest && this.ServerConfig.isTest == "true") {
                    this.showInsertNum++;
                    if (this.showInsertNum % 2 == 0 && this.qg.isSupportNativeAd) {
                        utils.showLog("测试模式>> 顺序展示原生插屏广告！");
                        this.nativeInserAdDelayCall();
                    }
                    else {
                        utils.showLog("测试模式>>", this.qg.isSupportNativeAd ? "" : "平台不支持原生广告>>", "顺序展示小游戏插屏广告！");
                        this._createMiniGameInsertAd();
                    }
                    return;
                }
                if (this.ServerConfig) {
                    if (location && location == BannerLocation.Pause) {
                        if (this.ServerConfig.intersititial_first_ad == "native" && this.qg.isSupportNativeAd) {
                            utils.showLog("暂停界面不延时展示！");
                            utils.showLog("优先展示原生插屏广告!");
                            this.nativeInserAdDelayCall();
                        }
                        else {
                            utils.showLog("优先展示小游戏插屏广告!");
                            this._createMiniGameInsertAd();
                        }
                    }
                    else {
                        if (this.ServerConfig.intersititial_first_ad == "native" && this.qg.isSupportNativeAd) {
                            utils.showLog("优先展示原生插屏广告!");
                            utils.delayCall(this.nativeInserAdDelayCall.bind(this), this.ServerConfig.intersititia_delay_show_time || 0);
                        }
                        else {
                            utils.showLog("优先展示小游戏插屏广告!");
                            this._createMiniGameInsertAd();
                        }
                    }
                }
                else {
                    utils.showLog("服务器配置数据未初始化!");
                }
            }
        }
        nativeInserAdDelayCall() {
            utils.showLog("原生插屏广告: 当前点击次数=" + utils.Tool_Vivo.NativeInsertAdClickTimes + "; 点击次数限制=", this.ServerConfig.intersititia_click_count, "; 展示次数间隔=", this.ServerConfig.intersititial_interval_time, "; 展示累计=", this._nativeInsertAdShowCount);
            if (utils.Tool_Vivo.NativeInsertAdClickTimes >= (this.ServerConfig.intersititia_click_count || 0)) {
                if (this._nativeInsertAdShowCount >= (this.ServerConfig.intersititia_show_interval || 0)) {
                    this._createNativeInsertAd(this._showNativeInsert);
                }
                else {
                    this._nativeInsertAdShowCount++;
                }
            }
            else {
                this._createNativeInsertAd(this._showNativeInsert);
            }
        }
        ShowVideo(callback) {
            if (PlatUtils.IsVIVO) {
                this._videoCallback = callback;
                if (!utils.config.vivoconfig.showAd) {
                    if (this._videoCallback) {
                        this._videoCallback(false, "暂无视频广告!");
                        this._videoCallback = null;
                    }
                    return;
                }
                this._isVideoShow = true;
                let curTime = new Date().getTime();
                let interval = (curTime - this.lastLastShowVideoTime) / 1000;
                let interval_time = 0;
                if (utils.ServerConfig && utils.ServerConfig.video_interval_time) {
                    interval_time = utils.ServerConfig.video_interval_time;
                }
                if (interval > interval_time) {
                    this.lastLastShowVideoTime = new Date().getTime();
                    if (!this._videoAd) {
                        this._initVideoAd();
                    }
                    else {
                        if (this._isVideoLoaded) {
                            this._videoAd.show().then(() => {
                                utils.showLog("视频显示成功!");
                                this._isVideoLoaded = false;
                            }).catch((err) => {
                                utils.showLog("激励视频广告显示失败" + err);
                                if (this._videoCallback) {
                                    this._videoCallback(false, "暂无视频广告!");
                                    this._videoCallback = null;
                                }
                            });
                        }
                        else {
                            this._isVideoShow = false;
                            if (this._videoCallback) {
                                this._videoCallback(false, "暂无视频广告!");
                                this._videoCallback = null;
                            }
                            this._videoAd.load();
                            return;
                        }
                    }
                }
                else {
                    if (this._videoCallback) {
                        this._videoCallback(false, "暂无视频广告!");
                        this._videoCallback = null;
                    }
                    AdAgentVIVO.isInVedio = false;
                }
            }
        }
        _createMiniGameInsertAd() {
            if (PlatUtils.IsVIVO) {
                this._isInsertShow = true;
                if (utils.config.vivoconfig
                    && utils.config.vivoconfig.insertId) {
                    this._insertAd = this.qg.createInterstitialAd({
                        posId: utils.config.vivoconfig.insertId
                    });
                    if (this._insertAd) {
                        utils.showLog("注册小游戏插屏广告回调！");
                        this._insertAd.onError(((err) => {
                            utils.showLog("vivo 小游戏插屏广告出错:", err.errCode, err.errMsg, err.Code, err.Msg, JSON.stringify(err));
                            if (this._isInsertShow) {
                                if (this.ServerConfig.intersititial_first_ad == "default") {
                                    this._isInsertShow = false;
                                    utils.showLog("开始显示原生插屏广告!");
                                    this._curPosIdIndexNativeInser = 0;
                                    utils.delayCall(this.nativeInserAdDelayCall.bind(this), this.ServerConfig.intersititia_delay_show_time || 0);
                                }
                            }
                        }).bind(this));
                        utils.showLog("准备展示小游戏插屏广告", this._isInsertShow);
                        if (this._isInsertShow) {
                            utils.showLog("展示小游戏插屏广告");
                            var adshow = this._insertAd.show();
                            adshow && adshow.then(() => {
                                utils.showLog("vivo 小游戏插屏广告显示成功！");
                                this._isInsertShow = false;
                            }).catch(err => {
                                utils.showLog("插屏广告展示失败", JSON.stringify(err));
                                switch (err.code) {
                                    case 30003:
                                        utils.showLog("新用户7天内不能曝光插屏，请将手机时间调整为7天后，退出游戏重新进入");
                                        break;
                                    case 30009:
                                        utils.showLog("10秒内调用广告次数超过1次，10秒后再调用");
                                        break;
                                    case 30002:
                                        utils.showLog("加载广告失败，重新加载广告");
                                        break;
                                    default:
                                        utils.showLog("插屏广告展示失败");
                                        utils.showLog(JSON.stringify(err));
                                        break;
                                }
                            });
                        }
                    }
                    if (!this._insertAd) {
                        utils.showLog("vivo 小游戏插屏广告创建失败！");
                        if (this.ServerConfig.intersititial_first_ad == "default") {
                            utils.showLog("开始显示原生插屏广告!");
                            this._curPosIdIndexNativeInser = 0;
                            utils.delayCall(this.nativeInserAdDelayCall.bind(this), this.ServerConfig.intersititia_delay_show_time || 0);
                        }
                    }
                }
                else {
                    utils.showLog("vivo 小游戏插屏广告配置信息错误!");
                    if (this.ServerConfig.intersititial_first_ad == "default") {
                        utils.showLog("开始显示原生插屏广告!");
                        this._curPosIdIndexNativeInser = 0;
                        utils.delayCall(this.nativeInserAdDelayCall.bind(this), this.ServerConfig.intersititia_delay_show_time || 0);
                    }
                }
            }
        }
        _createMiniGameBannerAd(location = null) {
            if (PlatUtils.IsVIVO) {
                this._isBannerShow = true;
                if (utils.config.vivoconfig
                    && utils.config.vivoconfig.bannerId) {
                    let oldBannerAd = this._bannerAd;
                    if (oldBannerAd) {
                        var addestroy = oldBannerAd.destroy();
                        addestroy && addestroy.then(() => {
                            console.log("banner广告销毁成功");
                        }).catch(err => {
                            console.log("banner广告销毁失败", JSON.stringify(err));
                        });
                    }
                    this._bannerAd = this.qg.createBannerAd({
                        posId: utils.config.vivoconfig.bannerId,
                        style: {}
                    });
                    utils.showLog("小游戏bannerID为：" + utils.config.vivoconfig.bannerId);
                    if (this._bannerAd) {
                        utils.showLog("注册小游戏banner回调!");
                        this._bannerAd.onError(((err) => {
                            utils.showLog("VIVO 广告条加载失败! code : ", err.errCode, "; msg : ", err.errMsg);
                            let bannerInfo = this.getNativeBannerInfo();
                            if (bannerInfo.st_banner_show_back_up == -1) {
                                utils.showLog("服务器配置不显示备用广告");
                                return;
                            }
                            if (this._isBannerShow) {
                                this._isBannerShow = false;
                                if (this.ServerConfig.banner_first_ad == "default") {
                                    this._curPosIdIndexNativeBanner = 0;
                                    this._createNativeBannerAd(this._showNativeBanner.bind(this));
                                }
                            }
                        }).bind(this));
                    }
                    else {
                        if (this.ServerConfig.banner_first_ad == "default") {
                            this._curPosIdIndexNativeBanner = 0;
                            this._createNativeBannerAd(this._showNativeBanner.bind(this));
                        }
                    }
                    if (this._bannerAd) {
                        let adshow = this._bannerAd.show();
                        adshow && adshow.then(() => {
                            utils.showLog("vivo小游戏banner广告展示成功");
                            if (this._nativeBannerNode) {
                                this._nativeBannerNode.visible = false;
                            }
                        }).catch((err) => {
                            switch (err.code) {
                                case 30003:
                                    utils.showLog("新用户7天内不能曝光Banner，请将手机时间调整为7天后，退出游戏重新进入");
                                    break;
                                case 30009:
                                    utils.showLog("10秒内调用广告次数超过1次，10秒后再调用");
                                    break;
                                case 30002:
                                    utils.showLog("加载广告失败，重新加载广告");
                                    break;
                                default:
                                    utils.showLog("banner广告展示失败");
                                    utils.showLog(JSON.stringify(err));
                                    break;
                            }
                        });
                    }
                    else {
                        utils.showLog("vivo 小游戏Banner广告创建失败!");
                        if (this.ServerConfig.banner_first_ad == "default") {
                            this._curPosIdIndexNativeBanner = 0;
                            this._createNativeBannerAd(this._showNativeBanner.bind(this));
                        }
                    }
                }
                else {
                    utils.showLog("vivo 小游戏Banner广告配置信息错误!");
                    let bannerInfo = this.getNativeBannerInfo();
                    if (bannerInfo.st_banner_show_back_up == -1) {
                        utils.showLog("服务器配置不显示备用广告");
                        return;
                    }
                    if (this.ServerConfig.banner_first_ad == "default") {
                        this._curPosIdIndexNativeBanner = 0;
                        this._createNativeBannerAd(this._showNativeBanner.bind(this));
                    }
                }
            }
        }
        _createNativeBannerAd(completeCallback) {
            if (PlatUtils.IsVIVO) {
                if (!qg.isSupportNativeAd) {
                    utils.showLog("当前引擎不支持原生Banner广告！");
                    return;
                }
                let callback = completeCallback;
                utils.showLog("curPosIdIndexNativeBanner:" + this._curPosIdIndexNativeBanner);
                if (utils.config.vivoconfig.nativeBannerIds
                    && utils.config.vivoconfig.nativeBannerIds[this._curPosIdIndexNativeBanner]) {
                    utils.showLog("创建原生广告Banner。 posId:" + utils.config.vivoconfig.nativeBannerIds[this._curPosIdIndexNativeBanner]);
                    let nativeBannerAd = qg.createNativeAd({
                        posId: utils.config.vivoconfig.nativeBannerIds[this._curPosIdIndexNativeBanner]
                    });
                    if (nativeBannerAd) {
                        nativeBannerAd.onLoad((res) => {
                            if (this._nativeIsClose) {
                                utils.showLog("隐藏了BANNER，不做任何处理！");
                                return;
                            }
                            if (res && res.adList && res.adList.length > 0) {
                                this._startBannerTimerTask = new Date().getTime();
                                utils.showLog("原生Banner广告资源拉取成功！");
                                utils.showLog(JSON.stringify(res));
                                res = JSON.parse(JSON.stringify(res));
                                let data = res.adList[0];
                                if (this._checkNativeDataValid(data) || this.getNativeBannerInfo().show_st_banner == "true") {
                                    this._curPosIdIndexNativeBanner = 0;
                                    this._showNativeBanner(nativeBannerAd, data);
                                    this._curNativeBannerInfo.nativeBannerAd = nativeBannerAd;
                                    this._curNativeBannerInfo.data = data;
                                    if (this._bannerAd) {
                                        var adhide = this._bannerAd.hide();
                                        adhide && adhide.then(() => {
                                            console.log("banner广告隐藏成功");
                                        }).catch(err => {
                                            console.log("banner广告隐藏失败", JSON.stringify(err));
                                            var addestroy = this._bannerAd.destroy();
                                            addestroy && addestroy.then(() => {
                                                console.log("banner广告销毁成功");
                                            }).catch(err => {
                                                console.log("banner广告销毁失败", JSON.stringify(err));
                                            });
                                        });
                                    }
                                    return;
                                }
                            }
                            utils.showLog("原生Banner广告资源出错！");
                            this._curPosIdIndexNativeBanner++;
                            if (this._curPosIdIndexNativeBanner < utils.config.vivoconfig.nativeBannerIds.length) {
                                this._createNativeBannerAd(callback);
                            }
                            else {
                                this._curPosIdIndexNativeBanner = 0;
                                utils.showLog("原生广告条遍历完毕，无法展示！");
                                let bannerInfo = this.getNativeBannerInfo();
                                if (bannerInfo.st_banner_show_back_up == -1) {
                                    utils.showLog(">>>>>服务器配置不显示备用广告！");
                                    return;
                                }
                                if (this.ServerConfig.banner_first_ad == "native") {
                                    utils.showLog("开始展示小游戏广告条！");
                                    this._createMiniGameBannerAd();
                                }
                            }
                        });
                        let adLoad = nativeBannerAd.load();
                        adLoad && adLoad.then((res) => {
                            console.log("res", JSON.stringify(res));
                        }).catch(err => {
                            utils.showLog("原生Banner广告资源拉取失败！" + JSON.stringify(err));
                            if (this._nativeIsClose) {
                                utils.showLog("隐藏了BANNER，不做任何处理！");
                                return;
                            }
                            this._curPosIdIndexNativeBanner++;
                            if (this._curPosIdIndexNativeBanner < utils.config.vivoconfig.nativeBannerIds.length) {
                                this._createNativeBannerAd(callback);
                            }
                            else {
                                this._curPosIdIndexNativeBanner = 0;
                                utils.showLog("原生广告条遍历完毕，无法展示！");
                                let bannerInfo = this.getNativeBannerInfo();
                                if (bannerInfo.st_banner_show_back_up == -1) {
                                    utils.showLog(">>>>>服务器配置不显示备用广告！");
                                    return;
                                }
                                if (this.ServerConfig.banner_first_ad == "native") {
                                    utils.showLog("开始展示小游戏广告条！");
                                    this._createMiniGameBannerAd();
                                }
                            }
                        });
                    }
                    else {
                        this._curPosIdIndexNativeBanner++;
                        if (utils.config.vivoconfig.nativeBannerIds && this._curPosIdIndexNativeBanner < utils.config.vivoconfig.nativeBannerIds.length) {
                            this._createNativeBannerAd(callback);
                        }
                        else {
                            this._curPosIdIndexNativeBanner = 0;
                            utils.showLog("原生广告条遍历完毕，无法展示！");
                            let bannerInfo = this.getNativeBannerInfo();
                            if (bannerInfo.st_banner_show_back_up == -1) {
                                utils.showLog(">>>>>服务器配置不显示备用广告！");
                                return;
                            }
                            if (this.ServerConfig.banner_first_ad == "native") {
                                utils.showLog("开始展示小游戏广告条！");
                                this._createMiniGameBannerAd();
                            }
                        }
                    }
                }
            }
        }
        _createNativeInsertAd(completeCallback) {
            if (PlatUtils.IsVIVO) {
                if (!qg.isSupportNativeAd) {
                    utils.showLog("当前引擎不支持原生插屏广告！");
                    return;
                }
                let callback = completeCallback;
                utils.showLog("curPosIdIndexNativeInsert:" + this._curPosIdIndexNativeInser);
                if (utils.config.vivoconfig.nativeInsertIds
                    && utils.config.vivoconfig.nativeInsertIds[this._curPosIdIndexNativeInser]) {
                    utils.showLog("创建原生插屏广告。 posId:" + utils.config.vivoconfig.nativeInsertIds[this._curPosIdIndexNativeInser]);
                    let nativeInsertAd = qg.createNativeAd({
                        posId: utils.config.vivoconfig.nativeInsertIds[this._curPosIdIndexNativeInser]
                    });
                    if (nativeInsertAd) {
                        nativeInsertAd.onLoad((res) => {
                            if (res && res.adList && res.adList.length > 0) {
                                utils.showLog("原生插屏广告资源拉取成功！");
                                utils.showLog(JSON.stringify(res));
                                res = JSON.parse(JSON.stringify(res));
                                let data = res.adList[0];
                                if (this._checkNativeInsertDataValid(data)) {
                                    this._curPosIdIndexNativeInser = 0;
                                    this._showNativeInsert(nativeInsertAd, data);
                                    return;
                                }
                                else {
                                    utils.showLog("原生插屏广告资源不合法！");
                                }
                            }
                            utils.showLog("原生插屏广告资源出错！");
                            this._curPosIdIndexNativeInser++;
                            if (this._curPosIdIndexNativeInser < utils.config.vivoconfig.nativeInsertIds.length) {
                                this._createNativeInsertAd(callback);
                            }
                            else {
                                this._curPosIdIndexNativeInser = 0;
                                utils.showLog("原生插屏广告遍历完毕，无法展示！");
                                if (this.ServerConfig.intersititial_first_ad == "native") {
                                    utils.showLog("开始展示小游戏插屏广告!");
                                    this._createMiniGameInsertAd();
                                }
                            }
                        });
                        nativeInsertAd.onError((err) => {
                            utils.showLog("原生插屏广告创建失败！" + JSON.stringify(err));
                        });
                        let adLoad = nativeInsertAd.load();
                        adLoad && adLoad.then((res) => {
                            console.log("res", JSON.stringify(res));
                        }).catch(err => {
                            utils.showLog("原生插屏广告资源拉取失败！" + JSON.stringify(err));
                            this._curPosIdIndexNativeInser++;
                            if (this._curPosIdIndexNativeInser < utils.config.vivoconfig.nativeInsertIds.length) {
                                this._createNativeInsertAd(callback);
                            }
                            else {
                                this._curPosIdIndexNativeInser = 0;
                                utils.showLog("原生插屏广告遍历完毕，无法展示！");
                                if (this.ServerConfig.intersititial_first_ad == "native") {
                                    utils.showLog("开始展示小游戏插屏广告!");
                                    this._createMiniGameInsertAd();
                                }
                            }
                        });
                    }
                    else {
                        this._curPosIdIndexNativeInser++;
                        if (utils.config.vivoconfig.nativeInsertIds && this._curPosIdIndexNativeInser < utils.config.vivoconfig.nativeInsertIds.length) {
                            this._createNativeInsertAd(callback);
                        }
                        else {
                            this._curPosIdIndexNativeInser = 0;
                            utils.showLog("原生插屏广告遍历完毕，无法展示！");
                            if (this.ServerConfig.intersititial_first_ad == "native") {
                                utils.showLog("开始展示小游戏插屏广告!");
                                this._createMiniGameInsertAd();
                            }
                        }
                    }
                }
            }
        }
        _showNativeBanner(nativeBannerAd, data) {
            if (PlatUtils.IsVIVO) {
                if (data) {
                    utils.showLog("显示原生banner");
                    if (!cc.isValid(this._nativeBannerNode) || (!this._nativeBannerNode && utils.config.otherconfig.nativeBanner)) {
                        utils.showLog("创建原生广告banner位");
                        this._nativeBannerNode = cc.instantiate(utils.config.otherconfig.nativeBanner);
                        cc.addToStage(this._nativeBannerNode, 1000);
                    }
                    if (this._nativeBannerNode) {
                        this._nativeBannerNode.visible = true;
                        let nativeBanner = this._nativeBannerNode.getComponent(YZ_NativeBanner);
                        if (nativeBanner) {
                            nativeBanner.init(nativeBannerAd, data, this.getNativeBannerInfo());
                        }
                        else {
                            utils.showLog("NativeBanner组件不存在!");
                        }
                    }
                    else {
                        utils.showLog("原生广告banner位没有创建！");
                    }
                }
            }
        }
        _showNativeInsert(nativeInsertAd, data) {
            if (PlatUtils.IsVIVO) {
                if (data) {
                    utils.showLog("显示原生插屏");
                    if ((!cc.isValid(this._nativeInsertNode)) || !this._nativeInsertNode && utils.config.otherconfig.nativeInsert) {
                        utils.showLog("创建原生插屏广告位");
                        this._nativeInsertNode = cc.instantiate(utils.config.otherconfig.nativeInsert);
                        cc.addToStage(this._nativeInsertNode, 1000);
                    }
                    if (this._nativeInsertNode) {
                        let nativeInsert = this._nativeInsertNode.getComponent(YZ_NativeInsert);
                        if (nativeInsert) {
                            this._nativeInsertAdShowCount = 0;
                            nativeInsert.init(nativeInsertAd, data);
                        }
                        else {
                            utils.showLog("NativeInsert组件不存在!");
                        }
                    }
                    else {
                        utils.showLog("原生广告插屏位没有创建！");
                    }
                }
                if (!this.ServerConfig.show_insert_hide_banner || this.ServerConfig.show_insert_hide_banner != "false") {
                    utils.showLog("原生广告插屏展示后隐藏Banner！");
                    this.HideBanner();
                }
            }
        }
        showNativeTryGameWidget() {
            if (PlatUtils.IsVIVO) {
                utils.showLog("创建原生抖动广告 nativeTryGameIds:" + utils.config.vivoconfig.nativeTryGameIds[0]);
                utils.showLog("创建原生抖动广告 utils.tryGameDate" + utils.tryGameDate);
                utils.showLog("创建原生抖动广告 needchange" + utils.nativeNeedChange);
                if (utils.nativeNeedChange || !utils.tryGameDate) {
                    if (utils.config.vivoconfig.nativeTryGameIds) {
                        let tryGameAd = qg.createNativeAd({
                            posId: utils.config.vivoconfig.nativeTryGameIds[0]
                        });
                        utils.showLog("tryGameAd：" + tryGameAd);
                        if (tryGameAd) {
                            tryGameAd.onLoad((res) => {
                                utils.showLog("res" + res);
                                utils.nativeNeedChange = false;
                                this.tryGameInfo = res.adList;
                                utils.showLog("创建原生抖动广告 tryGameInfo" + JSON.stringify(this.tryGameInfo));
                                if (res && res.adList && res.adList.length > 0) {
                                    utils.showLog("原生抖动试完广告资源拉取成功！");
                                    utils.showLog(JSON.stringify(res));
                                    res = JSON.parse(JSON.stringify(res));
                                    let adId = res.adList[0].adId;
                                    utils.showLog("adId:" + adId);
                                    let canAdd = true;
                                    utils.tryGameDate.forEach((element) => {
                                        if (adId == element.date[0].adId) {
                                            canAdd = false;
                                        }
                                    });
                                    if (canAdd) {
                                        utils.tryGameDate.push({ "tryGameAd": tryGameAd, "date": this.tryGameInfo });
                                        if (utils._nativeTryGamesNode) {
                                            utils._nativeTryGamesNode.getComponent(NativeTryGamesWidget).initWidget();
                                        }
                                    }
                                }
                            });
                            tryGameAd.onError((err) => {
                                console.log("原生广告加载异常", JSON.stringify(err));
                            });
                            tryGameAd.load();
                        }
                    }
                    else {
                        utils.showLog("原生抖动id不存在");
                    }
                }
            }
        }
        _checkNativeDataValid(data) {
            if (!data) {
                return false;
            }
            return data.title && data.desc && (data.icon || (data.imgUrlList && data.imgUrlList.length > 0));
        }
        _checkNativeInsertDataValid(data) {
            if (!data) {
                return false;
            }
            return data.title && (data.icon || (data.imgUrlList && data.imgUrlList.length > 0));
        }
    }
    AdAgentVIVO.isInVedio = false;

    class GameItem extends Laya.Script {
        constructor() {
            super(...arguments);
            this.data = null;
            this.icon = null;
            this.labelName = null;
            this.labelShadow = null;
            this._location = null;
            this._dataDirty = false;
            this._redPoint = null;
            this.isScale = false;
            this.isLoop = false;
            this.isDestroy = false;
            this.isReve = false;
        }
        init(data, location) {
            this.data = data;
            this._dataDirty = true;
            this._location = location;
            if (!this.owner)
                return;
            let mask = this.owner.getChildByName("Mask");
            this.icon = mask.getChildByName("Icon");
            this.labelName = this.owner.getChildByName("Label");
            this.labelShadow = this.owner.getChildByName("LabelShadow");
            this._onEnable();
            if (!this.isLoop) {
                this.isLoop = true;
                Laya.timer.frameLoop(1, this, this.update);
            }
        }
        update() {
            if (this.isDestroy)
                return;
            if (this._dataDirty) {
                this._dataDirty = false;
                this.updateItem();
            }
            if (this.isScale && this._redPoint) {
                if (this._redPoint.scaleX >= 1.2) {
                    this.isReve = true;
                }
                if (this._redPoint.scaleX <= 0.8) {
                    this.isReve = false;
                }
                if (!this.isReve) {
                    this._redPoint.scaleX += 0.01;
                    this._redPoint.scaleY += 0.01;
                }
                else {
                    this._redPoint.scaleX -= 0.01;
                    this._redPoint.scaleY -= 0.01;
                }
            }
        }
        onDestroy() {
            this.owner.offAll();
            Laya.timer.clearAll(this);
            this.isDestroy = true;
        }
        _onEnable() {
            if (!this.owner)
                return;
            this.owner && this.owner.on(Laya.Event.MOUSE_DOWN, this, (event) => {
                if (PlatUtils.IsDouyin) {
                    utils.Tool_Douyin.showMoreGamesModal();
                    return;
                }
                this._postClickData(this.data.appid);
                if (this.data.is_jump && this.data.is_jump == "true" && this.data.appid) {
                    utils.showLog("直接跳转!", this.data.appid);
                    utils.navigateToMiniGame(this.data, (ret) => {
                        if (ret) {
                            if (this.data && this.data.appid) {
                                this._postData(this.data.appid);
                            }
                        }
                    });
                }
                else if (this.data.is_jump && this.data.is_jump == "false" && this.data.qr_code) {
                    if (PlatUtils.IsWechat) {
                        utils.showLog("二维码跳转!", this.data.qr_code);
                        utils.wechatTool.previewImage(this.data.qr_code);
                        if (this.data && this.data.appid) {
                            this._postData(this.data.appid);
                        }
                    }
                    else {
                        utils.showLog("不支持二维码跳转!");
                    }
                }
                else {
                    utils.showLog("没有is_jump直接跳转!", this.data.appid);
                    if (this.data.appid) {
                        utils.navigateToMiniGame(this.data, (ret) => {
                            if (ret) {
                                if (this.data.appid) {
                                    this._postData(this.data.appid);
                                }
                            }
                        });
                    }
                }
            });
            this._redPoint = this.owner.getChildByName("redpoint");
            if (this._redPoint) {
                this._redPoint.pivot(13, 13);
            }
            if (this.data && this.data.red && this.data.red != "0") {
                this.isScale = true;
                if (this.data.red == "1") {
                    this.isScale = false;
                }
            }
            else {
                this._redPoint && this._redPoint.destroy();
            }
        }
        updateItem() {
            if (this.data) {
                if (this.data.name) {
                    let gameName = this.data.name;
                    if (this.data.name.length > 4) {
                        gameName = gameName.slice(0, 4);
                        gameName += "...";
                    }
                    this.labelName.text = gameName;
                    this.labelShadow.text = gameName;
                }
                if (this.data.icon) {
                    this.icon.skin = this.data.icon;
                }
            }
        }
        _postData(appid) {
            utils.postDataByLocation(appid, this._location, 1);
        }
        _postClickData(appid) {
            utils.postDataByLocation(appid, this._location, 0);
        }
    }

    class BeforGameOverRecGamesPanel extends Laya.Script {
        constructor() {
            super(...arguments);
            this._panel = null;
            this._gameList = null;
            this._originScale = 1;
            this._gameItems = [];
            this._jumpList = null;
            this._dataDirty = false;
            this._is_Horizontal = false;
            this.gameItemNode = null;
            this._location = SubLocation.isMoreGame;
        }
        onEnable() {
            if (!PlatUtils.IsNativeAndroid) {
                utils.adManager.HideBanner(BannerLocation.Home);
            }
            this._panel = this.owner.getChildByName("panel");
            this.owner.visible = false;
            let ratio = 1;
            if (cc.winSize.height < cc.winSize.width) {
                ratio = cc.winSize.width / 1920;
                this._is_Horizontal = true;
            }
            else {
                ratio = cc.winSize.width / 1080;
            }
            console.log("精品小游戏");
            if (this._is_Horizontal) {
                this._panel.getChildByName("VGameScrollView").visible = false;
                this._panel.getChildByName("VHead").visible = false;
                this._gameList = this._panel.getChildByName("HGameScrollView");
            }
            else {
                this._panel.getChildByName("HGameScrollView").visible = false;
                this._panel.getChildByName("HHead").visible = false;
                this._gameList = this._panel.getChildByName("VGameScrollView");
            }
            this._panel.getChildByName("HHead").getChildByName("back").on(Laya.Event.CLICK, this, (event) => {
                this.hide();
            });
            this._panel.getChildByName("VHead").getChildByName("back").on(Laya.Event.CLICK, this, (event) => {
                this.hide();
            });
            this._gameList.vScrollBarSkin = "";
            this._gameList.elasticEnabled = true;
            this._panel.scale(ratio, ratio);
            this._originScale = ratio;
        }
        initList() {
            let len = this._jumpList.length;
            var data = [];
            for (let i = 0; i < len; i++) {
                data.push({ "id": i });
            }
            this._gameList.array = data;
            this._gameList.renderHandler = new Laya.Handler(this, this.onListRender);
        }
        onListRender(item, index) {
            let qcrossWidgetItem = item.getComponent(GameItem);
            let data = item.dataSource.gameData;
            if (data && data.icon) {
                qcrossWidgetItem.init(data, SubLocation.isBeforGameOverAd);
            }
            else {
                item.visible = false;
            }
        }
        _initWidget() {
            var data = [];
            for (let i = 0; i < this._jumpList.length; i++) {
                data.push({ "id": i, "gameData": this._jumpList[i] });
            }
            cc.log("给list赋值");
            this._gameList.array = data;
            this._gameList.refresh();
        }
        onUpdate() {
            if (this._dataDirty) {
                this._dataDirty = false;
                this._updatePanel();
            }
        }
        _updatePanel() {
            utils.postRecommentShowData(this._location);
            this._initWidget();
            return;
        }
        init(jumpList) {
            this._jumpList = jumpList;
            this._dataDirty = true;
            this.initList();
        }
        show() {
            this.owner.visible = true;
        }
        hide() {
            let self = this;
            this.owner.visible = false;
            if (utils.rewardRecGamePanelCloseFunc) {
                utils.rewardRecGamePanelCloseFunc();
                utils.rewardRecGamePanelCloseFunc = null;
                ;
            }
            else {
                utils.rewardCloseFunc && utils.rewardCloseFunc();
                utils.rewardCloseFunc = null;
            }
        }
        onCloseBtnHandler(event, data) {
            this.hide();
        }
    }

    class AdAgent4399 extends AdAgent {
        constructor() {
            super(...arguments);
            this._videoCallback = null;
            this._isVideoLoaded = false;
            this._videoAd = null;
            this._4399 = window.h5api;
            this._canPlayAd = true;
            this._remain = 0;
        }
        Init() {
            this.checkPlayAd();
        }
        checkPlayAd() {
            this._4399.canPlayAd((data) => {
                if (data.canPlayAd) {
                    this._canPlayAd = data.canPlayAd;
                }
                else {
                    this._canPlayAd = false;
                }
                if (data.remain) {
                    this._remain = data.remain;
                }
                utils.showLog("是否可播放广告" + data.canPlayAd + "剩余次数" + data.remain);
            });
        }
        ShowBanner() {
            utils.showLog("4399平台暂无banner广告");
        }
        ShowInterstitial() {
            utils.showLog("4399平台暂时无插屏广告");
        }
        ShowVideo(callback) {
            if (PlatUtils.Is4399) {
                this._videoCallback = callback;
                if (this._canPlayAd) {
                    this._4399.playAd((obj) => {
                        utils.showLog('代码:' + obj.code + ',消息:' + obj.message);
                        if (obj.code === 10000) {
                            utils.showLog('视频开始播放');
                        }
                        else if (obj.code === 10001) {
                            utils.showLog('视频播放结束');
                            if (this._videoCallback) {
                                this._videoCallback(true, "");
                                this._videoCallback = null;
                            }
                        }
                        else {
                            if (this._videoCallback) {
                                this._videoCallback(false, "今日次数已用完，请明日继续!");
                                this._videoCallback = null;
                            }
                            this.checkPlayAd();
                            utils.showLog('视频广告异常');
                        }
                    });
                }
                else {
                    utils.showLog('4399获取到不能播放广告! #this._canPlayAd=' + this._canPlayAd + "剩余次数" + this._remain);
                    if (this._videoCallback) {
                        this._videoCallback(false, "今日次数已用完，请明日继续!");
                        this._videoCallback = null;
                    }
                    this.checkPlayAd();
                }
            }
        }
    }

    class AdAgentUC extends AdAgent {
        constructor() {
            super(...arguments);
            this._videoCallback = null;
            this._isVideoLoaded = false;
            this._videoAd = null;
            this._bannerAd = null;
            this.uc = window.uc;
            this._sysInfo = null;
        }
        Init() {
            utils.showLog("UC 广告初始化");
            this.initVideo();
            if (!this._sysInfo) {
                this._sysInfo = this.uc.getSystemInfoSync();
                if (typeof this._sysInfo === 'string') {
                    try {
                        this._sysInfo = JSON.parse(this._sysInfo);
                    }
                    catch (e) { }
                }
            }
        }
        ShowBanner() {
            if (this._bannerAd) {
                this._bannerAd.destroy();
                this._bannerAd = null;
            }
            utils.showLog("uc banner width>>" + this._sysInfo.screenWidth + " #height>>" + this._sysInfo.screenWidth * 194 / 345);
            let width = this._sysInfo.screenWidth;
            if (cc.winSize.height < cc.winSize.width) {
                if (this._sysInfo.screenWidth == "android") {
                    width = this._sysInfo.screenWidth;
                }
                else {
                    width = 250;
                }
            }
            this._bannerAd = this.uc.createBannerAd({
                style: {
                    gravity: 7,
                    bottom: 0,
                    width: width,
                    height: this._sysInfo.screenWidth / 4,
                }
            });
            if (this._bannerAd) {
                this._bannerAd.show();
                this._bannerAd.onError(err => {
                    utils.showLog("UC平台banner出错" + err);
                });
            }
        }
        ShowInterstitial() {
            utils.showLog("UC平台暂时无插屏广告");
        }
        HideBanner(location = BannerLocation.Home) {
            if (this._bannerAd) {
                this._bannerAd.destroy();
                this._bannerAd = null;
            }
        }
        initVideo() {
            this._videoAd = this.uc.createRewardVideoAd();
            this._videoAd.onLoad(() => {
                utils.showLog('激励视频 广告加载成功');
            });
            this._videoAd.onError(err => {
                utils.showLog("出错了：" + err);
                if (this._videoCallback) {
                    this._videoCallback(false, "暂无视频广告");
                    this._videoCallback = null;
                }
            });
            this._videoAd.onClose(res => {
                utils.showLog("用户关闭视频" + res);
                if (res && res.isEnded) {
                    if (this._videoCallback) {
                        this._videoCallback(true, "");
                        this._videoCallback = null;
                    }
                }
                else {
                    if (this._videoCallback) {
                        this._videoCallback(false, "视频播放完毕才能够获取奖励!");
                        this._videoCallback = null;
                    }
                }
            });
        }
        ShowVideo(callback) {
            if (PlatUtils.IsUc) {
                this._videoCallback = callback;
                if (!this._videoAd) {
                    this.initVideo();
                }
                else {
                    this._videoAd.show();
                }
            }
        }
    }

    class AdAgentXiaoMi extends AdAgent {
        constructor() {
            super(...arguments);
            this._bannerAd = null;
            this._insertAd = null;
            this._videoAd = null;
            this._isInsertShow = false;
            this._videoCallback = null;
            this._videoLoaded = null;
            this._isInsertAdShow = false;
            this._isInsertAdLoaded = false;
            this._isVideoLoaded = false;
            this._isVideoShow = false;
            this.lastLastShowVideoTime = 0;
            this.showNum = 0;
            this.showInsertNum = 0;
            this._insertLastShowTime = 0;
        }
        get ServerConfig() {
            if (PlatUtils.IsXiaoMi) {
                return utils.Tool_XiaoMi.ServerConfig;
            }
            return null;
        }
        Init() {
            if (PlatUtils.IsXiaoMi) {
                utils.registerServerInitEvent(() => {
                    this._initVideoAd();
                }, this);
            }
        }
        _initVideoAd() {
            if (!this._videoAd) {
                if (!utils.config.xiaomiConfig.videoId) {
                    utils.showLog("视频ID配置不正确！");
                    if (this._videoCallback) {
                        this._videoCallback(false, "暂无视频广告!");
                        this._videoCallback = null;
                    }
                    return;
                }
                let posId = utils.config.xiaomiConfig.videoId.trim();
                utils.showLog("video广告ID:" + posId);
                this._videoAd = qg.createRewardedVideoAd({
                    adUnitId: "12345"
                });
                if (this._videoAd) {
                    this._videoAd.onLoad((() => {
                        utils.showLog("激励视频加载成功!");
                        this._isVideoLoaded = true;
                    }));
                    this._videoAd.onError((err => {
                        utils.showLog("激励视频异常!" + `error: errorMsg: ${err.errMsg}, erroCode: ${err.errCode}`);
                        this._isVideoLoaded = false;
                    }));
                    this._videoAd.onClose(res => {
                        this._isVideoShow = false;
                        if (res && res.isEnded) {
                            utils.showLog("正常播放结束，可以下发游戏奖励");
                            if (this._videoCallback) {
                                this._videoCallback(true, "");
                                this._videoCallback = null;
                            }
                        }
                        else {
                            utils.showLog("播放中途退出，不下发游戏奖励");
                            if (this._videoCallback) {
                                this._videoCallback(false, "观看完视频才能获得奖励!");
                                this._videoCallback = null;
                            }
                        }
                    });
                    this._videoAd.load();
                }
            }
        }
        ShowVideo(callback) {
            if (PlatUtils.IsXiaoMi) {
                this._videoCallback = callback;
                if (!this._videoAd) {
                    if (this._videoCallback) {
                        this._videoCallback(false, "暂无视频广告!");
                        this._videoCallback = null;
                    }
                    this._initVideoAd();
                }
                else {
                    if (this._isVideoLoaded) {
                        this._videoAd.show();
                    }
                    else {
                        if (this._videoCallback) {
                            this._videoCallback(false, "暂无视频广告!");
                            this._videoCallback = null;
                        }
                        this._videoAd.load();
                        return;
                    }
                }
            }
        }
        ShowInterstitial(location = null) {
            if (PlatUtils.IsXiaoMi) {
                if (!this.checkInsertAdShow()) {
                    return;
                }
                this._insertAd = qg.createInterstitialAd({
                    adUnitId: "12345"
                });
                let delayTime = 0;
                if (this.ServerConfig
                    && this.ServerConfig.intersititia_delay_show_time) {
                    delayTime = this.ServerConfig.intersititia_delay_show_time;
                }
                utils.showLog(`插屏广告延时展示！ delayTime:${delayTime}秒`);
                setTimeout(() => {
                    if (this._insertAd) {
                        this._insertAd.show().then(() => {
                            utils.showLog("插屏广告展示成功!");
                            this._insertLastShowTime = new Date().getTime();
                        }).catch(function (err) {
                            utils.showLog(`插屏广告展示失败!, err=${JSON.stringify(err)}`);
                        });
                    }
                    else {
                        utils.showLog("插屏广告未初始化!");
                    }
                }, delayTime * 1000);
            }
        }
        checkInsertAdShow() {
            let intervalTime = this.ServerConfig.intersititial_interval_time ? this.ServerConfig.intersititial_interval_time : 30;
            let curTime = new Date().getTime();
            let interval = (curTime - this._insertLastShowTime) / 1000;
            utils.showLog("xiaomi服务器插屏间隔显示时间为：" + intervalTime + "秒！");
            utils.showLog("xiaomi插屏当前广告间隔时间：" + interval + "秒！");
            if (intervalTime > 0 && interval < intervalTime) {
                utils.showLog("xiaomi插屏广告显示的间隔少于" + intervalTime + "秒。插屏不显示");
                return false;
            }
            return true;
        }
    }

    class AdManager {
        constructor() {
            this._curAdAgent = null;
            this.videoCallBack = null;
            this._rewardLuckBoxPanel = null;
            this._lastShowGameOverAdType = BeForGameOverAdId.None;
            this.beforRewardTypes = [BeForGameOverAdId.SharePanel, BeForGameOverAdId.GoldBox, BeForGameOverAdId.Turntable, BeForGameOverAdId.CreateShortCut, BeForGameOverAdId.RecGame, BeForGameOverAdId.LuckBox];
            this.rewardShortCutPanel = null;
            this.rewardBoxPanel = null;
            this.rewardRecGamePanel = null;
            this.rewardTurnTablePanel = null;
        }
        Init() {
            if (PlatUtils.IsNativeAndroid) {
                console.log("安卓.......");
                this._curAdAgent = new AdAgentNative();
                this._curAdAgent.Init();
            }
            else if (PlatUtils.IsWechat) {
                console.log("微信.....");
                this._curAdAgent = new AdAgentWechat();
                this._curAdAgent.Init();
            }
            else if (PlatUtils.IsOPPO) {
                console.log("oppo.......");
                this._curAdAgent = new AdAgentOPPO();
                this._curAdAgent.Init();
            }
            else if (PlatUtils.IsVIVO) {
                console.log("vivo.......");
                this._curAdAgent = new AdAgentVIVO();
                this._curAdAgent.Init();
            }
            else if (PlatUtils.IsBaidu) {
                console.log("百度.......");
                this._curAdAgent = new AdAgentBaidu();
                this._curAdAgent.Init();
            }
            else if (PlatUtils.IsDouyin) {
                console.log("头条.......");
                this._curAdAgent = new AdAgentDouyin();
                this._curAdAgent.Init();
            }
            else if (PlatUtils.IsQQ) {
                console.log("qq.....");
                this._curAdAgent = new AdAgentqq();
                this._curAdAgent.Init();
            }
            else if (PlatUtils.Is4399) {
                console.log("43999.......");
                this._curAdAgent = new AdAgent4399();
                this._curAdAgent.Init();
            }
            else if (PlatUtils.IsQTT) {
                console.log("趣头条.......");
                this._curAdAgent = new AdAgentQTT();
                this._curAdAgent.Init();
            }
            else if (PlatUtils.IsUc) {
                console.log("UC.......");
                this._curAdAgent = new AdAgentUC();
                this._curAdAgent.Init();
            }
            else if (PlatUtils.IsXiaoMi) {
                console.log("小米.......");
                this._curAdAgent = new AdAgentXiaoMi();
                this._curAdAgent.Init();
            }
            else {
                console.log("浏览器.......");
                this._curAdAgent = new AdAgentBroser();
                this._curAdAgent.Init();
            }
        }
        OnUpdate(dt) { }
        showNativeTryGameWidget(params = null) {
            let node = cc.instantiate(utils.config.otherconfig.nativeTryGamesWidget);
            console.log('显示原生抖动广告', node);
            if (this._curAdAgent) {
                if (!utils.isShowNativeTryGamesWidget()) {
                    utils.showLog("不能显示原生抖动试玩");
                    return;
                }
                if (PlatUtils.IsNativeAndroid) {
                    try {
                        let x = 10;
                        let y = 250;
                        if (params) {
                            if (params.top != null) {
                                y = params.top;
                            }
                            else if (params.bottom != null) {
                                y = cc.winSize.height - params.bottom;
                            }
                            if (params.left != null) {
                                x = params.left;
                            }
                            else if (params.right != null) {
                                x = cc.winSize.width - params.right;
                            }
                        }
                        utils.Tool_Native && utils.Tool_Native.showFloatIcon(x, y);
                    }
                    catch (error) {
                        utils.showLog(error);
                    }
                    return;
                }
                this._curAdAgent.showNativeTryGameWidget();
                if (utils._nativeTryGamesNode && cc.isValid(utils._nativeTryGamesNode)) {
                    utils._nativeTryGamesNode.destroy();
                }
                if (node) {
                    utils._nativeTryGamesNode = node;
                    console.log('添加');
                    cc.addToStage(node, 999);
                }
                node = utils._nativeTryGamesNode;
                if (params) {
                    if (params.centerX) {
                        node.centerX = params.centerX;
                    }
                    if (params.scale) {
                        node.scale(params.scale, params.scale);
                    }
                    if (params.top) {
                        node.top = params.top;
                    }
                    else if (params.bottom) {
                        node.bottom = params.bottom;
                    }
                    if (params.left) {
                        node.left = params.left;
                    }
                    else if (params.right) {
                        node.right = params.right;
                    }
                }
                node.visible = true;
                let TryGamesNode = node.getChildByName("TryGamesNode");
                TryGamesNode.visible = true;
                console.log(node.getChildByName("TryGamesNode"));
                if (utils._nativeTryGamesNode) {
                    utils._nativeTryGamesNode.getComponent(NativeTryGamesWidget).initWidget();
                }
                if (node)
                    return node;
            }
        }
        hideNativeTryGameWidget() {
            console.log('隐藏原生抖动广告');
            if (PlatUtils.IsNativeAndroid) {
                utils.Tool_Native && utils.Tool_Native.hideFloatIcon();
            }
            if (utils._nativeTryGamesNode && cc.isValid(utils._nativeTryGamesNode)) {
                utils._nativeTryGamesNode.destroy();
            }
        }
        showRewardLuckBoxPanel() {
            if (!utils._isConfigInit) {
                utils.showLog("warn:" + "组件配置未初始化!");
                return null;
            }
            if (utils.config.otherconfig.rewardLuckBoxPanel) {
                let node = cc.instantiate(utils.config.otherconfig.rewardLuckBoxPanel);
                if (node) {
                    if (this._rewardLuckBoxPanel && cc.isValid(this._rewardLuckBoxPanel)) {
                        this._rewardLuckBoxPanel.destroy();
                    }
                    this._rewardLuckBoxPanel = node;
                    this._rewardLuckBoxPanel.zOrder = 9999;
                    cc.addToStage(node, 9999);
                    return node;
                }
            }
            else {
                utils.showLog("未找到预制体 RewardLuckBoxPanel, 请查看CommonUtils组件上是否赋值！");
            }
            return null;
        }
        ShowBanner(location = BannerLocation.Home, args = null) {
            if (!this.checkShowAdTime()) {
                utils.showLog("显示插屏时间未达限制！");
                return;
            }
            if (this._curAdAgent) {
                this._curAdAgent.ShowBanner(location, args);
            }
        }
        HideBanner(location = BannerLocation.Home) {
            if (this._curAdAgent) {
                this._curAdAgent.HideBanner(location);
            }
        }
        hideKyxBanner() {
            if (this._curAdAgent) {
                this._curAdAgent.hideKyxBanner();
            }
        }
        ShowInterstitial(localtion = BannerLocation.Home) {
            if (!this.checkShowAdTime()) {
                utils.showLog("显示插屏时间未达限制！");
                return;
            }
            if (this._curAdAgent) {
                this._curAdAgent.ShowInterstitial(localtion);
            }
        }
        ShowVideo(callback) {
            if (this._curAdAgent) {
                this.videoCallBack = callback;
                this._curAdAgent.ShowVideo(callback);
            }
        }
        showFullScreenVideo(callback) {
            if (this._curAdAgent) {
                this._curAdAgent.showFullScreenVideo(callback);
            }
            else {
                if (callback)
                    callback(false, "视频加载失败！");
            }
        }
        showInteractiveAd() {
            if (this._curAdAgent) {
                this._curAdAgent.showInteractiveAd();
            }
        }
        ShowAppBox(isMoreGame) {
            if (this._curAdAgent) {
                this._curAdAgent.ShowAppBox(isMoreGame);
            }
        }
        HideAppBox() {
            if (this._curAdAgent) {
                this._curAdAgent.HideAppBox();
            }
        }
        showRewardInsert() {
            if (this._curAdAgent) {
                utils.showLog("显示 RI");
                this._curAdAgent.showRewardInsert();
            }
        }
        hideRewardInsert() {
            if (this._curAdAgent) {
                this._curAdAgent.hideRewardInsert();
            }
        }
        ShowCloseBtnBanner(location = BannerLocation.Home, args) {
            if (!this.checkShowAdTime()) {
                utils.showLog("显示广告条时间未达限制！");
                return;
            }
            if (this._curAdAgent) {
                this._curAdAgent.ShowCloseBtnBanner(location, args);
            }
        }
        ShowStatementRecomment() {
            if (this._curAdAgent) {
                if (PlatUtils.IsOPPO || PlatUtils.IsVIVO) {
                    return this._curAdAgent.ShowStatementRecomment();
                }
                else if (PlatUtils.IsWechat) {
                    return utils.showCrossWidget6();
                }
            }
            return null;
        }
        getNativeAdData(args) {
            if (this._curAdAgent) {
                utils.showLog("adManager 获取原生广告");
                return this._curAdAgent.getNativeAdData(args);
            }
            return null;
        }
        showStatementAds(data) {
            let res = { "type": -1, "node": null };
            if (!this.checkShowAdTime()) {
                utils.showLog("显示结算页面广告时间未达限制！");
                return res;
            }
            if (this._curAdAgent) {
                if (PlatUtils.IsWechat || PlatUtils.IsBaidu || PlatUtils.IsOPPO || PlatUtils.IsTest) {
                    return this._curAdAgent.showStatementAds(data);
                }
            }
            if (PlatUtils.IsQTT) {
                utils.adManager.showInteractiveAd();
            }
            else {
                utils.adManager.ShowInterstitial();
            }
            utils.showLog("非oppo和微信平台正常显示结算广告");
            return res;
        }
        createNativeAd(yzItem) {
            if (this._curAdAgent) {
                this._curAdAgent.createNativeAd(yzItem);
            }
        }
        showBeforGameOverAd(level, levelStatus, rewardValue, closeCallFunc, rewardFunc) {
            if (PlatUtils.IsOPPO || PlatUtils.IsVIVO || PlatUtils.IsDouyin || PlatUtils.IsBaidu || PlatUtils.IsWechat || PlatUtils.IsQQ || PlatUtils.IsNativeAndroid || utils._tool_Broswer) {
                if (utils.getServelCofig() && utils.getServelCofig().befor_ad_min_level && utils.getServelCofig().befor_ad_min_level >= level) {
                    utils.showLog(`${level} >>服务器配置结算前广告在${utils.getServelCofig().befor_ad_min_level}关后才能显示！`);
                    closeCallFunc && closeCallFunc();
                    return;
                }
                utils.showLog("显示结算前广告：  #Level= ", level, " #LevelStatys=", levelStatus, " #rewardValue = ", rewardValue);
                utils.currentLevel = level;
                utils.isSuccess = levelStatus == LevelStatus.GameWin;
                utils.rewardCallFunc = rewardFunc;
                utils.rewardCloseFunc = closeCallFunc;
                utils.rewardValue = rewardValue;
                if (PlatUtils.IsNativeAndroid) {
                    if (utils.isSuccess) {
                        utils.yzRedBagInfo.progress++;
                    }
                    if (utils.canShowRedBag() && utils.yzRedBagInfo.progress >= utils.yzRedBagInfo.totalProgress) {
                        utils.showLog("当前红包进度已满，显示获得红包窗口！");
                        utils.showOpenRedBagPanel({ showType: 2 });
                        return;
                    }
                }
                let adType = utils.adManager.checkShowBeforGameOverAd(level, levelStatus == LevelStatus.GameWin);
                console.log("adType。。。。。", adType);
                switch (adType) {
                    case BeForGameOverAdId.SharePanel:
                        utils.recordEnd();
                        utils.showShareRecordPanel();
                        console.log("分享。。。。。");
                        break;
                    case BeForGameOverAdId.GoldBox:
                        utils.adManager.showRewardBoxPanel();
                        console.log("宝箱。。。。。");
                        break;
                    case BeForGameOverAdId.Turntable:
                        utils.adManager.showrewardTurnTablePanel();
                        console.log("转盘。。。。。");
                        break;
                    case BeForGameOverAdId.CreateShortCut:
                        utils.adManager.showRewardShortCutPanel();
                        break;
                    case BeForGameOverAdId.RecGame:
                        utils.adManager.showRecGamePanel();
                        break;
                    case BeForGameOverAdId.LuckBox:
                        utils.adManager.showRewardLuckBoxPanel();
                        console.log("幸运宝箱。。。。。");
                        break;
                    default:
                        closeCallFunc && closeCallFunc();
                        break;
                }
            }
            else {
                closeCallFunc && closeCallFunc();
            }
        }
        getRewardCloseAndShowCallFunc(index) {
            let result = null;
            switch (index) {
                case 1:
                    result = utils.adManager.showShareRecordPanel;
                    break;
                case 2:
                    result = utils.adManager.showRewardBoxPanel;
                    break;
                case 3:
                    result = utils.adManager.showrewardTurnTablePanel;
                    break;
                case 4:
                    result = utils.adManager.showRewardShortCutPanel;
                    break;
                case 5:
                    result = utils.adManager.showRecGamePanel;
                    break;
                case 6:
                    result = utils.adManager.showRewardLuckBoxPanel;
                    break;
            }
            return result;
        }
        checkShowBeforGameOverAd(level, isSuccess) {
            if (!this._curAdAgent || !utils.getServelCofig()) {
                utils.showLog("组件初始化失败！");
                return BeForGameOverAdId.None;
            }
            let befor_game_over_reward_share_interval = utils.ServerConfig.befor_game_over_share_interval;
            let befor_game_over_reward_box_interval = utils.ServerConfig.befor_game_over_reward_box_interval;
            let befor_game_over_turntable_interval = utils.ServerConfig.befor_game_over_turntable_interval;
            let befor_game_over_shortcut_interval = utils.ServerConfig.auto_desktop_interval;
            let befor_game_over_rec_game_interval = utils.ServerConfig.befor_game_over_rec_game_interval;
            let befor_game_over_luck_box_interval = utils.ServerConfig.befor_game_over_luck_box_interval;
            let befor_game_over_reward_share_type = utils.ServerConfig.befor_game_over_share_type;
            let befor_game_over_reward_box_type = utils.ServerConfig.befor_game_over_reward_box_type;
            let befor_game_over_turntable_type = utils.ServerConfig.befor_game_over_turntable_type;
            let befor_game_over_rec_game_type = utils.ServerConfig.befor_game_over_rec_game_type;
            let befor_game_over_luck_box_type = utils.ServerConfig.befor_game_over_luck_box_type;
            let befor_game_over_shortcut_type = utils.ServerConfig.auto_desktop_type;
            let befor_game_over_is_sync = utils.ServerConfig.befor_game_over_sync_list;
            let befor_game_over_sync_interval = utils.ServerConfig.befor_game_over_sync_interval;
            let befor_game_over_sync_type = utils.ServerConfig.befor_game_over_sync_type;
            if (utils.Tool_Broswer) {
                befor_game_over_rec_game_type = "all";
                befor_game_over_rec_game_interval = 4;
                befor_game_over_luck_box_type = "all";
                befor_game_over_luck_box_interval = 3;
            }
            let result = BeForGameOverAdId.None;
            let isShow = false;
            if (befor_game_over_is_sync) {
                utils.showLog("进入同步显示弹窗判断：", befor_game_over_is_sync, "<<interval=", befor_game_over_sync_interval, "<<<type", befor_game_over_sync_type);
                switch (befor_game_over_sync_type) {
                    case "all":
                        isShow = true;
                        break;
                    case "success":
                        isShow = isSuccess;
                        break;
                    case "fail":
                        isShow = !isSuccess;
                        break;
                }
                if (isShow && befor_game_over_sync_interval && level % befor_game_over_sync_interval == 0) {
                    let syncTypes = befor_game_over_is_sync.split("");
                    for (let i = 0; i < syncTypes.length; i++) {
                        if (i == 0) {
                            result = this.beforRewardTypes[parseInt(syncTypes[i]) - 1];
                        }
                        let closeFunc = null;
                        if (i == syncTypes.length - 1) {
                            closeFunc = utils.rewardCloseFunc;
                        }
                        else {
                            closeFunc = this.getRewardCloseAndShowCallFunc(parseInt(syncTypes[i + 1]));
                        }
                        switch (syncTypes[i]) {
                            case "1":
                                utils.shareRecordPanelCloseFunc = closeFunc;
                                break;
                            case "2":
                                utils.rewardBoxPanelCloseFunc = closeFunc;
                                break;
                            case "3":
                                utils.turnTablePanelCloseFunc = closeFunc;
                                break;
                            case "4":
                                utils.rewardShortCutPanelCloseFunc = closeFunc;
                                break;
                            case "5":
                                utils.rewardRecGamePanelCloseFunc = closeFunc;
                                break;
                            case "6":
                                utils.rewardLuckBoxPanelCloseFunc = closeFunc;
                                break;
                        }
                    }
                }
            }
            else {
                let showCount = 0;
                if (befor_game_over_reward_share_type) {
                    showCount++;
                }
                if (befor_game_over_reward_box_type) {
                    showCount++;
                }
                if (befor_game_over_turntable_type) {
                    showCount++;
                }
                if (befor_game_over_shortcut_type) {
                    showCount++;
                }
                if (befor_game_over_luck_box_type) {
                    showCount++;
                }
                utils.showLog("显示的类型" + showCount + "种，进行顺序切换判断,上一次显示的类型为：" + this._lastShowGameOverAdType);
                isShow = true;
                if (befor_game_over_reward_share_interval && level % befor_game_over_reward_share_interval == 0) {
                    utils.showLog("进入显示分享奖励弹窗判断", befor_game_over_reward_share_type, "<<");
                    if (showCount > 1) {
                        isShow = this._lastShowGameOverAdType != BeForGameOverAdId.SharePanel;
                    }
                    if (isShow) {
                        switch (befor_game_over_reward_share_type) {
                            case "all":
                                utils.showLog(`间隔${befor_game_over_reward_share_interval}关，显示分享奖励弹窗！`);
                                result = BeForGameOverAdId.SharePanel;
                                break;
                            case "success":
                                if (isSuccess) {
                                    result = BeForGameOverAdId.SharePanel;
                                    utils.showLog(`游戏胜利 >> 间隔${befor_game_over_reward_share_interval}关，显示分享奖励弹窗！`);
                                }
                                break;
                            case "fail":
                                if (!isSuccess) {
                                    result = BeForGameOverAdId.SharePanel;
                                    utils.showLog(`游戏失败 >> 间隔${befor_game_over_reward_share_interval}关，显示分享奖励弹窗！`);
                                }
                                break;
                        }
                    }
                }
                if (result != BeForGameOverAdId.None) {
                    utils.showLog("结算前广告验证完成，显示结算前广告类型：", result);
                    this._lastShowGameOverAdType = result;
                    return result;
                }
                if (befor_game_over_reward_box_interval && level % befor_game_over_reward_box_interval == 0) {
                    utils.showLog("进入显示宝箱判断", befor_game_over_reward_box_type, "<<");
                    if (showCount > 1) {
                        isShow = this._lastShowGameOverAdType != BeForGameOverAdId.GoldBox;
                    }
                    if (isShow) {
                        switch (befor_game_over_reward_box_type) {
                            case "all":
                                result = BeForGameOverAdId.GoldBox;
                                utils.showLog(`间隔${befor_game_over_reward_box_interval}关，显示宝箱弹窗！`);
                                break;
                            case "success":
                                if (isSuccess) {
                                    result = BeForGameOverAdId.GoldBox;
                                    utils.showLog(`游戏胜利 >> 间隔${befor_game_over_reward_box_interval}关，显示宝箱弹窗！`);
                                }
                                break;
                            case "fail":
                                if (!isSuccess) {
                                    result = BeForGameOverAdId.GoldBox;
                                    utils.showLog(`游戏失败 >> 间隔${befor_game_over_reward_box_interval}关，显示宝箱弹窗！`);
                                }
                                break;
                        }
                    }
                }
                if (result != BeForGameOverAdId.None) {
                    utils.showLog("结算前广告验证完成，显示结算前广告类型：", result);
                    this._lastShowGameOverAdType = result;
                    return result;
                }
                if (befor_game_over_turntable_interval && level % befor_game_over_turntable_interval == 0) {
                    utils.showLog("进入显示抽奖弹窗判断", befor_game_over_turntable_type, "<<");
                    if (showCount > 1) {
                        isShow = this._lastShowGameOverAdType != BeForGameOverAdId.Turntable;
                    }
                    if (isShow) {
                        switch (befor_game_over_turntable_type) {
                            case "all":
                                result = BeForGameOverAdId.Turntable;
                                utils.showLog(`间隔${befor_game_over_turntable_interval}关，显示抽奖弹窗！`);
                                break;
                            case "success":
                                if (isSuccess) {
                                    result = BeForGameOverAdId.Turntable;
                                    utils.showLog(`游戏胜利 >> 间隔${befor_game_over_turntable_interval}关，显示抽奖弹窗！`);
                                }
                                break;
                            case "fail":
                                if (!isSuccess) {
                                    result = BeForGameOverAdId.Turntable;
                                    utils.showLog(`游戏失败 >> 间隔${befor_game_over_turntable_interval}关，显示抽奖弹窗！`);
                                }
                                break;
                        }
                    }
                }
                if (result != BeForGameOverAdId.None) {
                    utils.showLog("结算前广告验证完成，显示结算前广告类型：", result);
                    this._lastShowGameOverAdType = result;
                    return result;
                }
                if (befor_game_over_shortcut_interval && level % befor_game_over_shortcut_interval == 0) {
                    utils.showLog("进入显示添加桌面弹窗判断", befor_game_over_shortcut_type, "<<");
                    if (showCount > 1) {
                        isShow = this._lastShowGameOverAdType != BeForGameOverAdId.CreateShortCut;
                    }
                    if (isShow) {
                        switch (befor_game_over_shortcut_type) {
                            case "all":
                                result = BeForGameOverAdId.CreateShortCut;
                                utils.showLog(`间隔${befor_game_over_shortcut_interval}关，显示添加桌面弹窗！`);
                                break;
                            case "success":
                                if (isSuccess) {
                                    result = BeForGameOverAdId.CreateShortCut;
                                    utils.showLog(`游戏胜利 >> 间隔${befor_game_over_shortcut_interval}关，显示添加桌面弹窗！`);
                                }
                                break;
                            case "fail":
                                if (!isSuccess) {
                                    result = BeForGameOverAdId.CreateShortCut;
                                    utils.showLog(`游戏失败 >> 间隔${befor_game_over_shortcut_interval}关，显示添加桌面弹窗！`);
                                }
                                break;
                        }
                    }
                }
                else {
                    utils.showLog("结算前广告验证完成，不显示结算前广告！");
                }
                if (result != BeForGameOverAdId.None) {
                    utils.showLog("结算前广告验证完成，显示结算前广告类型：", result);
                    this._lastShowGameOverAdType = result;
                    return result;
                }
                if (befor_game_over_rec_game_interval && level % befor_game_over_rec_game_interval == 0) {
                    utils.showLog("进入显示游戏推荐弹窗判断", befor_game_over_rec_game_type, "<<");
                    if (showCount > 1) {
                        isShow = this._lastShowGameOverAdType != BeForGameOverAdId.RecGame;
                    }
                    if (isShow) {
                        switch (befor_game_over_rec_game_type) {
                            case "all":
                                result = BeForGameOverAdId.RecGame;
                                utils.showLog(`间隔${befor_game_over_rec_game_interval}关，显示游戏推荐弹窗！`);
                                break;
                            case "success":
                                if (isSuccess) {
                                    result = BeForGameOverAdId.RecGame;
                                    utils.showLog(`游戏胜利 >> 间隔${befor_game_over_rec_game_interval}关，显示游戏推荐弹窗！`);
                                }
                                break;
                            case "fail":
                                if (!isSuccess) {
                                    result = BeForGameOverAdId.RecGame;
                                    utils.showLog(`游戏失败 >> 间隔${befor_game_over_rec_game_interval}关，显示游戏推荐弹窗！`);
                                }
                                break;
                        }
                    }
                }
                else {
                    utils.showLog("结算前广告验证完成，不显示更多游戏广告！");
                }
                if (result != BeForGameOverAdId.None) {
                    utils.showLog("结算前广告验证完成，显示结算前广告类型：" + result);
                    this._lastShowGameOverAdType = result;
                    return result;
                }
                if (befor_game_over_luck_box_interval && level % befor_game_over_luck_box_interval == 0) {
                    utils.showLog("进入显示幸运宝箱弹窗判断" + befor_game_over_luck_box_type + "<<");
                    if (showCount > 1) {
                        isShow = this._lastShowGameOverAdType != BeForGameOverAdId.LuckBox;
                    }
                    if (isShow) {
                        switch (befor_game_over_luck_box_type) {
                            case "all":
                                result = BeForGameOverAdId.LuckBox;
                                utils.showLog(`间隔${befor_game_over_luck_box_interval}关，显示游戏推荐弹窗！`);
                                break;
                            case "success":
                                if (isSuccess) {
                                    result = BeForGameOverAdId.LuckBox;
                                    utils.showLog(`游戏胜利 >> 间隔${befor_game_over_luck_box_interval}关，显示游戏推荐弹窗！`);
                                }
                                break;
                            case "fail":
                                if (!isSuccess) {
                                    result = BeForGameOverAdId.LuckBox;
                                    utils.showLog(`游戏失败 >> 间隔${befor_game_over_luck_box_interval}关，显示游戏推荐弹窗！`);
                                }
                                break;
                        }
                    }
                }
                else {
                    utils.showLog("结算前广告验证完成，不显示幸运宝箱弹窗！");
                }
            }
            utils.showLog("结算前广告验证完成，显示结算前广告类型：", result);
            this._lastShowGameOverAdType = result;
            return result;
        }
        showRewardShortCutPanel() {
            if (!utils._isConfigInit) {
                utils.showLog("warn:" + "组件配置未初始化!");
                return null;
            }
            if (utils.config.otherconfig.rewardShortCutPanel) {
                let node = cc.instantiate(utils.config.otherconfig.rewardShortCutPanel);
                if (node) {
                    if (this.rewardShortCutPanel && cc.isValid(this.rewardShortCutPanel)) {
                        this.rewardShortCutPanel.destroy();
                    }
                    this.rewardShortCutPanel = node;
                    cc.addToStage(node, 1000);
                    return node;
                }
            }
            else {
                utils.showLog("未找到预制体 rewardShortCutPanel, 请查看CommonUtils组件上是否赋值！");
            }
            return null;
        }
        showShareRecordPanel(params = null) {
            if (!utils._isConfigInit) {
                utils.showLog("warn:" + "组件配置未初始化!");
                return null;
            }
            if (utils.config.otherconfig.shareRecordPanel) {
                let node = cc.instantiate(utils.config.otherconfig.shareRecordPanel);
                if (node) {
                    if (utils.shareRecordPanel && cc.isValid(utils.shareRecordPanel)) {
                        utils.shareRecordPanel.destroy();
                    }
                    utils.shareRecordPanel = node;
                    utils.reSizeObject(utils.shareRecordPanel, params);
                    cc.addToStage(node, 49);
                    return node;
                }
            }
            else {
                utils.showLog("未找到预制体 ShareRecordPanel, 请查看CommonUtils组件上是否赋值！");
            }
            return null;
        }
        showRewardBoxPanel() {
            if (!utils._isConfigInit) {
                utils.showLog("warn:" + "组件配置未初始化!");
                return null;
            }
            if (utils.config.otherconfig.rewardBoxPanel) {
                let node = cc.instantiate(utils.config.otherconfig.rewardBoxPanel);
                if (node) {
                    if (this.rewardBoxPanel && cc.isValid(this.rewardBoxPanel)) {
                        this.rewardBoxPanel.destroy();
                    }
                    this.rewardBoxPanel = node;
                    cc.addToStage(node, 50);
                    return node;
                }
            }
            else {
                utils.showLog("未找到预制体 rewardBoxPanel, 请查看CommonUtils组件上是否赋值！");
            }
            return null;
        }
        showRecGamePanel() {
            if (!utils._isConfigInit) {
                utils.showLog("warn:" + "组件配置未初始化!");
                return null;
            }
            if (utils.config.otherconfig.beforGameOverRecGamesPanel && utils.getRecommondGameList()) {
                let node = cc.instantiate(utils.config.otherconfig.beforGameOverRecGamesPanel);
                if (node) {
                    if (this.rewardRecGamePanel && cc.isValid(this.rewardRecGamePanel)) {
                        this.rewardRecGamePanel.destroy();
                    }
                    this.rewardRecGamePanel = node;
                    cc.addToStage(node, 1000);
                    let recMoreGame = this.rewardRecGamePanel.getComponent(BeforGameOverRecGamesPanel);
                    recMoreGame._location = SubLocation.isBeforGameOverAd;
                    recMoreGame.init(utils.getRecommondGameList());
                    recMoreGame.show();
                    return node;
                }
            }
            else {
                utils.showLog("未找到预制体 moreGamesPanel, 请查看CommonUtils组件上是否赋值！");
            }
            return null;
        }
        showrewardTurnTablePanel() {
            if (!utils._isConfigInit) {
                utils.showLog("warn:" + "组件配置未初始化!");
                return null;
            }
            if (utils.config.otherconfig.rewardTurnTablePanel) {
                let node = cc.instantiate(utils.config.otherconfig.rewardTurnTablePanel);
                if (node) {
                    if (this.rewardTurnTablePanel && cc.isValid(this.rewardTurnTablePanel)) {
                        this.rewardTurnTablePanel.destroy();
                    }
                    cc.addToStage(node, 51);
                    return node;
                }
            }
            else {
                utils.showLog("未找到预制体 rewardTurnTablePanel, 请查看CommonUtils组件上是否赋值！");
            }
            return null;
        }
        checkShowAdTime() {
            if (!utils._isConfigInit) {
                utils.showLog("warn:" + "组件配置未初始化!");
                return false;
            }
            if (PlatUtils.IsOPPO) {
                if (utils.config.oppoconfig.version != utils.ServerConfig.version) {
                    utils.showLog(`当前的版本号${utils.config.oppoconfig.version}与oppo配置的版本号${utils.ServerConfig.version}不一致，不做广告时间判断`);
                    return true;
                }
            }
            let curTime = new Date().getTime();
            let interval = (curTime - utils._gameEntryTime) / 1000;
            let showAdTime = 0;
            if (utils.ServerConfig && utils.ServerConfig.show_ad_time) {
                showAdTime = utils.ServerConfig.show_ad_time;
            }
            utils.showLog("验证当前广告显示时间：#showAdTime=" + showAdTime + " #interval=" + interval);
            if (interval >= showAdTime) {
                return true;
            }
            return false;
        }
        showBlockAd(parme) {
            if (this._curAdAgent && PlatUtils.IsQQ) {
                this._curAdAgent.showBlockAd(parme);
            }
        }
        hideBlockAd(parme) {
            if (this._curAdAgent && PlatUtils.IsQQ) {
                this._curAdAgent.hideBlockAd();
            }
        }
    }

    const ST_ServerUrl$1 = "http://apps.youletd.com/gss?";
    const POST_ServerUrl = "http://report.youletd.com/gss?";
    let ST_DefaultServerConfig$1 = "";
    const ST_NativeInsertAdClickTimes = "NativeInsertAdClickTimes";
    const ST_LastDateTime = "LastDateTime";
    class YZ_Tool_Vivo {
        constructor() {
            this._sysInfo = null;
            this.qg = Laya.Browser.window.qg;
            this._serverConfig = null;
            this._nativeInsertAdClickTimes = 0;
            this._shortcutCreated = false;
            this._uid = "0";
            this._source = "";
            this._service_uid = "0";
            this._loginTime = 0;
            this._loginInterval = 30;
            this._reportLoginTime = 0;
            this._reportLoginInterval = 30;
            this.isReport = false;
        }
        get SysInfo() {
            return this._sysInfo;
        }
        get ServerConfig() {
            return this._serverConfig;
        }
        get NativeInsertAdClickTimes() {
            return this._nativeInsertAdClickTimes;
        }
        get ShortcutCreated() {
            return this._shortcutCreated;
        }
        get uid() {
            if (this._service_uid != "0")
                return this._uid;
            this._login();
            return "0";
        }
        get serviceId() {
            if (this._service_uid != "0")
                return this._service_uid;
            this.reportLogin();
            return "0";
        }
        _login() {
            let curTime = new Date().getTime();
            let interval = (curTime - this._loginTime) / 1000;
            if (interval > 0 && interval < this._loginInterval) {
                utils.showLog(`登录请求间隔小于：${this._loginInterval}秒`);
                return;
            }
            this._loginTime = curTime;
            let self = this;
            utils.showLog("vivo暂时不获取uid，uid全部为0");
            this._uid = "0";
            this.reportLogin();
        }
        reportLogin() {
            if (this.isReport)
                return;
            this.isReport = true;
            let self = this;
            let curTime = new Date().getTime();
            let interval = (curTime - this._reportLoginTime) / 1000;
            if (interval > 0 && interval < this._reportLoginInterval) {
                utils.showLog(`上报登录获取UID小于：${this._reportLoginInterval}秒`);
                return;
            }
            this._reportLoginTime = curTime;
            let method = "m=login";
            let url = POST_ServerUrl + method + `&device_data=${encodeURI(JSON.stringify(this._sysInfo))}`;
            utils.commomHttpRequest(url, (ret, data) => {
                if (ret) {
                    if (data) {
                        let result = JSON.parse(data);
                        utils.showLog("data=" + data);
                        utils.showLog("result=" + result);
                        utils.showLog("result.uid=" + result.uid);
                        if (result.uid) {
                            self._service_uid = "" + result.uid;
                            utils.showLog("服务器请求登录成功! _service_uid=" + self._service_uid);
                            cc.setItem(YZ_Constant.ST_SERVICE_UID, self._service_uid);
                        }
                    }
                }
                else {
                    utils.showLog("获取数据失败1");
                }
                this.isReport = false;
            });
        }
        init(data) {
            if (PlatUtils.IsVIVO) {
                qg.isStartupByShortcut({
                    success: (status) => {
                        if (status) {
                            utils.showLog('通过桌面图标启动应用');
                            this._source = "shortCut";
                        }
                        else {
                            utils.showLog('不是通过桌面图标启动应用');
                        }
                    }
                });
                if (data) {
                    let configObj = JSON.parse(data);
                    if (configObj && configObj.vivo) {
                        ST_DefaultServerConfig$1 = JSON.stringify(configObj.vivo);
                    }
                }
                this._service_uid = cc.getItem(YZ_Constant.ST_SERVICE_UID);
                this._service_uid = this._service_uid ? this._service_uid : "0";
                this._sysInfo = qg.getSystemInfoSync();
                if (this._sysInfo) {
                    utils.showLog("VIVO 小游戏平台信息: ", JSON.stringify(this.SysInfo));
                }
                this._uid = cc.getItem(YZ_Constant.ST_UID);
                this._uid = this._uid ? this._uid : "0";
                this._loadConfig();
                this._nativeInsertAdClickTimes = cc.getItem(ST_NativeInsertAdClickTimes);
                let day = cc.getItem(ST_LastDateTime);
                let curDate = new Date();
                if (day != curDate.toDateString()) {
                    this._nativeInsertAdClickTimes = 0;
                    cc.setItem(ST_NativeInsertAdClickTimes, 0);
                }
                if (this.isOverMiniVersion("1041")) {
                    utils.registerServerInitEvent(() => {
                        this.checkHasShortCut((res) => {
                            if (!res && this.ServerConfig && this.ServerConfig.start_auto_create_short_cut_time) {
                                utils.SendEvent("组件初始化成功，弹出自动创建桌面！");
                                utils.showLog(`组件初始化成功，${this.ServerConfig.start_auto_create_short_cut_time}秒后弹出自动创建桌面！`);
                                setTimeout(() => {
                                    this.createShortcut((res) => {
                                        if (res) {
                                            utils.showLog("自动创建桌面成功！");
                                        }
                                        else {
                                            utils.showLog("自动创建桌面失败！");
                                        }
                                    });
                                }, this.ServerConfig.start_auto_create_short_cut_time * 1000);
                            }
                        });
                    }, this);
                }
            }
        }
        _loadConfig() {
            if (PlatUtils.IsVIVO) {
                let method = "m=g";
                utils.commomHttpRequest(ST_ServerUrl$1 + method, (ret, data) => {
                    if (ret) {
                        utils.showLog("VIVO服务器配置数据获取成功: data = ", data);
                        if (data) {
                            let result = JSON.parse(data);
                            if (result) {
                                if (!utils.DebugLoacalConfig) {
                                    this._serverConfig = result;
                                    if (this._serverConfig.is_show_log_view && this._serverConfig.is_show_log_view == "true") {
                                        utils.isShowViewLog = true;
                                        utils.showViewLog();
                                    }
                                }
                                else {
                                    utils.showLog("开启了本地数据测试，使用本地配置!");
                                }
                            }
                            else {
                                utils.showLog("VIVO服务器配置数据不是合法的JSON数据, 使用本地配置!");
                            }
                        }
                    }
                    else {
                        utils.showLog("VIVO服务器配置数据获取失败, 使用本地配置!");
                    }
                    if (!this._serverConfig) {
                        this._serverConfig = JSON.parse(ST_DefaultServerConfig$1);
                    }
                    else {
                        if (this._serverConfig.is_local_pos_id
                            && this._serverConfig.is_local_pos_id == "false") {
                            utils.showLog("使用服务器下发的广告id");
                            utils.config.vivoconfig.bannerId = this._serverConfig.banner_pos_id;
                            utils.config.vivoconfig.insertId = this._serverConfig.intersititia_pos_id;
                            utils.config.vivoconfig.videoId = this._serverConfig.video_pos_id;
                            utils.config.vivoconfig.nativeInsertIds = this.ServerConfig.native_intersititial_pos_id;
                            utils.config.vivoconfig.nativeBannerIds = this.ServerConfig.native_banner_pos_id;
                            utils.config.vivoconfig.nativeTryGameIds = this.ServerConfig.native_trygame_pos_id;
                        }
                        else {
                            utils.showLog("使用本地配置的广告ID");
                        }
                        if (this.ServerConfig.native_banner_configs) {
                            for (let i = 0; i < this.ServerConfig.native_banner_configs.length; i++) {
                                utils.config.vivoconfig.setNativeBannerInfo(this.ServerConfig.native_banner_configs[i].location, this.ServerConfig.native_banner_configs[i]);
                            }
                        }
                    }
                    utils.emitServerInitEvent();
                });
            }
        }
        isOverMiniVersion(miniVersion) {
            if (PlatUtils.IsVIVO) {
                if (this._sysInfo && this._sysInfo.platformVersionCode) {
                    return this._sysInfo.platformVersionCode >= miniVersion;
                }
            }
            return false;
        }
        createShortcut(callback) {
            let callbackFunc = callback;
            if (PlatUtils.IsVIVO && this.canCreateShortcut()) {
                let self = this;
                this.qg.installShortcut({
                    success: function () {
                        utils.showLog('桌面图标创建成功！');
                        self._shortcutCreated = true;
                        if (callbackFunc) {
                            callbackFunc(true);
                        }
                    },
                    fail: function (err) {
                        self._shortcutCreated = true;
                        utils.showLog('vivo创建失败' + err);
                        if (callbackFunc) {
                            callbackFunc(false);
                        }
                    },
                    complete: function () {
                    }
                });
            }
            else {
                if (callbackFunc) {
                    callbackFunc(false);
                }
            }
        }
        checkHasShortCut(callBack) {
            this.qg.hasShortcutInstalled({
                success: (res) => {
                    utils.showLog("检测桌面快捷方式是否已经创建过: result=" + res);
                    if (res == false) {
                        this._shortcutCreated = false;
                        callBack && callBack(false);
                    }
                    else {
                        this._shortcutCreated = true;
                        callBack && callBack(true);
                    }
                },
                fail: function () {
                    utils.showLog("检测失败！");
                },
                complete: function () {
                    utils.showLog("检测完成！");
                }
            });
        }
        canCreateShortcut() {
            if (PlatUtils.IsVIVO) {
                return this.isOverMiniVersion("1041");
            }
            return false;
        }
        countNativeInserClick() {
            this._nativeInsertAdClickTimes++;
            cc.setItem(ST_NativeInsertAdClickTimes, this._nativeInsertAdClickTimes);
        }
        share(callback) {
            if (!this.isOverMiniVersion("1052")) {
                callback(false, "当前平台不支持");
                return;
            }
            this.qg.share();
            callback && callback(true);
            return;
        }
        postLevel(level, status, levelName) {
            if (PlatUtils.IsVIVO) {
                let method = "m=rlevel";
                let url = POST_ServerUrl + method + `&level_id=${level}&level_name=${encodeURI(levelName)}&status=${status}`;
                utils.commomHttpRequest(url, function (ret, data) {
                    if (ret) {
                        utils.showLog("关卡数据上报成功！");
                    }
                    else {
                        utils.showLog("关卡数据上报失败！");
                    }
                }.bind(this));
            }
        }
        sendEvent(eventName) {
            if (PlatUtils.IsVIVO) {
                let method = "m=revent";
                let url = POST_ServerUrl + method + `&event=${encodeURI(eventName)}`;
                utils.commomHttpRequest(url, function (ret, data) {
                    if (ret) {
                        utils.showLog("上报自定义事件成功！");
                    }
                    else {
                        utils.showLog("上报自定义事件失败！");
                    }
                }.bind(this));
            }
        }
        showToast(msg) {
            if (PlatUtils.IsVIVO) {
                qg.showToast({
                    message: msg,
                    duration: 2000
                });
            }
        }
    }

    const ST_ServerUrl$2 = "http://apps.youletd.com/gss?";
    const POST_ServerUrl$1 = "http://report.youletd.com/gss?";
    let ST_DefaultServerConfig$2 = "";
    const ST_NativeInsertAdClickTimes$1 = "NativeInsertAdClickTimes";
    const ST_LastDateTime$1 = "LastDateTime";
    const ST_InsertAdShowCounts = "NativeInsertAdShowCount";
    const ST_BannerAdCloseCounts = "ST_BannerAdCloseCounts";
    const ST_YZBannerShowCounts = "YZBannerShowCounts";
    class OppoTool {
        constructor() {
            this._sysInfo = null;
            this._source = "";
            this._serverConfig = null;
            this._nativeInsertAdClickTimes = 0;
            this._insertAdShowCounts = 0;
            this._bannerAdCloseCounts = 0;
            this._shortcutCreated = false;
            this._uid = "0";
            this._service_uid = "0";
            this.qg = Laya.Browser.window.qg;
            this._reloadTimes = 6;
            this._curloadTimes = 0;
            this._yzBannerShowCounts = 0;
            this._loginTime = 0;
            this._loginInterval = 30;
            this._reportLoginTime = 0;
            this._reportLoginInterval = 30;
            this.isReport = false;
            this._rec_game_banner = null;
            this._rec_game_portal = null;
        }
        get SysInfo() {
            return this._sysInfo;
        }
        get ServerConfig() {
            return this._serverConfig;
        }
        gameVersion() {
            return utils.config.oppoconfig.version;
        }
        get NativeInsertAdClickTimes() {
            return this._nativeInsertAdClickTimes;
        }
        get insertAdShowCounts() {
            return this._insertAdShowCounts;
        }
        get bannerAdCloseCounts() {
            return this._bannerAdCloseCounts;
        }
        vibrate(isLong) {
            if (isLong) {
                this.qg.vibrateLong();
            }
            else {
                this.qg.vibrateShort();
            }
        }
        get ShortcutCreated() {
            return this._shortcutCreated;
        }
        get uid() {
            if (this._uid != "0")
                return this._uid;
            this._login();
            return "0";
        }
        get serviceId() {
            if (this._service_uid != "0")
                return this._service_uid;
            console.log("获取服务器地址");
            this.reportLogin();
            return "0";
        }
        checkHasShortCut(callBack) {
            this.qg.hasShortcutInstalled({
                success: (res) => {
                    utils.showLog("检测桌面快捷方式是否已经创建过: result=" + res);
                    if (res == false) {
                        this._shortcutCreated = false;
                        callBack && callBack(false);
                    }
                    else {
                        this._shortcutCreated = true;
                        callBack && callBack(true);
                    }
                },
                fail: function () {
                    utils.showLog("检测失败！");
                },
                complete: function () {
                    utils.showLog("检测完成！");
                }
            });
        }
        init(data) {
            if (PlatUtils.IsOPPO) {
                this._sysInfo = this.qg.getSystemInfoSync();
                if (this.SysInfo) {
                    utils.showLog("OPPO 小游戏平台信息: " + JSON.stringify(this.SysInfo));
                }
                if (data) {
                    let configObj = JSON.parse(data);
                    if (configObj && configObj.oppo) {
                        ST_DefaultServerConfig$2 = JSON.stringify(configObj.oppo);
                    }
                }
                if (this.isOverMiniVersion("1050")) {
                    let options = this.qg.getLaunchOptionsSync();
                    if (options && options.referrerInfo && options.referrerInfo.package) {
                        utils.showLog("获取到小程序启动来源：" + options.referrerInfo.package);
                        this._source = options.referrerInfo.package;
                    }
                }
                else {
                    utils.showLog(`小程序版本低于1050，获取不到小程序启动来源！`);
                }
                this._login();
                let appId = utils.config.oppoconfig.appID + "_";
                this._nativeInsertAdClickTimes = cc.getItem(appId + ST_NativeInsertAdClickTimes$1);
                this._insertAdShowCounts = cc.getItem(appId + ST_InsertAdShowCounts);
                this._bannerAdCloseCounts = cc.getItem(appId + ST_BannerAdCloseCounts);
                this._yzBannerShowCounts = cc.getItem(appId + ST_YZBannerShowCounts);
                let day = cc.getItem(appId + ST_LastDateTime$1);
                let curDate = new Date();
                if (day != curDate.toDateString()) {
                    this._nativeInsertAdClickTimes = 0;
                    this._insertAdShowCounts = 0;
                    this._bannerAdCloseCounts = 0;
                    this._yzBannerShowCounts = 0;
                    cc.setItem(appId + ST_YZBannerShowCounts, 0);
                    cc.setItem(appId + ST_NativeInsertAdClickTimes$1, 0);
                    cc.setItem(appId + ST_InsertAdShowCounts, 0);
                    cc.setItem(appId + ST_LastDateTime$1, curDate.toDateString());
                }
                utils.registerServerInitEvent(() => {
                    if (this.isOverMiniVersion("1044")) {
                        this.checkHasShortCut((res) => {
                            if (!res && this.ServerConfig && this.ServerConfig.start_auto_create_short_cut_time) {
                                utils.showLog(`组件初始化成功，${this.ServerConfig.start_auto_create_short_cut_time}秒后弹出自动创建桌面！`);
                                utils.SendEvent("组件初始化成功，弹出自动创建桌面！");
                                setTimeout(() => {
                                    this.createShortcut((res) => {
                                        if (res) {
                                            utils.showLog("自动创建桌面成功！");
                                        }
                                        else {
                                            utils.showLog("自动创建桌面失败！");
                                        }
                                    });
                                }, this.ServerConfig.start_auto_create_short_cut_time * 1000);
                            }
                        });
                    }
                    if (this.canShowRecommend()) {
                        if (this.ServerConfig && this.ServerConfig.start_auto_show_rec_time) {
                            utils.showLog(`组件初始化成功，${utils.ServerConfig.start_auto_show_rec_time}秒后弹出自动创建桌面！`);
                            utils.SendEvent("组件初始化成功，弹出九宫格互推！");
                            setTimeout(() => {
                                this.showOppoGamePortal();
                            }, utils.ServerConfig.start_auto_show_rec_time * 1000);
                        }
                    }
                    else {
                        utils.showLog("当前平台不支持官方互推组件显示！");
                    }
                }, this);
                this._loadConfig();
            }
        }
        _loadConfig() {
            if (PlatUtils.IsOPPO) {
                let method = "m=g" + `&device_data=${encodeURI(JSON.stringify(this._sysInfo))}`;
                utils.commomHttpRequest(ST_ServerUrl$2 + method, (ret, data) => {
                    this._curloadTimes++;
                    let recall = false;
                    utils.showLog(`第${this._curloadTimes}次拉取服务器配置!`);
                    if (ret) {
                        utils.showLog("OPPO服务器配置数据获取成功: data = " + data);
                        if (data) {
                            let result = JSON.parse(data);
                            if (result) {
                                if (!utils.DebugLoacalConfig) {
                                    this._serverConfig = result;
                                    if (this._serverConfig.is_show_log_view && this._serverConfig.is_show_log_view == "true") {
                                        utils.isShowViewLog = true;
                                        utils.showViewLog();
                                    }
                                }
                                else {
                                    cc.warn("开启了本地数据测试，使用本地配置!");
                                }
                            }
                            else {
                                utils.showLog("OPPO服务器配置数据不是合法的JSON数据, 使用本地配置!");
                            }
                        }
                    }
                    else {
                        utils.showLog("OPPO服务器配置数据获取失败, 使用本地配置!");
                        if (this._curloadTimes < this._reloadTimes) {
                            utils.showLog("重新拉取配置!");
                            recall = true;
                        }
                    }
                    if (!this._serverConfig) {
                        this._serverConfig = JSON.parse(ST_DefaultServerConfig$2);
                    }
                    else if (this._curloadTimes == 1) {
                        if (this._serverConfig.is_local_pos_id
                            && this._serverConfig.is_local_pos_id == "false") {
                            utils.showLog("使用服务器下发的广告id");
                            utils.config.oppoconfig.bannerId = this.ServerConfig.banner_pos_id;
                            utils.config.oppoconfig.videoId = this.ServerConfig.video_pos_id;
                            utils.config.oppoconfig.nativeBannerIds = this.ServerConfig.native_banner_pos_id;
                            utils.config.oppoconfig.nativeTryGameIds = this.ServerConfig.native_trygame_pos_id;
                            utils.config.oppoconfig.recGameBannerId = this.ServerConfig.rec_game_banner_id;
                            utils.config.oppoconfig.recPortalId = this.ServerConfig.rec_portal_id;
                            utils.config.oppoconfig.nativeSingleAdIds = this.ServerConfig.native_single_pos_id || utils.config.oppoconfig.nativeSingleAdIds;
                        }
                        else {
                            utils.showLog("使用本地配置的广告ID");
                        }
                        if (this.ServerConfig.native_banner_configs) {
                            for (let i = 0; i < this.ServerConfig.native_banner_configs.length; i++) {
                                utils.showLog("获取到原生广告配置....." + JSON.stringify(this.ServerConfig.native_banner_configs));
                                utils.config.oppoconfig.setNativeBannerInfo(this.ServerConfig.native_banner_configs[i].location, this.ServerConfig.native_banner_configs[i]);
                            }
                        }
                    }
                    if (this._curloadTimes == 1) {
                        utils.emitServerInitEvent();
                    }
                    if (recall) {
                        this._loadConfig();
                    }
                });
            }
        }
        isOverMiniVersion(miniVersion) {
            if (PlatUtils.IsOPPO) {
                if (this._sysInfo) {
                    utils.showLog("curPlatVersion = " + this._sysInfo.platformVersion + "    miniVersion = " + miniVersion + "     " + this._sysInfo.platformVersion >= miniVersion);
                    return this._sysInfo.platformVersion >= miniVersion;
                }
            }
            return false;
        }
        hideDefaultLoadingPage() {
            if (PlatUtils.IsOPPO) {
                this.qg.loadingComplete({
                    complete: function (res) { }
                });
            }
        }
        countNativeInserClick() {
            this._nativeInsertAdClickTimes++;
            cc.setItem(utils.config.oppoconfig.appID + "_" + ST_NativeInsertAdClickTimes$1, this._nativeInsertAdClickTimes);
        }
        get yzBannerShowCounts() {
            return this._yzBannerShowCounts;
        }
        countYzBannerShowCount() {
            this._yzBannerShowCounts++;
            cc.setItem(utils.config.oppoconfig.appID + "_" + ST_YZBannerShowCounts, this._yzBannerShowCounts);
        }
        countInserShowCount() {
            this._insertAdShowCounts++;
            cc.setItem(utils.config.oppoconfig.appID + "_" + ST_InsertAdShowCounts, this._insertAdShowCounts);
        }
        countBannerCloseCount() {
            this._bannerAdCloseCounts++;
            cc.setItem(utils.config.oppoconfig.appID + "_" + ST_BannerAdCloseCounts, this._bannerAdCloseCounts);
        }
        navigateToMiniGame(pkgName, callback) {
            if (PlatUtils.IsOPPO) {
                let completeCallback = callback;
                this.qg.navigateToMiniGame({
                    pkgName: pkgName,
                    success: function () {
                        utils.showLog("跳转成功！");
                        if (completeCallback) {
                            completeCallback(true);
                        }
                    },
                    fail: function (res) {
                        utils.showLog("跳转失败！");
                        if (completeCallback) {
                            completeCallback(false);
                        }
                    }
                });
            }
        }
        canCreateShortcut() {
            if (PlatUtils.IsOPPO) {
                return this.isOverMiniVersion("1040");
            }
            return false;
        }
        createShortcut(callback) {
            if (PlatUtils.IsOPPO) {
                let callbackFunc = callback;
                let self = this;
                this.qg.installShortcut({
                    success: function () {
                        utils.showLog('桌面图标创建成功！');
                        self._shortcutCreated = true;
                        if (callbackFunc) {
                            callbackFunc(true);
                        }
                    },
                    fail: function (err) {
                        if (callbackFunc) {
                            callbackFunc(false);
                        }
                    },
                    complete: function () {
                    }
                });
            }
        }
        postData(otherGameAppId) {
            if (PlatUtils.IsOPPO) {
                let method = "m=rjump";
                let url = POST_ServerUrl$1 + method + `&jump_app_id=${otherGameAppId}`;
                utils.commomHttpRequest(url, function (ret, data) {
                    if (ret) {
                        utils.showLog("数据上报成功！");
                    }
                    else {
                        utils.showLog("数据上报失败！");
                    }
                }.bind(this));
            }
        }
        postGameSourece(source) {
            if (PlatUtils.IsOPPO) {
                let appid = utils.config.oppoconfig.appID;
                let uid = this._uid;
                let channel = utils.config.oppoconfig.channel ? utils.config.oppoconfig.channel.toLowerCase() : "oppo";
                let url = POST_ServerUrl$1 + `kyx=true&app_id=${appid}&channel=${channel}&uid=${this._uid}&source=${source}`;
                utils.showLog("上报游戏来源数据, url=" + url);
                utils.commomHttpRequest(url, function (ret, data) {
                    if (ret) {
                        utils.showLog("数据上报成功！");
                    }
                    else {
                        utils.showLog("数据上报失败！");
                    }
                }.bind(this));
            }
        }
        _login() {
            let curTime = new Date().getTime();
            let interval = (curTime - this._loginTime) / 1000;
            if (interval > 0 && interval < this._loginInterval) {
                utils.showLog(`登录请求间隔小于：${this._loginInterval}秒`);
                return;
            }
            this._loginTime = curTime;
            let self = this;
            this._uid = cc.getItem(YZ_Constant.ST_UID);
            this._uid = this._uid ? this._uid : "0";
            this._service_uid = cc.getItem(YZ_Constant.ST_SERVICE_UID);
            this._service_uid = this._service_uid ? this._service_uid : "0";
            utils.showLog("获取本地保存的uid=" + this._uid + "，服务器UID=" + this._service_uid);
            if (this._uid == "0") {
                if (this.isOverMiniVersion("1040")) {
                    this.qg.login({
                        success: function (res) {
                            if (res.data.uid) {
                                self._uid = "" + res.data.uid;
                                utils.showLog("登录成功! uid=" + self._uid);
                                cc.warn("用户信息为：", JSON.stringify(res.data));
                                cc.setItem(YZ_Constant.ST_UID, self._uid);
                            }
                        },
                        fail: function (res) {
                            utils.showLog("登录失败!");
                        },
                        complete: () => {
                            this.reportLogin();
                            utils.showLog("登录完成!");
                        }
                    });
                }
                else {
                    utils.showLog("快游戏平台版本低于1040，无法登录取UID，直接获取服务器ID");
                    this.reportLogin();
                }
            }
            else {
                utils.showLog("游戏已经获取过uid  uid为" + this._uid);
            }
        }
        reportLogin() {
            if (this.isReport)
                return;
            this.isReport = true;
            let self = this;
            let curTime = new Date().getTime();
            let interval = (curTime - this._reportLoginTime) / 1000;
            if (interval > 0 && interval < this._reportLoginInterval) {
                utils.showLog(`上报登录获取UID小于：${this._reportLoginInterval}秒`);
                return;
            }
            this._reportLoginTime = curTime;
            let method = "m=login";
            let url = ST_ServerUrl$2 + method + `&device_data=${encodeURI(JSON.stringify(this._sysInfo))}`;
            utils.commomHttpRequest(url, (ret, data) => {
                if (ret) {
                    if (data) {
                        console.log("data:" + data);
                        let result = JSON.parse(data);
                        console.log("result:" + result);
                        if (result.uid) {
                            self._service_uid = "" + result.uid;
                            utils.showLog("服务器请求登录成功! _service_uid=" + self._service_uid);
                            cc.setItem(YZ_Constant.ST_SERVICE_UID, self._service_uid);
                        }
                    }
                }
                this.isReport = false;
            });
        }
        getRecommondGameList() {
            if (PlatUtils.IsOPPO && utils.oppoTool && utils.oppoTool.ServerConfig) {
                return utils.oppoTool.ServerConfig.jump_list;
            }
            return null;
        }
        showMsg(msg) {
            if (PlatUtils.IsOPPO) {
            }
        }
        canShowRecommend() {
            if (this.isOverMiniVersion("1076")) {
                return true;
            }
            return false;
        }
        showOppoRecBanner() {
            if (!this.canShowRecommend()) {
                utils.showLog("当前版本不支持显示官方互推！");
                return false;
            }
            if (utils.config.oppoconfig.recGameBannerId) {
                if (!this._rec_game_banner) {
                    this._rec_game_banner = this.qg.createGameBannerAd({
                        adUnitId: utils.config.oppoconfig.recGameBannerId
                    });
                    this._rec_game_banner.onLoad(() => {
                        utils.showLog('互推banner加载成功!');
                    });
                    this._rec_game_banner.show().then(() => {
                        utils.showLog('互推banner展示成功！');
                    }).catch((error) => {
                        utils.showLog('互推banner展示失败:' + error.errCode + ',' + error.errMsg);
                    });
                    this._rec_game_banner.onError((err) => {
                        utils.showLog('互推banner加载异常!' + err.errCode + ',' + err.errMsg);
                        this._rec_game_banner.destroy();
                        this._rec_game_banner = null;
                    });
                }
                else {
                    this._rec_game_banner.show().then(() => {
                        utils.showLog('互推banner展示成功！');
                        if (location) {
                            utils.SendEvent("互推Banner展示成功，位置：" + location);
                        }
                    }).catch(function (error) {
                        utils.showLog('互推banner展示失败:' + error.errCode + ',' + error.errMsg);
                    });
                }
            }
            else {
                utils.showLog("OPPO 互推banner ID未配置！");
            }
        }
        hideOppoRecBanner() {
            if (this._rec_game_banner) {
                this._rec_game_banner.hide().then(() => {
                    utils.showLog('OPPO 互推banner 隐藏成功！');
                }).catch((error) => {
                    utils.showLog('OPPO 互推banner 隐藏失败:' + error.errCode + ',' + error.errMsg);
                    this._rec_game_banner.destroy();
                    this._rec_game_banner = null;
                });
            }
        }
        showOppoGamePortal() {
            if (!this.canShowRecommend()) {
                utils.showLog("当前版本不支持显示官方互推！");
                return false;
            }
            if (utils.config.oppoconfig.recPortalId) {
                utils.showLog("oppo官方互推！  id：" + utils.config.oppoconfig.recPortalId);
                if (!this._rec_game_portal) {
                    this._rec_game_portal = this.qg.createGamePortalAd({
                        adUnitId: utils.config.oppoconfig.recPortalId
                    });
                    this._rec_game_portal.load().then(() => {
                        utils.showLog('九宫格互推加载成功！');
                    }).catch((error) => {
                        this._rec_game_portal.destroy();
                        this._rec_game_portal = null;
                        utils.showLog('九宫格互推加载失败:' + error.errCode + ',' + error.errMsg);
                    });
                    this._rec_game_portal.onLoad(() => {
                        utils.showLog('互推盒子九宫格广告加载成功');
                        this._rec_game_portal.show().then(() => {
                            utils.showLog('互推盒子九宫格广告-显示成功！');
                        }).catch((error) => {
                            this._rec_game_portal.destroy();
                            this._rec_game_portal = null;
                            utils.showLog('互推盒子九宫格广告-显示失败:' + error.errCode + ',' + error.errMsg);
                        });
                    });
                    this._rec_game_portal.onClose(function () {
                        utils.showLog('互推盒子九宫格广告关闭');
                    });
                }
                else {
                    this._rec_game_portal.load().then(() => {
                        utils.showLog('九宫格互推加载成功！');
                    }).catch((error) => {
                        this._rec_game_portal.destroy();
                        this._rec_game_portal = null;
                        utils.showLog('九宫格互推加载失败:' + error.errCode + ',' + error.errMsg);
                    });
                }
            }
            else {
                utils.showLog("OPPO 互推九宫格 ID未配置！");
            }
        }
        postDataByLocation(otherGameAppId, location, status = 0) {
            if (PlatUtils.IsOPPO) {
                let method = "m=rjump";
                let url = POST_ServerUrl$1 + method + `&jump_app_id=${otherGameAppId}&location=${location}&status=${status}`;
                utils.commomHttpRequest(url, function (ret, data) {
                    if (ret) {
                        let result = JSON.parse(data);
                        utils.showLog(`数据上报成功`);
                        if (result && result.jump_list && result.jump_list.length > 0) {
                            utils.oppoTool.ServerConfig.jump_list = result.jump_list;
                        }
                    }
                    else {
                        utils.showLog("数据上报失败！");
                    }
                }.bind(this));
            }
        }
        postRecommentShowData(location) {
            if (PlatUtils.IsOPPO) {
                let method = "m=rjumpshow";
                let url = POST_ServerUrl$1 + method + `&location=${location}`;
                utils.commomHttpRequest(url, function (ret, data) {
                    if (ret) {
                        utils.showLog("数据上报成功！");
                    }
                    else {
                        utils.showLog("数据上报失败！");
                    }
                }.bind(this));
            }
        }
        postLevel(level, status, levelName) {
            if (PlatUtils.IsOPPO) {
                let method = "m=rlevelv3";
                let url = POST_ServerUrl$1 + method + `&level_id=${level}&level_name=${encodeURI(levelName)}&status=${status}`;
                utils.commomHttpRequest(url, function (ret, data) {
                    if (ret) {
                        utils.showLog("关卡数据上报成功！");
                    }
                    else {
                        utils.showLog("关卡数据上报失败！");
                    }
                    if (!ret || status != LevelStatus.GameStart)
                        return;
                    if (ret && status == LevelStatus.GameStart) {
                        utils.showLog("OPPO服务器配置数据获取成功: data = " + data);
                        if (data) {
                            let result = JSON.parse(data);
                            if (result) {
                                if (!utils.DebugLoacalConfig) {
                                    this._serverConfig = result;
                                    if (this._serverConfig.is_show_log_view && this._serverConfig.is_show_log_view == "true") {
                                        utils.isShowViewLog = true;
                                    }
                                }
                                else {
                                    cc.warn("开启了本地数据测试，使用本地配置!");
                                }
                            }
                            else {
                                utils.showLog("OPPO服务器配置数据不是合法的JSON数据, 使用本地配置!");
                            }
                        }
                    }
                    else {
                        utils.showLog("OPPO服务器配置数据获取失败, 使用本地配置!");
                    }
                    if (!this._serverConfig) {
                        this._serverConfig = JSON.parse(ST_DefaultServerConfig$2);
                    }
                    else if (this._curloadTimes == 1) {
                        if (this._serverConfig.is_local_pos_id == "false") {
                            utils.showLog("使用服务器下发的广告id");
                            utils.config.oppoconfig.bannerId = this.ServerConfig.banner_pos_id;
                            utils.config.oppoconfig.videoId = this.ServerConfig.video_pos_id;
                            utils.config.oppoconfig.nativeBannerIds = this.ServerConfig.native_banner_pos_id;
                            utils.config.oppoconfig.nativeTryGameIds = this.ServerConfig.native_trygame_pos_id;
                            utils.config.oppoconfig.recGameBannerId = this.ServerConfig.rec_game_banner_id;
                            utils.config.oppoconfig.recPortalId = this.ServerConfig.rec_portal_id;
                        }
                        else {
                            utils.showLog("使用本地配置的广告ID");
                        }
                        if (this.ServerConfig.native_banner_configs) {
                            utils.config.oppoconfig.nativeBannerInfos.length = 0;
                            for (let i = 0; i < this.ServerConfig.native_banner_configs.length; i++) {
                                utils.showLog("获取到原生广告配置:" + this.ServerConfig.native_banner_configs[i].location + ">>>>" + JSON.stringify(this.ServerConfig.native_banner_configs[i]));
                                utils.config.oppoconfig.setNativeBannerInfo(this.ServerConfig.native_banner_configs[i].location, this.ServerConfig.native_banner_configs[i]);
                            }
                        }
                    }
                }.bind(this));
            }
        }
        sendEvent(eventName) {
            if (PlatUtils.IsOPPO) {
                let method = "m=revent";
                let url = POST_ServerUrl$1 + method + `&event=${encodeURI(eventName)}`;
                utils.commomHttpRequest(url, function (ret, data) {
                    if (ret) {
                        utils.showLog("上报自定义事件成功！");
                    }
                    else {
                        utils.showLog("上报自定义事件失败！");
                    }
                }.bind(this));
            }
        }
        showToast(msg) {
            if (PlatUtils.IsOPPO) {
                qg.showToast({
                    title: msg,
                    icon: "none",
                    duration: 2000
                });
            }
        }
    }

    const ST_ServerUrl$3 = "https://apps.youletd.com/gss?";
    const POST_ServerUrl$2 = "https://report.youletd.com/gss?";
    let ST_DefaultServerConfig$3 = "";
    class YZ_Tool_QQ {
        constructor() {
            this.qq = Laya.Browser.window.wx;
            this._serverConfig = null;
            this._sysInfo = {};
            this._shareCallback = null;
            this._isShare = false;
            this._shortcutCreated = false;
            this._uid = "0";
            this._service_uid = "0";
            this._loginTime = 0;
            this._loginInterval = 30;
            this._reportLoginTime = 0;
            this._reportLoginInterval = 30;
            this.isReport = false;
        }
        get ServerConfig() {
            return this._serverConfig;
        }
        get SysInfo() {
            return this._sysInfo;
        }
        get uid() {
            return "0";
        }
        get serviceId() {
            if (this._service_uid != "0")
                return this._service_uid;
            this.reportLogin();
            return "0";
        }
        _login() {
            let curTime = new Date().getTime();
            let interval = (curTime - this._loginTime) / 1000;
            if (interval > 0 && interval < 30) {
                utils.showLog(`登录请求间隔小于：${this._loginInterval}秒`);
                return;
            }
            this._loginTime = curTime;
            let self = this;
            utils.showLog("qq暂时不获取uid，uid全部为0");
            this._uid = "0";
        }
        reportLogin() {
            if (this.isReport)
                return;
            this.isReport = true;
            let self = this;
            let curTime = new Date().getTime();
            let interval = (curTime - self._reportLoginTime) / 1000;
            if (interval > 0 && interval < 30) {
                utils.showLog(`上报登录获取UID小于：${self._reportLoginInterval}秒`);
                return;
            }
            self._reportLoginTime = curTime;
            let method = "m=login";
            let url = ST_ServerUrl$3 + method + `&device_data=0`;
            utils.commomHttpRequest(url, (ret, data) => {
                if (ret) {
                    if (data) {
                        let result = JSON.parse(data);
                        utils.showLog("data=" + data);
                        utils.showLog("result=" + result);
                        utils.showLog("result.uid=" + result.uid);
                        if (result.uid) {
                            self._service_uid = "" + result.uid;
                            console.log("self._service_uid:" + self._service_uid);
                            utils.showLog("服务器请求登录成功! _service_uid=" + self._service_uid);
                            cc.setItem(YZ_Constant.ST_SERVICE_UID, self._service_uid);
                        }
                    }
                }
                else {
                    utils.showLog("获取数据失败1");
                }
                this.isReport = false;
            });
        }
        init(data) {
            if (PlatUtils.IsQQ) {
                if (data) {
                    let configObj = JSON.parse(data);
                    if (configObj && configObj.qq) {
                        ST_DefaultServerConfig$3 = JSON.stringify(configObj.qq);
                    }
                }
                this._service_uid = cc.getItem(YZ_Constant.ST_SERVICE_UID);
                this._service_uid = this._service_uid ? this._service_uid : "0";
                try {
                    this._sysInfo = this.qq.getSystemInfoSync();
                    utils.showLog("QQ 小游戏平台信息: ", JSON.stringify(this.SysInfo));
                }
                catch (e) {
                    utils.showLog("QQ 小游戏平台数据获取失败!");
                }
                this._loadConfig();
                if (PlatUtils.IsQQ) {
                    this.qq.showShareMenu();
                    this.qq.onShareAppMessage(this._getShareInfo.bind(this));
                }
                this.qq.onShow((res) => {
                    utils.showLog("OnShow: ", res);
                    if (this._isShare) {
                        this._isShare = false;
                        if (this._shareCallback) {
                            this._shareCallback(true, "分享成功!");
                        }
                    }
                });
                utils.registerServerInitEvent(() => {
                    if (this.canCreateShortcut()) {
                        if (utils.ServerConfig && utils.ServerConfig.start_auto_create_short_cut_time) {
                            utils.SendEvent("组件初始化成功，弹出自动创建桌面！");
                            utils.showLog(`组件初始化成功，${utils.ServerConfig.start_auto_create_short_cut_time}秒后弹出自动创建桌面！`);
                            setTimeout(() => {
                                this.createShortcut((res) => {
                                    if (res) {
                                        utils.showLog("自动创建桌面成功！");
                                    }
                                    else {
                                        utils.showLog("自动创建桌面失败！");
                                    }
                                });
                            }, utils.ServerConfig.start_auto_create_short_cut_time * 1000);
                        }
                    }
                    this.addFavorites();
                    utils.showLog('组件初始化完成,验证是否登陆！', utils.ServerConfig.add_recent_color_sign);
                    if (utils.ServerConfig && utils.ServerConfig.add_recent_color_sign) {
                        if (utils.ServerConfig.add_recent_color_sign == 1) {
                            this.addColorSign();
                        }
                        else {
                            qq.checkSession({
                                success: () => {
                                    utils.showLog("session_key 未过期，并且在本生命周期一直有效");
                                    this.addRecentColorSign();
                                },
                                fail: () => {
                                    qq.login({
                                        success: (res) => {
                                            if (res.code) {
                                                utils.showLog('登录成功！');
                                                this.addRecentColorSign();
                                            }
                                            else {
                                                utils.showLog('登录失败！' + res.errMsg);
                                            }
                                        }
                                    });
                                }
                            });
                        }
                    }
                }, this);
            }
        }
        _loadConfig() {
            if (PlatUtils.IsQQ) {
                let method = "m=g";
                utils.commomHttpRequest(ST_ServerUrl$3 + method, (ret, data) => {
                    if (ret) {
                        utils.showLog("QQ服务器配置数据获取成功: data = ", data);
                        if (data) {
                            let result = JSON.parse(data);
                            if (result) {
                                if (!utils.DebugLoacalConfig) {
                                    this._serverConfig = result;
                                }
                                else {
                                    cc.warn("开启了本地数据测试，使用本地配置!");
                                }
                            }
                            else {
                                utils.showLog("QQ服务器配置数据不是合法的JSON数据, 使用本地配置!");
                            }
                        }
                    }
                    else {
                        utils.showLog("QQ服务器配置数据获取失败, 使用本地配置!");
                    }
                    if (!this._serverConfig) {
                        this._serverConfig = JSON.parse(ST_DefaultServerConfig$3);
                    }
                    else {
                        if (this._serverConfig.shares) {
                            if (this._serverConfig.shares.sy_title) {
                                utils.config.otherconfig.shareTitle = this._serverConfig.shares.sy_title;
                            }
                            if (this._serverConfig.shares.sy_img) {
                                utils.config.otherconfig.shareImgUrl = this._serverConfig.shares.sy_img;
                            }
                        }
                        if (this._serverConfig.is_local_pos_id
                            && this._serverConfig.is_local_pos_id == "false") {
                            utils.showLog("使用服务器下发的广告id");
                            utils.config.qqconfig.bannerId = this._serverConfig.banner_pos_id;
                            utils.config.qqconfig.insertId = this._serverConfig.intersititia_pos_id;
                            utils.config.qqconfig.videoId = this._serverConfig.video_pos_id;
                            utils.config.qqconfig.boxId = this._serverConfig.box_pos_id;
                            utils.config.qqconfig.bannerBoxId = this._serverConfig.banner_box_pos_id;
                        }
                        else {
                            utils.showLog("使用本地配置的广告ID");
                        }
                    }
                    utils.emitServerInitEvent();
                });
            }
        }
        getSystemInfo() {
            if (PlatUtils.IsQQ) {
                return this._sysInfo;
            }
        }
        getRecommondGameList() {
            return this.ServerConfig.jump_list;
        }
        share(callback = null) {
            if (PlatUtils.IsQQ) {
                this._shareCallback = callback;
                this._isShare = true;
                this.qq.shareAppMessage(this._getShareInfo());
            }
        }
        postData(otherGameAppId) {
            if (PlatUtils.IsQQ) {
                let appid = utils.config.qqconfig.appID;
                let uid = "0";
                let channel = "qq";
                let url = `https://apps.youletd.com/gs?m=jump&app_id=${appid}&uid=${uid}&channel=${channel}&jump_app_id=${otherGameAppId}`;
                utils.showLog("上报数据, url=", url);
                utils.commomHttpRequest(url, function (ret, data) {
                    if (ret) {
                        utils.showLog("数据上报成功！");
                    }
                    else {
                        utils.showLog("数据上报失败！");
                    }
                });
            }
        }
        _getShareInfo() {
            if (PlatUtils.IsQQ) {
                return {
                    title: utils.config.otherconfig.shareTitle,
                    imageUrl: utils.config.otherconfig.shareImgUrl
                };
            }
            return {};
        }
        isOverMinVersion(minVersion) {
            let curVersion = this._sysInfo.SDKVersion;
            return this._compareVersion(curVersion, minVersion) >= 0;
        }
        _compareVersion(v1, v2) {
            if (!v1 || !v2)
                return -1;
            v1 = v1.split('.');
            v2 = v2.split('.');
            const len = Math.max(v1.length, v2.length);
            while (v1.length < len) {
                v1.push('0');
            }
            while (v2.length < len) {
                v2.push('0');
            }
            for (let i = 0; i < len; i++) {
                const num1 = parseInt(v1[i]);
                const num2 = parseInt(v2[i]);
                if (num1 > num2) {
                    return 1;
                }
                else if (num1 < num2) {
                    return -1;
                }
            }
            return 0;
        }
        postLevel(level, status, levelName) {
            if (PlatUtils.IsQQ) {
                if (status == LevelStatus.GameWin) {
                    if (this.ServerConfig.rankey) {
                        let postKey = this.ServerConfig.rankey ? this.ServerConfig.rankey : "ranklevel";
                        let postValue = level;
                        qq.setUserCloudStorage({
                            KVDataList: [
                                { key: postKey, value: postValue }
                            ],
                            success: function (res) {
                                utils.showLog('关卡记录成功');
                            },
                            fail: function (res) {
                                utils.showLog('关卡记录失败');
                            },
                            complete: function (res) {
                                utils.showLog('关卡记录调用完成');
                            },
                        });
                    }
                    let interval = this.ServerConfig.subscribe_interval;
                    if (interval) {
                        try {
                            if (parseInt(level) % interval == 0) {
                                qq.subscribeAppMsg({
                                    subscribe: true,
                                    success(res) {
                                        utils.showLog("----添加订阅消息----成功", res);
                                    },
                                    fail(res) {
                                        utils.showLog("----添加订阅消息----失败", res);
                                    }
                                });
                            }
                        }
                        catch (error) {
                            utils.showLog("----添加订阅消息----异常");
                        }
                    }
                }
                let method = "m=rlevel";
                let url = POST_ServerUrl$2 + method + `&level_id=${level}&level_name=${encodeURI(levelName)}&status=${status}`;
                utils.commomHttpRequest(url, function (ret, data) {
                    if (ret) {
                        utils.showLog("关卡数据上报成功！");
                    }
                    else {
                        utils.showLog("关卡数据上报失败！");
                    }
                }.bind(this));
            }
        }
        sendEvent(eventName) {
            if (PlatUtils.IsQQ) {
                let method = "m=revent";
                let url = POST_ServerUrl$2 + method + `&event=${encodeURI(eventName)}`;
                utils.commomHttpRequest(url, function (ret, data) {
                    if (ret) {
                        utils.showLog("上报自定义事件成功！");
                    }
                    else {
                        utils.showLog("上报自定义事件失败！");
                    }
                }.bind(this));
            }
        }
        createShortcut(callback) {
            let callbackFunc = callback;
            if (PlatUtils.IsQQ && this.canCreateShortcut()) {
                qq.saveAppToDesktop({
                    success: () => {
                        utils.showLog('桌面图标创建成功！');
                        this._shortcutCreated = true;
                        if (callbackFunc) {
                            callbackFunc(true);
                        }
                    },
                    fail: (err) => {
                        utils.showLog('qq创建桌面失败err' + err);
                        if (callbackFunc) {
                            callbackFunc(false);
                        }
                    },
                    complete: function () {
                    }
                });
            }
            else {
                utils.showLog("当前平台版本不支持创建桌面");
                if (callbackFunc) {
                    callbackFunc(false);
                }
            }
        }
        canCreateShortcut() {
            console.log("canCreateShortcut ", this.isOverMinVersion("1.7.1"));
            if (PlatUtils.IsQQ) {
                return this.isOverMinVersion("1.7.1");
            }
            return false;
        }
        showToast(msg) {
            if (PlatUtils.IsQQ) {
                qq.showToast({
                    title: msg,
                    icon: "none",
                    duration: 2000
                });
            }
        }
        addFavorites() {
            utils.showLog('addFavorites >>>>');
            let fav = cc.getItem("qq_favorites");
            if ("1" == fav) {
                utils.showLog('had addToFavorites');
                return;
            }
            let title = "好游戏哦";
            let img = "";
            if (utils.config.otherconfig) {
                if (utils.config.otherconfig.shareTitle) {
                    title = utils.config.otherconfig.shareTitle;
                }
                if (utils.config.otherconfig.shareImgUrl) {
                    img = utils.config.otherconfig.shareImgUrl;
                }
            }
            qq.addToFavorites({
                title: title,
                imageUrl: img,
                query: 'a=1&b=2',
                success: function (res) {
                    utils.showLog('addToFavorites success', res);
                    cc.setItem("qq_favorites", "1");
                },
                fail: function (err) {
                    utils.showLog('addToFavorites fail', err);
                },
                complete: function (res) {
                    utils.showLog('addToFavorites info', res);
                }
            });
        }
        addColorSign() {
            qq.addColorSign({
                success: function (res) {
                    utils.showLog('addColorSign success', res);
                },
                fail: function (err) {
                    utils.showLog('addColorSign fail', err);
                },
                complete: function (res) {
                    utils.showLog('addColorSign info', res);
                }
            });
        }
        addRecentColorSign() {
            utils.showLog("调用添加彩签>>>>>>>");
            qq.addRecentColorSign({
                query: 'a=1&b=2',
                success(res) {
                    utils.showLog('addRecentColorSign success: ', res);
                },
                fail(err) {
                    utils.showLog('addRecentColorSign fail: ', err);
                },
                complete(res) {
                    utils.showLog('addRecentColorSign complete: ', res);
                }
            });
        }
    }

    const ST_ServerUrl$4 = "https://apps.youletd.com/gss?";
    const POST_ServerUrl$3 = "https://report.youletd.com/gss?";
    let ST_DefaultServerConfig$4 = "";
    class YZ_Tool_Baidu {
        constructor() {
            this._sysInfo = null;
            this._recorder = null;
            this._recommendationButton = null;
            this._videoPath = null;
            this._serverConfig = null;
            this._shareCallback = null;
            this.swan = Laya.Browser.window.swan;
            this._uid = "0";
            this._service_uid = "0";
            this._loginTime = 0;
            this._loginInterval = 30;
            this._reportLoginTime = 0;
            this._reportLoginInterval = 30;
            this.isReport = false;
        }
        get ServerConfig() {
            return this._serverConfig;
        }
        get uid() {
            return "0";
        }
        gameVersion() {
            return utils.config.baiduconfig.version;
        }
        get serviceId() {
            if (this._service_uid != "0")
                return this._service_uid;
            this.reportLogin();
            return "0";
        }
        _login() {
            let curTime = new Date().getTime();
            let interval = (curTime - this._loginTime) / 1000;
            if (interval > 0 && interval < 30) {
                utils.showLog(`登录请求间隔小于：${this._loginInterval}秒`);
                return;
            }
            this._loginTime = curTime;
            let self = this;
            utils.showLog("baidu暂时不获取uid，uid全部为0");
            this._uid = "0";
        }
        reportLogin() {
            if (this.isReport)
                return;
            this.isReport = true;
            let self = this;
            let curTime = new Date().getTime();
            let interval = (curTime - self._reportLoginTime) / 1000;
            console.log(curTime, curTime - self._reportLoginTime, interval);
            if (interval > 0 && interval < 30) {
                utils.showLog(`上报登录获取UID小于：${self._reportLoginInterval}秒`);
                return;
            }
            self._reportLoginTime = curTime;
            let method = "m=login";
            let url = ST_ServerUrl$4 + method + `&device_data=0`;
            utils.commomHttpRequest(url, (ret, data) => {
                if (ret) {
                    if (data) {
                        let result = JSON.parse(data);
                        utils.showLog("data=" + data);
                        utils.showLog("result=" + result);
                        utils.showLog("result.uid=" + result.uid);
                        if (result.uid) {
                            self._service_uid = "" + result.uid;
                            console.log("self._service_uid:" + self._service_uid);
                            utils.showLog("服务器请求登录成功! _service_uid=" + self._service_uid);
                            cc.setItem(YZ_Constant.ST_SERVICE_UID, self._service_uid);
                        }
                    }
                }
                else {
                    utils.showLog("获取数据失败1");
                }
                this.isReport = false;
            });
        }
        init(data) {
            if (PlatUtils.IsBaidu) {
                if (data) {
                    let configObj = JSON.parse(data);
                    if (configObj && configObj.baidu) {
                        ST_DefaultServerConfig$4 = JSON.stringify(configObj.baidu);
                    }
                }
                this._service_uid = cc.getItem(YZ_Constant.ST_SERVICE_UID);
                this._service_uid = this._service_uid ? this._service_uid : "0";
                this._sysInfo = this.swan.getSystemInfoSync();
                if (this._sysInfo) {
                    utils.showLog("百度小游戏平台信息: ", JSON.stringify(this._sysInfo));
                }
                else {
                    utils.showLog("系统信息获取失败!");
                }
                this._loadConfig();
                if (this.canRecord()) {
                    this._recorder = this.swan.getVideoRecorderManager();
                    if (this._recorder) {
                        this._recorder.onStart((res) => {
                            utils.showLog("开始录屏回调: ", res);
                            cc.emit("YZ_CommonMessage", { type: "YZ_RecordStart" });
                        });
                        this._recorder.onStop((res) => {
                            utils.showLog("结束录屏回调: ", res.videoPath);
                            this._videoPath = res.videoPath;
                            cc.emit("YZ_CommonMessage", { type: "YZ_RecordEnd" });
                        });
                        this._recorder.onError((err) => {
                            if (err) {
                                utils.showLog("录屏出错 : ", err.errCode, err.errMsg);
                                cc.emit("YZ_CommonMessage", { type: "YZ_RecordEnd" });
                            }
                        });
                    }
                }
                this.swan.showShareMenu();
                this.swan.onShareAppMessage(() => {
                    return this._getShareInfo();
                });
            }
        }
        _buildServerUrl() {
            if (PlatUtils.IsBaidu) {
                let url = "";
                if (utils.config.baiduconfig && utils.config.baiduconfig.appID) {
                    url = ST_ServerUrl$4 + "kyx=true&app_id=" + utils.config.baiduconfig.appID.trim() + "&" + "channel=baidu";
                }
                else {
                    utils.showLog("百度 APPID配置出错！");
                }
                return url;
            }
            return null;
        }
        _loadConfig() {
            if (PlatUtils.IsBaidu) {
                let method = "m=g";
                utils.commomHttpRequest(ST_ServerUrl$4 + method, (ret, data) => {
                    if (ret) {
                        utils.showLog("百度服务器配置数据获取成功: data = ", data);
                        if (data) {
                            let result = JSON.parse(data);
                            if (result) {
                                if (!utils.DebugLoacalConfig) {
                                    this._serverConfig = result;
                                }
                                else {
                                    cc.warn("开启了本地数据测试，使用本地配置!");
                                }
                            }
                            else {
                                utils.showLog("百度服务器配置数据不是合法的JSON数据, 使用本地配置!");
                            }
                        }
                    }
                    else {
                        utils.showLog("百度服务器配置数据获取失败, 使用本地配置!");
                    }
                    if (!this._serverConfig) {
                        this._serverConfig = JSON.parse(ST_DefaultServerConfig$4);
                    }
                    else {
                        if (this._serverConfig.is_local_pos_id
                            && this._serverConfig.is_local_pos_id == "false") {
                            utils.showLog("使用服务器下发的广告id");
                            utils.config.baiduconfig.bannerId = this._serverConfig.banner_pos_id;
                            utils.config.baiduconfig.videoId = this._serverConfig.video_pos_id;
                        }
                        else {
                            utils.showLog("使用本地配置的广告ID");
                        }
                    }
                    utils.emitServerInitEvent();
                });
            }
        }
        showRecommendationButton(params) {
            let styleParams = params;
            if (PlatUtils.IsBaidu && this.canShowRecommendButton()) {
                if (false) {
                    utils.showLog("按钮存在，直接显示");
                    this._recommendationButton.show();
                    this._setRecommendBtnStyle(this._recommendationButton, styleParams);
                }
                else {
                    utils.showLog("创建并显示");
                    this._recommendationButton = this.swan.createRecommendationButton({
                        type: 'list',
                        style: {
                            left: -300,
                            top: -300
                        }
                    });
                    if (this._recommendationButton) {
                        this._recommendationButton.onLoad(() => {
                            this._recommendationButton.show();
                            this._setRecommendBtnStyle(this._recommendationButton, styleParams);
                        });
                        this._recommendationButton.onError((err) => {
                            if (err) {
                                utils.showLog("交叉推广按钮出错 : ", err.errCode, err.errMsg);
                            }
                        });
                        this._recommendationButton.load();
                    }
                }
                return this._recommendationButton;
            }
            else {
                return null;
            }
        }
        _setRecommendBtnStyle(btn, params) {
            if (btn) {
                let left = 0;
                let top = 0;
                if (params) {
                    utils.showLog("params:", params);
                }
                utils.showLog(`top:${top}; left:${left}`);
                btn.style.top = top;
                btn.style.left = left;
            }
        }
        hideRecommendationButton() {
            if (PlatUtils.IsBaidu && this.canShowRecommendButton()) {
                if (this._recommendationButton) {
                    this._recommendationButton.hide();
                }
            }
        }
        shareVideo() {
            if (PlatUtils.IsBaidu) {
                if (this._videoPath) {
                    let self = this;
                    this.swan.shareVideo({
                        videoPath: this._videoPath,
                        success() {
                            utils.showLog('分享成功');
                            self._videoPath = "";
                            if (self._shareCallback) {
                                self._shareCallback(true);
                            }
                        },
                        fail(res) {
                            self._videoPath = "";
                            utils.showLog('分享失败');
                            if (self._shareCallback) {
                                self._shareCallback(false, "分享失败!");
                            }
                        }
                    });
                }
            }
        }
        shareImage() {
            if (PlatUtils.IsBaidu) {
                this.swan.shareAppMessage(this._getShareInfo());
            }
        }
        share(callback) {
            if (PlatUtils.IsBaidu) {
                this._shareCallback = callback;
                if (this._videoPath) {
                    this.shareVideo();
                }
                else {
                    this.shareImage();
                }
            }
        }
        _getShareInfo() {
            if (PlatUtils.IsBaidu) {
                let shareInfo = utils.getShareInfo();
                let self = this;
                if (shareInfo) {
                    return {
                        title: shareInfo.title,
                        imageUrl: shareInfo.imageUrl,
                        success: function (res) {
                            if (self._shareCallback) {
                                self._shareCallback(true);
                            }
                            utils.showLog("分享成功!");
                        },
                        fail: function (err) {
                            if (self._shareCallback) {
                                self._shareCallback(false, "分享失败!");
                            }
                            utils.showLog("分享失败!");
                        }
                    };
                }
            }
            return {};
        }
        canRecord() {
            if (PlatUtils.IsBaidu) {
                if (this._sysInfo) {
                    return this._compareVersion(this._sysInfo.SDKVersion, "1.4.1") && PlatUtils.IsAndroid;
                }
                return false;
            }
            return false;
        }
        canShowRecommendButton() {
            if (PlatUtils.IsBaidu) {
                if (this._sysInfo) {
                    return this._compareVersion(this._sysInfo.SDKVersion, "1.5.2") && PlatUtils.IsAndroid;
                }
                return false;
            }
            return false;
        }
        canShowFavoriteGuide() {
            if (PlatUtils.IsBaidu) {
                if (this._sysInfo) {
                    return this._compareVersion(this._sysInfo.SDKVersion, "1.7.2");
                }
                return false;
            }
            return false;
        }
        _compareVersion(first, second) {
            return parseInt(first.split(".").join("")) >= parseInt(second.split(".").join(""));
        }
        navigateToMiniGame(pkgName, callback) {
            if (PlatUtils.IsBaidu) {
                let completeCallback = callback;
                if (!pkgName) {
                    utils.showLog("跳转ID为null");
                    if (completeCallback) {
                        completeCallback(false);
                    }
                    return;
                }
                this.swan.navigateToMiniProgram({
                    appKey: pkgName,
                    path: "",
                    extraData: {},
                    success: (res) => {
                        utils.showLog("跳转成功！");
                        if (completeCallback) {
                            completeCallback(true);
                        }
                    },
                    fail: (error) => {
                        utils.showLog("跳转失败!");
                        if (completeCallback) {
                            completeCallback(false);
                        }
                    }
                });
            }
        }
        postData(otherGameAppId) {
            if (PlatUtils.IsBaidu) {
                let appid = utils.config.baiduconfig.appID;
                let uid = "0";
                let channel = "baidu";
                let method = "m=jump";
                let url = `${POST_ServerUrl$3} + ${method} + &app_id=${appid}&uid=${uid}&channel=${channel}&jump_app_id=${otherGameAppId}`;
                utils.showLog("上报数据, url=", url);
                utils.commomHttpRequest(url, (ret, data) => {
                    if (ret) {
                        utils.showLog("数据上报成功！");
                    }
                    else {
                        utils.showLog("数据上报失败！");
                    }
                });
            }
        }
        getRecommondGameList() {
            if (PlatUtils.IsBaidu
                && utils.Tool_Baidu
                && utils.Tool_Baidu.ServerConfig) {
                return utils.Tool_Baidu.ServerConfig.jump_list;
            }
            return null;
        }
        postLevel(level, status, levelName) {
            if (PlatUtils.IsBaidu) {
                let method = "m=rlevel";
                let url = POST_ServerUrl$3 + method + `&level_id=${level}&level_name=${encodeURI(levelName)}&status=${status}`;
                utils.commomHttpRequest(url, function (ret, data) {
                    if (ret) {
                        utils.showLog("关卡数据上报成功！");
                    }
                    else {
                        utils.showLog("关卡数据上报失败！");
                    }
                }.bind(this));
            }
        }
        sendEvent(eventName) {
            if (PlatUtils.IsBaidu) {
                let method = "m=revent";
                let url = POST_ServerUrl$3 + method + `&event=${encodeURI(eventName)}`;
                utils.commomHttpRequest(url, function (ret, data) {
                    if (ret) {
                        utils.showLog("上报自定义事件成功！");
                    }
                    else {
                        utils.showLog("上报自定义事件失败！");
                    }
                }.bind(this));
            }
        }
        showToast(msg) {
            if (PlatUtils.IsBaidu) {
                swan.showToast({
                    title: msg,
                    icon: "none",
                    duration: 2000,
                    success(res) {
                        console.log(`${res}`);
                    },
                    fail(res) {
                        console.log(`showToast调用失败`);
                    }
                });
            }
        }
    }

    let ST_DefaultServerConfig$5 = "";
    const ST_ServerUrl$5 = "http://apps.youletd.com/gss?";
    const POST_ServerUrl$4 = "http://report.youletd.com/gss?";
    class YZ_Tool_Native {
        constructor() {
            this.className = "aa.b.c.a";
            this.jsb = null;
            this._serverConfig = null;
            this._uid = "0";
            this._service_uid = "0";
            this.moreGameShowType = 0;
            this.showGameExitDialogType = 0;
            this.appList = "";
            this._reportLoginTime = 0;
            this._reportLoginInterval = 30;
            this.isReport = false;
            this._gameExitDialogNode = null;
            this.deviceInfo = "";
            this._reloadTimes = 6;
            this._curloadTimes = 0;
        }
        get ServerConfig() {
            return this._serverConfig;
        }
        get uid() {
            return "0";
        }
        get serviceId() {
            if (this._service_uid != "0")
                return this._service_uid;
            this.reportLogin();
            return "0";
        }
        get jniClassName() {
            if (this.jsb)
                return this.jsb;
            try {
                this.className = window["PlatformClass"].createClass("aa.b.c.a").call("a");
                this.jsb = window["PlatformClass"].createClass(this.className);
            }
            catch (error) {
            }
            return this.jsb;
        }
        reportLogin() {
            if (this.isReport)
                return;
            this.isReport = true;
            let self = this;
            let curTime = new Date().getTime();
            let interval = (curTime - this._reportLoginTime) / 1000;
            if (interval > 0 && interval < this._reportLoginInterval) {
                utils.showLog(`上报登录获取UID小于：${this._reportLoginInterval}秒`);
                return;
            }
            this._reportLoginTime = curTime;
            let method = "m=loginv2";
            let url = ST_ServerUrl$5 + method + `&device_data=${encodeURI(this.deviceInfo)}`;
            utils.commomHttpRequest(url, (ret, data) => {
                if (ret) {
                    if (data) {
                        let result = JSON.parse(data);
                        if (result.uid) {
                            self._service_uid = "" + result.uid;
                            utils.showLog("服务器请求登录成功! _service_uid=" + self._service_uid);
                            cc.setItem(YZ_Constant.ST_SERVICE_UID, self._service_uid);
                        }
                        if (result.config) {
                            this._serverConfig = utils.aesDecrypt(result.config);
                            this.setLocalConfig(JSON.stringify(this._serverConfig));
                        }
                    }
                }
                else {
                    utils.showLog("服务器请求登录失败！");
                }
                this.isReport = false;
            });
        }
        init() {
            if (PlatUtils.IsNativeAndroid) {
                if (window.conch && window.conch.setOnBackPressedFunction) {
                    window.conch.setOnBackPressedFunction(() => {
                        utils.showLog("重写安卓退出。。。。。");
                    });
                }
                ST_DefaultServerConfig$5 = this.getNativeData();
                if (ST_DefaultServerConfig$5) {
                    let data = JSON.parse(ST_DefaultServerConfig$5);
                    this.deviceInfo = data.device_info;
                    this.moreGameShowType = data.more_game_type;
                    this.showGameExitDialogType = data.show_game_exit_dialog;
                    this.appList = data.app_list;
                }
                else {
                    utils.showLog("没有获取到本地数据，组件初始化失败！");
                    return;
                }
                this._service_uid = cc.getItem(YZ_Constant.ST_SERVICE_UID);
                this._service_uid = this._service_uid ? this._service_uid : "0";
                this._loadConfig();
                if (PlatUtils.IsNativeAndroid) {
                    Laya.stage.on(Laya.Event.KEY_DOWN, this, (event) => {
                        if (event.keyCode == Laya.Keyboard.ESCAPE || event.keyCode == "4") {
                            if (PlatUtils.IsNativeAndroid) {
                                if (this.showGameExitDialogType == 1) {
                                    this.showGameExitDialog();
                                }
                                else {
                                    this.GameExit();
                                }
                            }
                        }
                    });
                }
            }
        }
        showGameExitDialog() {
            if (!utils._isConfigInit) {
                utils.showLog("warn:" + "组件配置未初始化!");
                return null;
            }
            if (this._gameExitDialogNode && cc.isValid(this._gameExitDialogNode)) {
                utils.showLog("退出窗口还在。");
                return;
            }
            if (utils.config.otherconfig.gameExitDialog) {
                let node = cc.instantiate(utils.config.otherconfig.gameExitDialog);
                if (node) {
                    if (this._gameExitDialogNode && cc.isValid(this._gameExitDialogNode)) {
                        this._gameExitDialogNode.destroy();
                    }
                    this._gameExitDialogNode = node;
                    node.zOrder = 999;
                    Laya.stage.addChild(this._gameExitDialogNode);
                }
            }
            else {
                utils.showLog("warn:" + "未找到预制体 GameExitDialog, 请查看CommonUtils组件上是否赋值 !");
            }
        }
        GameExit() {
            if (PlatUtils.IsNativeAndroid) {
                utils.showLog("AdAgentNative GameExit");
                try {
                    this.jniClassName.call("gameExit");
                }
                catch (error) {
                    utils.showLog(error);
                }
            }
        }
        showPrivacyAgreement() {
            utils.showLog("showPrivacyAgreement......");
            try {
                this.jniClassName.call("showPrivacyAgreement");
            }
            catch (error) {
                utils.showLog(error);
            }
        }
        getMoreGameShowType() {
            try {
                this.moreGameShowType = this.jniClassName.call("getMoreGameShowType");
            }
            catch (error) {
                utils.showLog(error);
            }
        }
        showFloatIcon(x, y) {
            utils.showLog("显示安卓原生抖动广告");
            this.jniClassName.call("showFloatIcon", x, y);
        }
        hideFloatIcon() {
            utils.showLog("隐藏安卓原生抖动广告");
            this.jniClassName.call("hideFloatIcon");
        }
        vibrateShort() {
            utils.showLog("安卓原生短震");
            this.jniClassName.call("vibrateShort");
        }
        vibrateLong() {
            utils.showLog("安卓原生长震");
            this.jniClassName.call("vibrateLong");
        }
        showToast(msg) {
            if (PlatUtils.IsNativeAndroid) {
                try {
                    this.jniClassName.call("showToast");
                }
                catch (error) {
                    utils.showLog(error);
                }
            }
        }
        getDeviceInfo() {
            try {
                this.deviceInfo = this.jniClassName.call("getDeviceInfo");
                utils.showLog("获取原生平台手机设备信息：" + this.deviceInfo);
            }
            catch (error) {
                utils.showLog(error);
            }
        }
        showMoreGames() {
            if (PlatUtils.IsNativeAndroid) {
                utils.showLog("AdAgentNative showMoreGame");
                try {
                    this.jniClassName.call("showNativeMoreGame");
                }
                catch (error) {
                    utils.showLog(error);
                }
            }
        }
        _loadConfig() {
            if (PlatUtils.IsNativeAndroid) {
                let method = "m=g";
                this.commomHttpRequest(ST_ServerUrl$5 + method, (ret, data) => {
                    this._curloadTimes++;
                    let recall = false;
                    if (ret) {
                        utils.showLog("原生安卓服务器配置数据获取成功: data = " + data);
                        if (data) {
                            let result = JSON.parse(data);
                            if (result) {
                                if (!utils.DebugLoacalConfig) {
                                    this._serverConfig = result;
                                    if (this._serverConfig.is_show_log_view && this._serverConfig.is_show_log_view == "true") {
                                        utils.isShowViewLog = true;
                                    }
                                    if (result.more_game_type) {
                                        this.moreGameShowType = result.more_game_type;
                                    }
                                    if (result.show_game_exit_dialog) {
                                        this.showGameExitDialogType = result.show_game_exit_dialog;
                                    }
                                }
                                else {
                                    utils.showLog("开启了本地数据测试，使用本地配置!");
                                }
                            }
                            else {
                                utils.showLog("原生安卓服务器配置数据不是合法的JSON数据, 使用本地配置!");
                            }
                        }
                    }
                    else {
                        utils.showLog("原生安卓服务器配置数据获取失败！");
                        if (this._curloadTimes < this._reloadTimes) {
                            utils.showLog("请求异常，重新拉取配置!");
                            recall = true;
                        }
                    }
                    if (!this._serverConfig) {
                        this._serverConfig = JSON.parse(ST_DefaultServerConfig$5);
                    }
                    else {
                        if (this._serverConfig.is_local_pos_id
                            && this._serverConfig.is_local_pos_id == "false") {
                            utils.showLog("使用服务器下发的广告id");
                        }
                        else {
                            utils.showLog("使用本地配置的广告ID");
                        }
                    }
                    if (recall) {
                        this._loadConfig();
                    }
                    else {
                        this.setLocalConfig(JSON.stringify(this._serverConfig));
                        utils.emitServerInitEvent();
                    }
                });
            }
        }
        commomHttpRequest(url, callback) {
            if (!utils._isConfigInit) {
                utils.showLog("warn:" + "本地数据未初始化!");
                return;
            }
            let completeCallback = callback;
            let xhr = new XMLHttpRequest();
            xhr.timeout = 6000;
            let requestUrl = url + `&kyx=false&app_id=${utils.config.nativeAndroidConfig.appID}&channel=${utils.config.nativeAndroidConfig.channel}&device_uid=${utils.Tool_Native.uid}&uid=${utils.Tool_Native.serviceId}&game_type=2&time_stamp=${(new Date()).getTime()}&game_version=${utils.config.nativeAndroidConfig.version}&reqv=${YZ_Constant.SERVER_VERSION}`;
            utils.showLog("服务器地址:" + requestUrl);
            xhr.open('POST', requestUrl);
            xhr.send(`app_list=${this.appList}`);
            xhr.onreadystatechange = function () {
                utils.showLog("请求状态改变, reaedyState=" + xhr.readyState + " #status=" + xhr.status);
                if (xhr.readyState == 4) {
                    if (xhr.status == 200) {
                        if (completeCallback) {
                            utils.showLog("请求状态改变, reaedyState=" + utils.aesDecrypt(xhr.responseText) + "; status=" + xhr.status);
                            completeCallback(true, utils.aesDecrypt(xhr.responseText));
                        }
                    }
                    else {
                        utils.showLog("请求配置异常>>>>>");
                        if (completeCallback) {
                            completeCallback(false, "");
                        }
                    }
                }
            };
            xhr.ontimeout = function () {
                console.log("请求超时!");
                if (completeCallback) {
                    completeCallback(false, "");
                }
            };
            xhr.onerror = function (err) {
                console.log("请求失败, reaedyState= #err=", err);
                if (completeCallback) {
                    completeCallback(false, "");
                }
            };
        }
        setLocalConfig(data) {
            try {
                utils.showLog("设置原生客户端数据数据" + data);
                this.jniClassName.call("setLocalConfig", data);
            }
            catch (error) {
                utils.showLog(error);
            }
        }
        getNativeData() {
            let data = "";
            try {
                data = this.jniClassName.call("getLocalConfig");
                utils.showLog("获取原生客户端数据数据 : " + data);
            }
            catch (error) {
                utils.showLog(error);
            }
            return data;
        }
        navigateToGame(jsonData, callback, path) {
            if (PlatUtils.IsNativeAndroid) {
                try {
                    this.jniClassName.call("navigateToGame", jsonData);
                }
                catch (error) {
                    utils.showLog(error);
                }
            }
        }
        getRecommondGameList() {
            if (PlatUtils.IsNativeAndroid
                && utils.Tool_Native
                && utils.Tool_Native.ServerConfig) {
                return utils.Tool_Native.ServerConfig.jump_list;
            }
            return null;
        }
        postLevel(level, status, levelName) {
            if (PlatUtils.IsNativeAndroid) {
                let method = "m=rlevel";
                let url = POST_ServerUrl$4 + method + `&level_id=${level}&level_name=${encodeURI(levelName)}&status=${status}`;
                utils.commomHttpRequest(url, function (ret, data) {
                    if (ret) {
                        utils.showLog("关卡数据上报成功！");
                    }
                    else {
                        utils.showLog("关卡数据上报失败！");
                    }
                }.bind(this));
            }
        }
        postRecommentShowData(location) {
            if (PlatUtils.IsNativeAndroid) {
                let method = "m=rjumpshow";
                let url = ST_ServerUrl$5 + method + `&location=${location}`;
                utils.commomHttpRequest(url, function (ret, data) {
                    if (ret) {
                        utils.showLog("上报互推组件显示位置成功！");
                    }
                    else {
                        utils.showLog("上报互推组件显示位置失败！");
                    }
                }.bind(this));
            }
        }
        postDataByLocation(otherGameAppId, location, status = 0) {
            if (PlatUtils.IsNativeAndroid) {
                let method = "m=rjump";
                let url = POST_ServerUrl$4 + method + `&jump_app_id=${otherGameAppId}&location=${location}&status=${status}`;
                utils.commomHttpRequest(url, function (ret, data) {
                    if (ret) {
                        utils.showLog(`数据上报成功`);
                    }
                    else {
                        utils.showLog("数据上报失败！");
                    }
                }.bind(this));
            }
        }
        sendEvent(eventName) {
            if (PlatUtils.IsNativeAndroid) {
                let method = "m=revent";
                let url = POST_ServerUrl$4 + method + `&event=${encodeURI(eventName)}`;
                utils.commomHttpRequest(url, function (ret, data) {
                    if (ret) {
                        utils.showLog("上报自定义事件成功！");
                    }
                    else {
                        utils.showLog("上报自定义事件失败！");
                    }
                }.bind(this));
            }
        }
        sendEventNew(eventName, eventId = "default", eventData) {
            if (PlatUtils.IsNativeAndroid) {
                let method = "m=reventv2";
                let url = POST_ServerUrl$4 + method + `&event=${encodeURI(eventName)}&event_id=${eventId}`;
                if (eventData) {
                    url += `&event_data=${encodeURI(eventData)}`;
                }
                utils.commomHttpRequest(url, (ret, data) => {
                    if (ret) {
                        utils.showLog("上报自定义事件成功！");
                        this.callBackToEvent(data);
                    }
                    else {
                        utils.showLog("上报自定义事件失败！");
                        this.callBackToEvent("false");
                    }
                });
            }
        }
        sendEventV3(eventName, eventId = "default", eventData) {
            if (PlatUtils.IsNativeAndroid) {
                let method = "m=reventv2";
                let url = POST_ServerUrl$4 + method + `&event=${encodeURI(eventName)}&event_id=${eventId}`;
                if (eventData) {
                    url += `&event_data=${encodeURI(eventData)}`;
                }
                utils.commomHttpRequest(url, (ret, data) => {
                    if (ret) {
                        utils.showLog("上报自定义事件成功！");
                        this.callBackToEvent(data);
                    }
                    else {
                        utils.showLog("上报自定义事件失败！");
                        this.callBackToEvent("false");
                    }
                });
            }
        }
        callBackToEvent(result) {
            if (PlatUtils.IsNativeAndroid) {
                try {
                    this.jniClassName.call("callBackToEvent", result);
                }
                catch (error) {
                    utils.showLog(error);
                }
            }
        }
    }

    const ST_ServerUrl$6 = "https://apps.youletd.com/gss?";
    const POST_ServerUrl$5 = "https://report.youletd.com/gss?";
    let ST_DefaultServerConfig$6 = "";
    class YZ_Tool_Douyin {
        constructor() {
            this._recorder = null;
            this._videoPath = null;
            this.isClickEnd = false;
            this._shareCallback = null;
            this.recorderStarTime = 0;
            this.isAutoShare = true;
            this.isNewsArticleLite = false;
            this._serverConfig = null;
            this._sysInfo = null;
            this.tt = Laya.Browser.window.tt;
            this._jumpIds = "";
            this._uid = "0";
            this._service_uid = "0";
            this._loginTime = 0;
            this._loginInterval = 30;
            this._reportLoginTime = 0;
            this._reportLoginInterval = 30;
            this.isReport = false;
            this.appLaunchOptions = [];
            this.is_auto_share_video = false;
        }
        get ServerConfig() {
            return this._serverConfig;
        }
        gameVersion() {
            return utils.config.douyinconfig.version;
        }
        get uid() {
            return "0";
        }
        get serviceId() {
            if (this._service_uid != "0") {
                console.log("uid为：" + this._service_uid);
                return this._service_uid;
            }
            this.reportLogin();
            return "0";
        }
        _login() {
            let curTime = new Date().getTime();
            let interval = (curTime - this._loginTime) / 1000;
            if (interval > 0 && interval < 30) {
                utils.showLog(`登录请求间隔小于：${this._loginInterval}秒`);
                return;
            }
            this._loginTime = curTime;
            let self = this;
            utils.showLog("douying暂时不获取uid，uid全部为0");
            this._uid = "0";
        }
        reportLogin() {
            if (this.isReport)
                return;
            this.isReport = true;
            let self = this;
            let curTime = new Date().getTime();
            let interval = (curTime - self._reportLoginTime) / 1000;
            if (interval > 0 && interval < 30) {
                utils.showLog(`上报登录获取UID小于：${self._reportLoginInterval}秒`);
                return;
            }
            self._reportLoginTime = curTime;
            let method = "m=login";
            let url = ST_ServerUrl$6 + method + `&device_data=0`;
            utils.commomHttpRequest(url, (ret, data) => {
                if (ret) {
                    if (data) {
                        let result = JSON.parse(data);
                        utils.showLog("data=" + data);
                        utils.showLog("result=" + result);
                        utils.showLog("result.uid=" + result.uid);
                        if (result.uid) {
                            self._service_uid = "" + result.uid;
                            utils.showLog("服务器请求登录成功! _service_uid=" + self._service_uid);
                            cc.setItem(YZ_Constant.ST_SERVICE_UID, self._service_uid);
                        }
                    }
                }
                else {
                    utils.showLog("获取数据失败1");
                }
                this.isReport = false;
            });
        }
        init(data) {
            if (PlatUtils.IsDouyin) {
                if (data) {
                    let configObj = JSON.parse(data);
                    if (configObj && configObj.toutiao) {
                        utils.showLog("本地配置数据:", JSON.stringify(configObj.toutiao));
                        ST_DefaultServerConfig$6 = JSON.stringify(configObj.toutiao);
                    }
                }
                this._service_uid = cc.getItem(YZ_Constant.ST_SERVICE_UID);
                this._service_uid = this._service_uid ? this._service_uid : "0";
                this._sysInfo = this.tt.getSystemInfoSync();
                utils.showLog("抖音平台信息：", JSON.stringify(this._sysInfo));
                if (this._sysInfo && this._sysInfo.appName && this._sysInfo.appName == "news_article_lite") {
                    this.isNewsArticleLite = true;
                }
                this.loadJumpIds().then(() => {
                    console.log("本地跳转ID加载成功！");
                    this._loadConfig();
                }).catch((erro) => {
                    console.error("本地跳转ID加载失败：", erro);
                    this._loadConfig();
                });
                this._loadConfig();
                let self = this;
                this._recorder = this.tt.getGameRecorderManager();
                if (this._recorder) {
                    this._recorder.onStart((res) => {
                        utils.showLog('录屏开始');
                        this.is_auto_share_video = false;
                        self._videoPath = "";
                        this.isClickEnd = false;
                        this.recorderStarTime = new Date().getTime();
                        utils.isRecording = true;
                        cc.emit("YZ_CommonMessage", { type: "YZ_RecordStart" });
                    });
                    this._recorder.onStop((res) => {
                        utils.showLog("录屏结束 :", res.videoPath);
                        utils.isRecording = false;
                        cc.emit("YZ_CommonMessage", { type: "YZ_RecordEnd" });
                        let curTime = new Date().getTime();
                        let interval = (curTime - this.recorderStarTime) / 1000;
                        if (interval > 3) {
                            self._videoPath = res.videoPath;
                            utils.showLog("录屏时间大于3秒");
                            if (this.isAutoShare) {
                                if (this.isClickEnd) {
                                    this.shareVideo();
                                    this.is_auto_share_video = true;
                                    this._shareCallback = null;
                                }
                                else if (utils.checkResultShow(1)) {
                                    utils.showLog("满足自动分享条件，弹出分享窗口！");
                                    if (utils.rewardCloseFunc == null) {
                                        utils.rewardValue = 0;
                                        utils.showShareRecordPanel();
                                    }
                                }
                                else if (interval > 100) {
                                    if (utils.rewardCloseFunc == null) {
                                        utils.rewardValue = 0;
                                        utils.showShareRecordPanel();
                                    }
                                }
                            }
                            else {
                                this.isAutoShare = true;
                            }
                        }
                        else {
                            this.tt.showToast({
                                title: "录屏时间小于3秒!",
                                icon: "fail",
                                duration: 2000,
                                success(res) {
                                    utils.showLog(`${res}`);
                                },
                                fail(res) {
                                    utils.showLog(`showToast调用失败`);
                                }
                            });
                            self._videoPath = "";
                            utils.showLog("录屏时间小于3秒，不记录录屏地址！");
                        }
                    });
                }
                this.tt.showShareMenu({
                    withShareTicket: false
                });
                this.tt.onShareAppMessage((res) => {
                    return self._getShareInfo();
                });
                utils.registerServerInitEvent(() => {
                    if (this.ServerConfig.add_favorite) {
                        setTimeout(() => {
                            utils.showLog("延迟调用添加搜藏!!");
                            this.showFavoriteGuide();
                        }, this.ServerConfig.add_favorite * 1000);
                    }
                }, this);
            }
        }
        showFavoriteGuide() {
            if (this.tt.showFavoriteGuide) {
                this.tt.showFavoriteGuide({
                    type: "bar",
                    content: "一键添加到我的小程序",
                    position: this.ServerConfig.favorite_type ? this.ServerConfig.favorite_type : "bottom",
                    success(res) {
                        utils.showLog("引导组件展示成功");
                    },
                    fail(res) {
                        utils.showLog("引导组件展示失败:ero=" + JSON.stringify(res));
                    },
                });
            }
            else {
                utils.showLog("当前头条版本不支持添加收藏！");
            }
        }
        loadJumpIds() {
            return new Promise((resolve, reject) => {
                Laya.loader.load("./game.json", Laya.Handler.create(this, (res, err) => {
                    if (!err) {
                        res.ttNavigateToMiniGameAppIdList.forEach(element => {
                            this._jumpIds += element + ",";
                        });
                        this._jumpIds.substring(0, this._jumpIds.lastIndexOf(","));
                        resolve();
                    }
                    reject(err);
                }));
            });
        }
        _loadConfig() {
            if (PlatUtils.IsDouyin) {
                let method = "m=g";
                utils.commomHttpRequest(ST_ServerUrl$6 + method + `&jump_id=${this._jumpIds}`, (ret, data) => {
                    if (ret) {
                        utils.showLog("抖音服务器配置数据获取成功: data = ", data);
                        let result = JSON.parse(data);
                        if (true) {
                            this._serverConfig = result;
                        }
                        else {
                            utils.showLog("抖音服务器配置数据校验不合法, 使用本地配置!");
                        }
                    }
                    else {
                        utils.showLog("抖音服务器配置数据获取失败, 使用本地配置!");
                    }
                    if (!this.ServerConfig) {
                        this._serverConfig = JSON.parse(ST_DefaultServerConfig$6);
                    }
                    else {
                        if (this.ServerConfig.is_local_pos_id == "false") {
                            utils.showLog("使用服务器下发的广告ID");
                            utils.config.douyinconfig.bannerId = this.ServerConfig.banner_pos_id;
                            utils.config.douyinconfig.insertId = this.ServerConfig.intersititia_pos_id;
                            utils.config.douyinconfig.videoId = this.ServerConfig.video_pos_id;
                        }
                        if (this._serverConfig.shares && this._serverConfig.shares.sy_title) {
                            utils.config.otherconfig.shareTitle = this._serverConfig.shares.sy_title;
                        }
                        if (this._serverConfig.shares && this._serverConfig.shares.sy_img) {
                            utils.config.otherconfig.shareImgUrl = this._serverConfig.shares.sy_img;
                        }
                    }
                    utils.emitServerInitEvent();
                });
            }
        }
        recordStart() {
            if (PlatUtils.IsDouyin) {
                if (this._recorder) {
                    this._recorder.start({
                        duration: 120
                    });
                }
            }
        }
        recordEnd() {
            if (PlatUtils.IsDouyin) {
                this._recorder.stop();
            }
        }
        share(callback) {
            if (PlatUtils.IsDouyin) {
                this._shareCallback = callback;
                if (this._videoPath) {
                    this.shareVideo();
                }
                else {
                    this.shareImage();
                }
            }
        }
        shareVideo() {
            if (PlatUtils.IsDouyin) {
                if (this._videoPath) {
                    let self = this;
                    this.tt.shareAppMessage({
                        channel: 'video',
                        extra: {
                            videoPath: this._videoPath
                        },
                        success() {
                            utils.showLog('视频分享成功!');
                            if (self._shareCallback) {
                                self._shareCallback(true);
                            }
                        },
                        fail(e) {
                            utils.showLog('视频分享失败!', JSON.stringify(e));
                            self._videoPath = "";
                            let msg = "分享失败!";
                            if (e && e.errMsg) {
                                msg = e.errMsg;
                                if (msg.indexOf("fail") != -1) {
                                    console.log(self._sysInfo);
                                    if (self._sysInfo.appName == "XiGua") {
                                        msg = "分享失败!";
                                    }
                                    else {
                                        msg = "分享失败，录屏时间太短！";
                                    }
                                }
                                else {
                                    msg = "分享失败!";
                                }
                            }
                            if (self._shareCallback) {
                                self._shareCallback(false, msg);
                            }
                            if (self.is_auto_share_video) {
                                self.is_auto_share_video = false;
                                self.tt.showToast({
                                    title: msg,
                                    icon: "fail",
                                    duration: 2000,
                                    success(res) {
                                        console.log(`${res}`);
                                    },
                                    fail(res) {
                                        console.log(`showToast调用失败`);
                                    }
                                });
                            }
                        }
                    });
                }
            }
        }
        shareImage() {
            if (PlatUtils.IsDouyin) {
                let shareInfo = utils.getShareInfo();
                utils.showLog(`分享图片：title:${shareInfo.title}; imageUrl:${shareInfo.imageUrl}`);
                if (shareInfo) {
                    let self = this;
                    this.tt.shareAppMessage({
                        title: shareInfo.title,
                        imageUrl: shareInfo.imageUrl,
                        success() {
                            utils.showLog('图片分享成功!');
                            if (self._shareCallback) {
                                self._shareCallback(true);
                            }
                        },
                        fail(e) {
                            utils.showLog('图片分享失败!', JSON.stringify(e));
                            if (self._shareCallback) {
                                self._shareCallback(false);
                            }
                        }
                    });
                }
            }
        }
        showMoreGamesButton(params) {
            if (PlatUtils.IsDouyin) {
                let left = 0;
                let top = 0;
                let width = 188 / 1080 * this._sysInfo.screenWidth;
                let height = 223 / 1080 * this._sysInfo.screenWidth;
                if (params) {
                    if (params.scale) {
                        width = width * params.scale;
                        height = height * params.scale;
                    }
                    if (params.left) {
                        left = params.left / cc.winSize.width * this._sysInfo.screenWidth;
                    }
                    else if (params.right) {
                        left = this._sysInfo.screenWidth - params.right / cc.winSize.width * this._sysInfo.screenWidth - width;
                    }
                    if (params.top) {
                        top = params.top / cc.winSize.height * this._sysInfo.screenHeight;
                    }
                    else if (params.bottom) {
                        top = this._sysInfo.screenHeight - params.bottom / cc.winSize.height * this._sysInfo.screenHeight - height;
                    }
                }
                utils.showLog(`更多游戏按钮参数：left:${left}; top:${top}; width:${width}; height:${height}`);
                return this.tt.createMoreGamesButton({
                    type: "image",
                    image: "img/more_game.png",
                    style: {
                        left: left,
                        top: top,
                        width: width,
                        height: height,
                        lineHeight: 40,
                        backgroundColor: "#ff0000",
                        textColor: "#ffffff",
                        textAlign: "center",
                        fontSize: 16,
                        borderRadius: 4,
                        borderWidth: 0,
                        borderColor: '#ff0000'
                    },
                    appLaunchOptions: [],
                    onNavigateToMiniGame(res) {
                        utils.showLog('跳转其他小游戏' + res);
                        if (res && res.errCode == 0) {
                        }
                    }
                });
            }
        }
        _getShareInfo() {
            if (PlatUtils.IsDouyin) {
                let shareInfo = utils.getShareInfo();
                if (shareInfo) {
                    return {
                        title: shareInfo.title,
                        imageUrl: shareInfo.imageUrl,
                        success: function (res) {
                            utils.showLog("分享成功!");
                        },
                        fail: function (err) {
                            utils.showLog("分享失败!");
                        }
                    };
                }
            }
            return {};
        }
        isOverMiniVersion(miniVersion) {
            if (PlatUtils.IsDouyin) {
                if (this._sysInfo && miniVersion != null) {
                    return this._compareVersion(this._sysInfo.SDKVersion, miniVersion);
                }
            }
            return false;
        }
        _compareVersion(first, second) {
            return parseInt(first.split(".").join("")) >= parseInt(second.split(".").join(""));
        }
        isShowMoreGamesModal() {
            if (PlatUtils.IsAndroid && this.isOverMiniVersion("1.33.0")) {
                return true;
            }
            utils.showLog("当前版本不支持显示抖音更多游戏弹窗！");
            return false;
        }
        showMoreGamesModal() {
            if (PlatUtils.IsAndroid) {
                this.tt.showMoreGamesModal({
                    appLaunchOptions: [],
                    success(res) {
                        console.log("success", res.errMsg);
                    },
                    fail(res) {
                        console.log("fail", res.errMsg);
                    }
                });
            }
            else {
                utils.showMsg("当前平台暂时不支持跳转");
            }
        }
        getRecommondGameList() {
            if (PlatUtils.IsDouyin
                && this.ServerConfig) {
                return this.ServerConfig.jump_list;
            }
            return null;
        }
        postLevel(level, status, levelName) {
            if (PlatUtils.IsDouyin) {
                let method = "m=rlevel";
                let url = POST_ServerUrl$5 + method + `&level_id=${level}&level_name=${encodeURI(levelName)}&status=${status}`;
                utils.commomHttpRequest(url, function (ret, data) {
                    if (ret) {
                        utils.showLog("关卡数据上报成功！");
                    }
                    else {
                        utils.showLog("关卡数据上报失败！");
                    }
                }.bind(this));
            }
        }
        sendEvent(eventName) {
            if (PlatUtils.IsDouyin) {
                let method = "m=revent";
                let url = POST_ServerUrl$5 + method + `&event=${encodeURI(eventName)}`;
                utils.commomHttpRequest(url, function (ret, data) {
                    if (ret) {
                        utils.showLog("上报自定义事件成功！");
                    }
                    else {
                        utils.showLog("上报自定义事件失败！");
                    }
                }.bind(this));
            }
        }
        showToast(msg) {
            if (PlatUtils.IsDouyin) {
                tt.showToast({
                    title: msg,
                    icon: "none",
                    duration: 2000,
                    success(res) {
                        console.log(`${res}`);
                    },
                    fail(res) {
                        console.log(`showToast调用失败`);
                    }
                });
            }
        }
    }

    var hexcase = 0;
    var b64pad = "";
    var chrsz = 8;
    function hex_md5(s) {
        return binl2hex(core_md5(str2binl(s), s.length * chrsz));
    }
    function b64_md5(s) {
        return binl2b64(core_md5(str2binl(s), s.length * chrsz));
    }
    function str_md5(s) {
        return binl2str(core_md5(str2binl(s), s.length * chrsz));
    }
    function hex_hmac_md5(key, data) {
        return binl2hex(core_hmac_md5(key, data));
    }
    function b64_hmac_md5(key, data) {
        return binl2b64(core_hmac_md5(key, data));
    }
    function str_hmac_md5(key, data) {
        return binl2str(core_hmac_md5(key, data));
    }
    function md5_vm_test() {
        return hex_md5("abc") == "900150983cd24fb0d6963f7d28e17f72";
    }
    function core_md5(x, len) {
        x[len >> 5] |= 0x80 << ((len) % 32);
        x[(((len + 64) >>> 9) << 4) + 14] = len;
        var a = 1732584193;
        var b = -271733879;
        var c = -1732584194;
        var d = 271733878;
        for (var i = 0; i < x.length; i += 16) {
            var olda = a;
            var oldb = b;
            var oldc = c;
            var oldd = d;
            a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);
            d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);
            c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);
            b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);
            a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);
            d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);
            c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);
            b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);
            a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);
            d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);
            c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);
            b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);
            a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);
            d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);
            c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);
            b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);
            a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);
            d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);
            c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);
            b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);
            a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);
            d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);
            c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);
            b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);
            a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);
            d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);
            c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);
            b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);
            a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);
            d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);
            c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);
            b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);
            a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);
            d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);
            c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);
            b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);
            a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);
            d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);
            c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);
            b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);
            a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);
            d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);
            c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);
            b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);
            a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);
            d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);
            c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);
            b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);
            a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);
            d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);
            c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);
            b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);
            a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);
            d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);
            c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);
            b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);
            a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);
            d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);
            c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);
            b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);
            a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);
            d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);
            c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);
            b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);
            a = safe_add(a, olda);
            b = safe_add(b, oldb);
            c = safe_add(c, oldc);
            d = safe_add(d, oldd);
        }
        return Array(a, b, c, d);
    }
    function md5_cmn(q, a, b, x, s, t) {
        return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);
    }
    function md5_ff(a, b, c, d, x, s, t) {
        return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
    }
    function md5_gg(a, b, c, d, x, s, t) {
        return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
    }
    function md5_hh(a, b, c, d, x, s, t) {
        return md5_cmn(b ^ c ^ d, a, b, x, s, t);
    }
    function md5_ii(a, b, c, d, x, s, t) {
        return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
    }
    function core_hmac_md5(key, data) {
        var bkey = str2binl(key);
        if (bkey.length > 16)
            bkey = core_md5(bkey, key.length * chrsz);
        var ipad = Array(16), opad = Array(16);
        for (var i = 0; i < 16; i++) {
            ipad[i] = bkey[i] ^ 0x36363636;
            opad[i] = bkey[i] ^ 0x5C5C5C5C;
        }
        var hash = core_md5(ipad.concat(str2binl(data)), 512 + data.length * chrsz);
        return core_md5(opad.concat(hash), 512 + 128);
    }
    function safe_add(x, y) {
        var lsw = (x & 0xFFFF) + (y & 0xFFFF);
        var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
        return (msw << 16) | (lsw & 0xFFFF);
    }
    function bit_rol(num, cnt) {
        return (num << cnt) | (num >>> (32 - cnt));
    }
    function str2binl(str) {
        var bin = Array();
        var mask = (1 << chrsz) - 1;
        for (var i = 0; i < str.length * chrsz; i += chrsz)
            bin[i >> 5] |= (str.charCodeAt(i / chrsz) & mask) << (i % 32);
        return bin;
    }
    function binl2str(bin) {
        var str = "";
        var mask = (1 << chrsz) - 1;
        for (var i = 0; i < bin.length * 32; i += chrsz)
            str += String.fromCharCode((bin[i >> 5] >>> (i % 32)) & mask);
        return str;
    }
    function binl2hex(binarray) {
        var hex_tab = hexcase ? "0123456789ABCDEF" : "0123456789abcdef";
        var str = "";
        for (var i = 0; i < binarray.length * 4; i++) {
            str += hex_tab.charAt((binarray[i >> 2] >> ((i % 4) * 8 + 4)) & 0xF) +
                hex_tab.charAt((binarray[i >> 2] >> ((i % 4) * 8)) & 0xF);
        }
        return str;
    }
    function binl2b64(binarray) {
        var tab = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
        var str = "";
        for (var i = 0; i < binarray.length * 4; i += 3) {
            var triplet = (((binarray[i >> 2] >> 8 * (i % 4)) & 0xFF) << 16) |
                (((binarray[i + 1 >> 2] >> 8 * ((i + 1) % 4)) & 0xFF) << 8) |
                ((binarray[i + 2 >> 2] >> 8 * ((i + 2) % 4)) & 0xFF);
            for (var j = 0; j < 4; j++) {
                if (i * 8 + j * 6 > binarray.length * 32)
                    str += b64pad;
                else
                    str += tab.charAt((triplet >> 6 * (3 - j)) & 0x3F);
            }
        }
        return str;
    }
    var md5 = {
        hex_md5
    };

    let ST_DefaultServerConfig$7 = "";
    const ST_ServerUrl$7 = "http://apps.youletd.com/gss?";
    const POST_ServerUrl$6 = "http://report.youletd.com/gss?";
    const QTT_ServerUrl = "https://newidea4-gamecenter-backend.1sapp.com/x/open/user/ticket?";
    const QTT_Report = "https://newidea4-gamecenter-backend.1sapp.com/x/open/report/round";
    class YZ_Tool_QTT {
        constructor() {
            this.platForm = "";
            this.qttGame = window.qttGame;
            this._serverConfig = null;
            this.ticket = "";
            this._ip = "192.168.0.1";
            this._sign = "";
            this._uid = "0";
            this._service_uid = "0";
            this._loginTime = 0;
            this._loginInterval = 30;
            this._reportLoginTime = 0;
            this._reportLoginInterval = 30;
            this.iframe = null;
            this.form = null;
            this._isReady = false;
            this._isLogin = false;
            this._isLoad = false;
            this._isStart = false;
        }
        get ServerConfig() {
            return this._serverConfig;
        }
        get uid() {
            if (this._uid != "0")
                return this._uid;
            this._login();
            return "0";
        }
        get serviceId() {
            if (this._service_uid != "0")
                return this._service_uid;
            this.reportLogin();
            return "0";
        }
        _login() {
            let curTime = new Date().getTime();
            let interval = (curTime - this._loginTime) / 1000;
            if (interval > 0 && interval < 30) {
                utils.showLog(`登录请求间隔小于：${this._loginInterval}秒`);
                return;
            }
            this._loginTime = curTime;
            let self = this;
            let url = this.getUrl();
            console.log("qtt获取用户的地址为：" + url);
            let xhr = new XMLHttpRequest();
            xhr.timeout = 6000;
            xhr.open('get', url);
            xhr.send();
            xhr.onreadystatechange = function () {
                utils.showLog("请求状态改变, reaedyState=", xhr.readyState, "; status=", xhr.status);
                if (xhr.readyState == 4 && xhr.status == 200) {
                    let msg = xhr.responseText;
                    let result = JSON.parse(msg);
                    self._uid = result.data.open_id;
                    self.postServerData(QTT_REPORT_TYPE.ready);
                }
                if (xhr.status != 200) {
                }
            };
            xhr.ontimeout = function () {
                utils.showLog("请求超时!");
            };
            xhr.onerror = function (err) {
                utils.showLog("请求出错! err=", JSON.stringify(err));
            };
        }
        reportLogin() {
            let self = this;
            let curTime = new Date().getTime();
            let interval = (curTime - self._reportLoginTime) / 1000;
            if (interval > 0 && interval < 30) {
                utils.showLog(`上报登录获取UID小于：${self._reportLoginInterval}秒`);
                return;
            }
            self._reportLoginTime = curTime;
            let method = "m=login";
            let url = ST_ServerUrl$7 + method + `&device_data=0`;
            utils.commomHttpRequest(url, (ret, data) => {
                if (ret) {
                    if (data) {
                        let result = JSON.parse(data);
                        utils.showLog("data=" + data);
                        utils.showLog("result=" + result);
                        utils.showLog("result.uid=" + result.uid);
                        if (result.ip) {
                            this._ip = result.ip;
                        }
                        if (result.uid) {
                            self._service_uid = "" + result.uid;
                            utils.showLog("服务器请求登录成功! _service_uid=" + self._service_uid);
                            cc.setItem(YZ_Constant.ST_SERVICE_UID, self._service_uid);
                        }
                    }
                }
                else {
                    utils.showLog("获取数据失败1");
                }
            });
        }
        init(data) {
            utils.showLog("qtt 初始化>>", data);
            if (data) {
                let configObj = JSON.parse(data);
                if (configObj && configObj.qutoutiao) {
                    ST_DefaultServerConfig$7 = JSON.stringify(configObj.qutoutiao);
                }
            }
            Laya.stage.on(QTT_REPORT_TYPE.ready, this, () => {
                this.postServerData(QTT_REPORT_TYPE.login);
            });
            Laya.stage.on(QTT_REPORT_TYPE.login, this, () => {
                this.postServerData(QTT_REPORT_TYPE.load);
            });
            this._uid = cc.getItem(YZ_Constant.ST_UID);
            this._uid = this._uid ? this._uid : "0";
            this.postServerData(QTT_REPORT_TYPE.ready);
            this._service_uid = cc.getItem(YZ_Constant.ST_SERVICE_UID);
            this._service_uid = this._service_uid ? this._service_uid : "0";
            this.platForm = this.GetRequest("platform");
            this.ticket = this.GetRequest("ticket");
            if (this.ticket && this.platForm) {
            }
            this.loadServerData();
        }
        postGameOverData(level) {
            if (PlatUtils.IsQTT) {
                this.qttGame.completeTask();
                this.qttGame.userInfo({ role: '趣头条', region: '区域1', level: level, ce: '1000000', round: '1', revenue: '100000', extend_info: { age: '18' } });
            }
            let time = Math.floor(new Date().getTime() / 1000);
            const values = {
                app_id: utils.config.qttconfig.appID,
                open_id: this.uid,
                ip: this._ip,
                round: level,
                game_time: time,
            };
            this.getSign(values);
            var formData = new FormData();
            formData.append("app_id", values.app_id);
            formData.append("open_id", values.open_id);
            formData.append("ip", values.ip);
            formData.append("round", values.round);
            formData.append("game_time", values.game_time);
            formData.append("sign", this._sign);
            this.post(values);
        }
        post(values) {
            if (!this.form) {
                this.form = document.createElement("form");
            }
            else {
                this.form.innerHTML = "";
            }
            if (!this.iframe) {
                this.iframe = document.createElement("iframe");
            }
            this.form.action = QTT_Report;
            this.form.enctype = "application/x-www-form-urlencoded";
            this.form.method = "post";
            this.iframe.name = "form";
            this.iframe.id = "form";
            this.form.target = "form";
            for (var item in values) {
                var opt = document.createElement("textarea");
                opt.name = item;
                opt.value = values[item];
                this.form.appendChild(opt);
            }
            document.body.appendChild(this.iframe);
            this.iframe.appendChild(this.form);
            this.form.submit();
        }
        getUserInfo() {
            this.qttGame.getUserInfo(utils.config.qttconfig.appKey, utils.config.qttconfig.appID, this.ticket, this.platForm).then(res => {
                utils.showLog("获取用户信息成功 #userInfo=", JSON.stringify(res));
            }).catch(err => {
            });
        }
        GetRequest(key) {
            var url = location.search;
            var theRequest = new Object();
            if (url.indexOf("?") != -1) {
                var str = url.substr(1);
                let strs = str.split("&");
                for (var i = 0; i < strs.length; i++) {
                    theRequest[strs[i].split("=")[0]] = unescape(strs[i].split("=")[1]);
                }
            }
            var value = theRequest[key];
            return value;
        }
        loadServerData() {
            if (!this.uid) {
                cc.error("用户ID为空>>>");
            }
            let method = "m=g";
            utils.commomHttpRequest(ST_ServerUrl$7 + method, (ret, data) => {
                utils.showLog("loadServerUserdate #ret=", ret, " #data=", data);
                if (ret) {
                    if (data) {
                        utils.showLog("qtt服务器配置数据获取成功: data = ", data);
                        let result = JSON.parse(data);
                        if (result) {
                            if (!utils.DebugLoacalConfig) {
                                this._serverConfig = result;
                                if (this._serverConfig.is_show_log_view && this._serverConfig.is_show_log_view == "true") {
                                    utils.isShowViewLog = true;
                                    utils.showViewLog();
                                }
                            }
                            else {
                                cc.warn("开启了本地数据测试，使用本地配置!");
                            }
                        }
                        else {
                            utils.showLog("qtt服务器配置数据不是合法的JSON数据, 使用本地配置!");
                        }
                    }
                    else {
                        utils.showLog("qtt服务器配置数据获取失败, 使用本地配置!");
                    }
                }
                else {
                }
                if (!this._serverConfig) {
                    this._serverConfig = JSON.parse(ST_DefaultServerConfig$7);
                }
                else {
                    if (this._serverConfig.is_local_pos_id
                        && this._serverConfig.is_local_pos_id == "false") {
                        utils.showLog("使用服务器下发的广告id");
                        utils.showLog("趣头条没有广告id");
                    }
                    else {
                        utils.showLog("使用本地配置的广告ID");
                    }
                }
                utils.emitServerInitEvent();
            });
        }
        postServerData(type, info) {
            console.log("趣头条数据上报：" + type, this._uid);
            if (!this.uid && this._uid != "0") {
                cc.error("用户ID不存在 ,不上报数据>>>");
                return;
            }
            switch (type) {
                case QTT_REPORT_TYPE.ready:
                    if (this._isReady) {
                        console.log("已经上传过资源加载完毕事件");
                        return;
                    }
                    else {
                        this._isReady = true;
                    }
                    break;
                case QTT_REPORT_TYPE.login:
                    if (this._isLogin) {
                        console.log("以及上传过资源加载完毕事件");
                        return;
                    }
                    else {
                        this._isLogin = true;
                    }
                    break;
                case QTT_REPORT_TYPE.load:
                    if (this._isLoad) {
                        console.log("以及上传过资源加载完毕事件");
                        return;
                    }
                    else {
                        this._isLoad = true;
                    }
                    break;
                case QTT_REPORT_TYPE.start:
                    if (this._isStart) {
                        console.log("以及上传过资源加载完毕事件");
                        return;
                    }
                    else {
                        this._isStart = true;
                    }
                    break;
                default:
                    break;
            }
            let app_id = utils.config.qttconfig.appID;
            let game_name = utils.config.qttconfig.gamename;
            let extend_info = info ? info : {};
            this.qttGame.reportData({ "type": type, "open_id": this.uid, "app_id": app_id, "game_name": game_name, "extend_info": extend_info });
            console.log("趣头条成功发送事件：" + type);
            Laya.stage.event(type);
        }
        postLevel(level, status, levelName) {
            if (PlatUtils.IsQTT) {
                let method = "m=rlevel";
                let url = POST_ServerUrl$6 + method + `&level_id=${level}&level_name=${encodeURI(levelName)}&status=${status}`;
                utils.commomHttpRequest(url, function (ret, data) {
                    if (ret) {
                        utils.showLog("关卡数据上报成功！");
                    }
                    else {
                        utils.showLog("关卡数据上报失败！");
                    }
                }.bind(this));
                if (status == LevelStatus.GameStart) {
                    this.postServerData(QTT_REPORT_TYPE.start);
                }
                if (status == LevelStatus.GameWin) {
                    console.log("上传到官方游戏胜利事件");
                    this.postGameOverData(Number(level));
                }
            }
        }
        getSign(values) {
            let s = this.sign(values);
            values.sign = s;
            this.checkSign(values);
            values.sign = s;
            this._sign = s;
        }
        getUrl() {
            let params = this.getParams();
            const values = {
                app_id: utils.config.qttconfig.appID,
                platform: params.platform,
                ticket: params.ticket,
                time: Math.floor(new Date().getTime() / 1000)
            };
            let s = this.sign(values);
            values.sign = s;
            this._sign = s;
            return QTT_ServerUrl + "app_id=" + values.app_id + "&platform=" + params.platform + "&ticket=" + params.ticket + "&time=" + values.time + "&sign=" + values.sign;
        }
        getParams() {
            let url = window.location.href;
            let paramArr = url.split("&");
            let platform;
            let ticket;
            paramArr.forEach(str => {
                if (str.indexOf("platform") != -1) {
                    platform = str.split("=")[1];
                }
                if (str.indexOf("ticket") != -1) {
                    ticket = str.split("=")[1];
                }
            });
            return { platform: platform, ticket: ticket };
        }
        sign(values) {
            delete values.sign;
            values.app_key = utils.config.qttconfig.appKey;
            let keysArr = [];
            for (let key in values) {
                keysArr.push(key);
            }
            keysArr.sort();
            let keys = '';
            keysArr.forEach((e) => {
                keys += e;
                keys += values[e];
            });
            console.log("原串为：" + keys);
            delete values.app_key;
            let sign = md5.hex_md5(keys);
            return sign;
        }
        checkSign(values) {
            let sign1 = values.sign;
            if (!sign1) {
                console.log('sign error');
                return false;
            }
            let sign2 = this.sign(values);
            if (sign1 !== sign2) {
                console.log("sign error");
                return false;
            }
            console.log('ok');
            return true;
        }
        sendEvent(eventName) {
            if (PlatUtils.IsQTT) {
                let method = "m=revent";
                let url = POST_ServerUrl$6 + method + `&event=${encodeURI(eventName)}`;
                utils.commomHttpRequest(url, function (ret, data) {
                    if (ret) {
                        utils.showLog("上报自定义事件成功！");
                    }
                    else {
                        utils.showLog("上报自定义事件失败！");
                    }
                }.bind(this));
            }
        }
    }
    var QTT_REPORT_TYPE;
    (function (QTT_REPORT_TYPE) {
        QTT_REPORT_TYPE["ready"] = "ready";
        QTT_REPORT_TYPE["login"] = "login";
        QTT_REPORT_TYPE["load"] = "load";
        QTT_REPORT_TYPE["start"] = "start";
        QTT_REPORT_TYPE["newRole"] = "newRole";
        QTT_REPORT_TYPE["newUser"] = "newUser";
        QTT_REPORT_TYPE["upgrade"] = "upgrade";
        QTT_REPORT_TYPE["userInfo"] = "userInfo";
        QTT_REPORT_TYPE["abnormal"] = "abnormal";
    })(QTT_REPORT_TYPE || (QTT_REPORT_TYPE = {}));

    const ST_ServerUrl$8 = "http://apps.youletd.com/aconfig?";
    let ST_DefaultServerConfig$8 = "";
    const ST_NativeInsertAdClickTimes$2 = "NativeInsertAdClickTimes";
    const ST_LastDateTime$2 = "LastDateTime";
    class YZ_Tool_Broswer {
        constructor() {
            this._serverConfig = null;
            this._nativeInsertAdClickTimes = 0;
            this._shortcutCreated = false;
        }
        get ServerConfig() {
            return this._serverConfig;
        }
        get NativeInsertAdClickTimes() {
            return this._nativeInsertAdClickTimes;
        }
        get ShortcutCreated() {
            return this._shortcutCreated;
        }
        getRecommondGameList() {
            return this.ServerConfig.jump_list;
        }
        init(data) {
            if (data) {
                let configObj = JSON.parse(data);
                if (configObj && configObj.oppo) {
                    ST_DefaultServerConfig$8 = JSON.stringify(configObj.oppo);
                }
            }
            this._loadConfig();
        }
        _loadConfig() {
            this._serverConfig = JSON.parse(ST_DefaultServerConfig$8);
            utils.emitServerInitEvent();
        }
        sendEvent(eventName) {
            utils.showLog("上报自定义事件 " + eventName);
        }
    }

    class AldUtils {
        static StartGame(level, model) {
            let stageName = model ? `${model},第${level}关` : `第${level}关`;
            let prarm = {
                stageId: `${level}`,
                stageName: stageName
            };
            if (PlatUtils.IsVIVO) {
                if (utils._tool_Vivo) {
                    utils._tool_Vivo.postLevel(level, LevelStatus.GameStart, stageName);
                }
            }
            else if (PlatUtils.IsXiaoMi) {
                if (utils._tool_Baidu) {
                    utils._tool_XiaoMi.postLevel(level, LevelStatus.GameStart, stageName);
                }
            }
            else if (PlatUtils.IsBaidu) {
                if (utils._tool_Baidu) {
                    utils._tool_Baidu.postLevel(level, LevelStatus.GameStart, stageName);
                }
            }
            else if (PlatUtils.IsQQ) {
                if (utils._tool_QQ) {
                    utils._tool_QQ.postLevel(level, LevelStatus.GameStart, stageName);
                }
            }
            else if (PlatUtils.IsDouyin) {
                if (utils.Tool_Douyin) {
                    utils.Tool_Douyin.postLevel(level, LevelStatus.GameStart, stageName);
                }
            }
            else if (PlatUtils.IsQTT) {
                if (utils._tool_QTT) {
                    utils._tool_QTT.postLevel(level, LevelStatus.GameStart, stageName);
                }
            }
            else if (PlatUtils.IsOPPO) {
                if (utils.oppoTool) {
                    utils.oppoTool.postLevel(level, LevelStatus.GameStart, stageName);
                }
            }
            else if (PlatUtils.IsWechat) {
                utils.wechatTool.postLevel(level, LevelStatus.GameStart, stageName);
            }
            else if (PlatUtils.IsNativeAndroid) {
                console.log("原生上报。。。。。");
                utils.Tool_Native.postLevel(level, LevelStatus.GameStart, stageName);
            }
        }
        static GameWin(level, star = 0, model) {
            let stageName = model ? `${model},第${level}关` : `第${level}关`;
            let desc = model ? `${model},第${level}关，游戏胜利！获得${star}星` : `第${level}关，游戏胜利！获得${star}星`;
            let prarm = {
                stageId: `${level}`,
                stageName: stageName,
                event: 'complete',
                params: { desc: desc }
            };
            if (PlatUtils.IsVIVO) {
                if (utils._tool_Vivo) {
                    utils._tool_Vivo.postLevel(level, LevelStatus.GameWin, stageName);
                }
            }
            else if (PlatUtils.IsXiaoMi) {
                if (utils._tool_Baidu) {
                    utils._tool_XiaoMi.postLevel(level, LevelStatus.GameWin, stageName);
                }
            }
            else if (PlatUtils.IsBaidu) {
                if (utils._tool_Baidu) {
                    utils._tool_Baidu.postLevel(level, LevelStatus.GameWin, stageName);
                }
            }
            else if (PlatUtils.IsQQ) {
                if (utils.Tool_QQ) {
                    utils.Tool_QQ.postLevel(level, LevelStatus.GameWin, stageName);
                }
            }
            else if (PlatUtils.IsDouyin) {
                if (utils.Tool_Douyin) {
                    utils.Tool_Douyin.postLevel(level, LevelStatus.GameWin, stageName);
                }
            }
            else if (PlatUtils.IsQTT) {
                if (utils._tool_QTT) {
                    utils._tool_QTT.postLevel(level, LevelStatus.GameWin, stageName);
                }
            }
            else if (PlatUtils.IsOPPO) {
                if (utils.oppoTool) {
                    utils.oppoTool.postLevel(level, LevelStatus.GameWin, stageName);
                }
            }
            else if (PlatUtils.IsWechat) {
                utils.wechatTool.postLevel(level, LevelStatus.GameWin, stageName);
            }
            else if (PlatUtils.IsNativeAndroid) {
                utils.Tool_Native.postLevel(level, LevelStatus.GameWin, stageName);
            }
        }
        static GameFail(level, model) {
            let stageName = model ? `${model},第${level}关` : `第${level}关`;
            let desc = model ? `${model},第${level}关，游戏失败!` : `第${level}关，游戏失败!`;
            let prarm = {
                stageId: `${level}`,
                stageName: stageName,
                event: 'fail',
                params: { desc: desc }
            };
            if (PlatUtils.IsVIVO) {
                if (utils._tool_Vivo) {
                    utils._tool_Vivo.postLevel(level, LevelStatus.GameFail, stageName);
                }
            }
            else if (PlatUtils.IsXiaoMi) {
                if (utils._tool_Baidu) {
                    utils._tool_XiaoMi.postLevel(level, LevelStatus.GameFail, stageName);
                }
            }
            else if (PlatUtils.IsBaidu) {
                if (utils._tool_Baidu) {
                    utils._tool_Baidu.postLevel(level, LevelStatus.GameFail, stageName);
                }
            }
            else if (PlatUtils.IsQQ) {
                if (utils.Tool_QQ) {
                    utils.Tool_QQ.postLevel(level, LevelStatus.GameFail, stageName);
                }
            }
            else if (PlatUtils.IsDouyin) {
                if (utils.Tool_Douyin) {
                    utils.Tool_Douyin.postLevel(level, LevelStatus.GameFail, stageName);
                }
            }
            else if (PlatUtils.IsQTT) {
                if (utils._tool_QTT) {
                    utils._tool_QTT.postLevel(level, LevelStatus.GameFail, stageName);
                }
            }
            else if (PlatUtils.IsOPPO) {
                if (utils.oppoTool) {
                    utils.oppoTool.postLevel(level, LevelStatus.GameFail, stageName);
                }
            }
            else if (PlatUtils.IsWechat) {
                utils.wechatTool.postLevel(level, LevelStatus.GameFail, stageName);
            }
            else if (PlatUtils.IsNativeAndroid) {
                utils.Tool_Native.postLevel(level, LevelStatus.GameFail, stageName);
            }
        }
        static GameSkip(level, model) {
            let stageName = model ? `${model},第${level}关` : `第${level}关`;
            if (PlatUtils.IsVIVO) {
                if (utils._tool_Vivo) {
                    utils._tool_Vivo.postLevel(level, LevelStatus.GameSkip, stageName);
                }
            }
            else if (PlatUtils.IsBaidu) {
                if (utils._tool_Baidu) {
                    utils._tool_Baidu.postLevel(level, LevelStatus.GameSkip, stageName);
                }
            }
            else if (PlatUtils.IsQQ) {
                if (utils.Tool_QQ) {
                    utils.Tool_QQ.postLevel(level, LevelStatus.GameSkip, stageName);
                }
            }
            else if (PlatUtils.IsDouyin) {
                if (utils.Tool_Douyin) {
                    utils.Tool_Douyin.postLevel(level, LevelStatus.GameSkip, stageName);
                }
            }
            else if (PlatUtils.IsQTT) {
                if (utils._tool_QTT) {
                    utils._tool_QTT.postLevel(level, LevelStatus.GameSkip, stageName);
                }
            }
            else if (PlatUtils.IsOPPO && utils.oppoTool) {
                utils.oppoTool.postLevel(level, LevelStatus.GameSkip, stageName);
            }
            if (PlatUtils.IsWechat && utils.wechatTool) {
                utils.wechatTool.postLevel(level, LevelStatus.GameSkip, stageName);
            }
        }
        static UseTool(level, toolName, model) {
        }
        static SendEvent(eventName) {
            utils.showLog(`事件上报:${eventName}`);
            utils.cur_tool && utils.cur_tool.sendEvent && utils.cur_tool.sendEvent(eventName);
        }
    }

    const ST_ServerUrl$9 = "http://apps.youletd.com/gss?";
    const POST_ServerUrl$7 = "http://report.youletd.com/gss?";
    let ST_DefaultServerConfig$9 = "";
    class YZ_Tool_Xiaomi {
        constructor() {
            this._sysInfo = null;
            this._serverConfig = null;
            this._uid = "0";
            this._service_uid = "0";
            this._loginTime = 0;
            this._loginInterval = 30;
            this._reportLoginTime = 0;
            this._reportLoginInterval = 30;
            this.isReport = false;
        }
        get SysInfo() {
            return this._sysInfo;
        }
        get ServerConfig() {
            return this._serverConfig;
        }
        get uid() {
            return "0";
        }
        get serviceId() {
            if (this._service_uid != "0")
                return this._service_uid;
            this.reportLogin();
            return "0";
        }
        _login() {
            let curTime = new Date().getTime();
            let interval = (curTime - this._loginTime) / 1000;
            if (interval > 0 && interval < this._loginInterval) {
                utils.showLog(`登录请求间隔小于：${this._loginInterval}秒`);
                return;
            }
            this._loginTime = curTime;
            let self = this;
            utils.showLog("vivo暂时不获取uid，uid全部为0");
            this._uid = "0";
            this.reportLogin();
        }
        reportLogin() {
            if (this.isReport)
                return;
            this.isReport = true;
            let self = this;
            let curTime = new Date().getTime();
            let interval = (curTime - this._reportLoginTime) / 1000;
            if (interval > 0 && interval < this._reportLoginInterval) {
                utils.showLog(`上报登录获取UID小于：${this._reportLoginInterval}秒`);
                return;
            }
            this._reportLoginTime = curTime;
            let method = "m=login";
            let url = ST_ServerUrl$9 + method + `&device_data=${encodeURI(JSON.stringify(this._sysInfo))}`;
            utils.commomHttpRequest(url, (ret, data) => {
                if (ret) {
                    if (data) {
                        let result = JSON.parse(data);
                        utils.showLog("data=" + data);
                        utils.showLog("result=" + result);
                        utils.showLog("result.uid=" + result.uid);
                        if (result.uid) {
                            self._service_uid = "" + result.uid;
                            utils.showLog("服务器请求登录成功! _service_uid=" + self._service_uid);
                            cc.setItem(YZ_Constant.ST_SERVICE_UID, self._service_uid);
                        }
                    }
                }
                else {
                    utils.showLog("获取数据失败1");
                }
                this.isReport = false;
            });
        }
        init(data) {
            if (PlatUtils.IsXiaoMi) {
                if (data) {
                    let configObj = JSON.parse(data);
                    if (configObj && configObj.xiaomi) {
                        ST_DefaultServerConfig$9 = JSON.stringify(configObj.xiaomi);
                    }
                }
                this._service_uid = cc.getItem(YZ_Constant.ST_SERVICE_UID);
                this._service_uid = this._service_uid ? this._service_uid : "0";
                this._loadConfig();
            }
        }
        _loadConfig() {
            if (PlatUtils.IsXiaoMi) {
                let method = "m=g";
                let url = ST_ServerUrl$9 + method;
                utils.commomHttpRequest(url, (ret, data) => {
                    if (ret) {
                        utils.showLog("小米服务器配置数据获取成功: data = " + data);
                        if (data) {
                            let result = JSON.parse(data);
                            if (result) {
                                if (!utils.DebugLoacalConfig) {
                                    this._serverConfig = result;
                                    if (this._serverConfig.is_show_log_view && this._serverConfig.is_show_log_view == "true") {
                                        utils.isShowViewLog = true;
                                    }
                                }
                                else {
                                    utils.showLog("开启了本地数据测试，使用本地配置!");
                                }
                            }
                            else {
                                utils.showLog("小米服务器配置数据不是合法的JSON数据, 使用本地配置!");
                            }
                        }
                    }
                    else {
                        utils.showLog("小米服务器配置数据获取失败, 使用本地配置!");
                    }
                    if (!this._serverConfig) {
                        this._serverConfig = JSON.parse(ST_DefaultServerConfig$9);
                    }
                    else {
                        if (this._serverConfig.is_local_pos_id
                            && this._serverConfig.is_local_pos_id == "false") {
                            utils.showLog("使用服务器下发的广告id");
                            utils.config.xiaomiConfig.insertId = this._serverConfig.intersititia_pos_id;
                            utils.config.xiaomiConfig.videoId = this._serverConfig.video_pos_id;
                        }
                        else {
                            utils.showLog("使用本地配置的广告ID");
                        }
                    }
                    utils.emitServerInitEvent();
                });
            }
        }
        isOverMiniVersion(miniVersion) {
            if (PlatUtils.IsXiaoMi) {
                if (this._sysInfo && this._sysInfo.platformVersionCode) {
                    return this._sysInfo.platformVersionCode >= miniVersion;
                }
            }
            return false;
        }
        postLevel(level, status, levelName) {
            if (PlatUtils.IsVIVO) {
                let method = "m=rlevel";
                let url = POST_ServerUrl$7 + method + `&level_id=${level}&level_name=${encodeURI(levelName)}&status=${status}`;
                utils.commomHttpRequest(url, function (ret, data) {
                    if (ret) {
                        utils.showLog("关卡数据上报成功！");
                    }
                    else {
                        utils.showLog("关卡数据上报失败！");
                    }
                }.bind(this));
            }
        }
        sendEvent(eventName) {
            if (PlatUtils.IsXiaoMi) {
                let method = "m=revent";
                let url = POST_ServerUrl$7 + method + `&event=${encodeURI(eventName)}`;
                utils.commomHttpRequest(url, function (ret, data) {
                    if (ret) {
                        utils.showLog("上报自定义事件成功！");
                    }
                    else {
                        utils.showLog("上报自定义事件失败！");
                    }
                }.bind(this));
            }
        }
    }

    class YZ_ShortcutWidget extends Laya.Script {
        constructor() {
            super(...arguments);
            this._panel = null;
            this._handImg = null;
            this._callback = null;
            this.isReve = false;
        }
        set Callback(value) {
            this._callback = value;
            console.log("增加创建回调", this._callback);
        }
        onAwake() {
            if (!this.owner)
                return;
            this._panel = this.owner.getChildByName("icon");
            this.owner.visible = false;
            this._panel.on(Laya.Event.CLICK, this, this.onBtnClickHandler);
            this._handImg = this.owner.getChildByName("hand");
            console.log("hand" + this._handImg);
        }
        onUpdate() {
            if (!this.owner)
                return;
            if (this._handImg.y >= 220) {
                this.isReve = true;
            }
            if (this._handImg.y <= 140) {
                this.isReve = false;
            }
            if (this.isReve) {
                this._handImg.y -= 2;
            }
            else {
                this._handImg.y += 2;
            }
        }
        onEnable() {
            utils.registerServerInitEvent(() => {
                if (!utils.isShowCreateShortcutWidget()) {
                    this.owner.visible = false;
                }
                else {
                    this.owner.visible = true;
                }
            }, this);
        }
        onDisable() {
            utils.unregisterServerInitEvent(this);
        }
        onBtnClickHandler() {
            cc.log("准备创建桌面图标");
            if (utils.canCreateShortcut()) {
                utils.createShortcut((ret) => {
                    if (ret) {
                        cc.log("快捷方式创建成功！", this._callback);
                        if (this._callback) {
                            this._callback(true);
                        }
                    }
                    else {
                        cc.log("快捷方式创建失败！", this._callback);
                        if (this._callback) {
                            this._callback(false);
                        }
                    }
                });
            }
        }
    }

    class YZ_Tool_4399 {
        constructor() {
            this._4399 = window.h5api;
            this._sysInfo = {};
            this._serverConfig = null;
        }
        get ServerConfig() {
            return this._serverConfig;
        }
        init(data) {
            if (PlatUtils.Is4399) {
                utils.showLog("4399 h5 平台初始化完成 >>");
                utils.emitServerInitEvent();
            }
        }
        share(callBack) {
            this._4399.share();
            callBack && callBack(true, "");
        }
        showRecommend() {
            this._4399.showRecommend();
        }
    }

    let ST_DefaultServerConfig$a = "";
    const ST_ServerUrl$a = "http://apps.youletd.com/gss?";
    const POST_ServerUrl$8 = "http://report.youletd.com/gss?";
    const QTT_ServerUrl$1 = "https://newidea4-gamecenter-backend.1sapp.com/x/open/user/ticket?";
    const QTT_Report$1 = "https://newidea4-gamecenter-backend.1sapp.com/x/open/report/round";
    class YZ_Tool_UC {
        constructor() {
            this.uc = window.uc;
            this._sysInfo = {};
            this._serverConfig = null;
            this._shareCallback = null;
            this._isShare = false;
            this._uid = "0";
            this._service_uid = "0";
            this._loginTime = 0;
            this._loginInterval = 30;
            this._reportLoginTime = 0;
            this._reportLoginInterval = 30;
            this.isReport = false;
        }
        get SysInfo() {
            return this._sysInfo;
        }
        get ServerConfig() {
            return this._serverConfig;
        }
        gameVersion() {
            return utils.config.ucConfig.version;
        }
        get uid() {
            return "0";
        }
        get serviceId() {
            if (this._service_uid != "0")
                return this._service_uid;
            this.reportLogin();
            return "0";
        }
        _login() {
            let curTime = new Date().getTime();
            let interval = (curTime - this._loginTime) / 1000;
            if (interval > 0 && interval < 30) {
                utils.showLog("登录请求间隔小于：" + this._loginInterval + "秒");
                return;
            }
            this._loginTime = curTime;
            let self = this;
            utils.showLog("uc暂时不获取uid，uid全部为0");
            this._uid = "0";
        }
        reportLogin() {
            if (this.isReport)
                return;
            this.isReport = true;
            let self = this;
            let curTime = new Date().getTime();
            let interval = (curTime - self._reportLoginTime) / 1000;
            if (interval > 0 && interval < 30) {
                utils.showLog("上报登录获取UID小于：" + self._reportLoginInterval + "秒");
                return;
            }
            self._reportLoginTime = curTime;
            let method = "m=login";
            let url = ST_ServerUrl$a + method + `&device_data=0`;
            utils.commomHttpRequest(url, (ret, data) => {
                if (ret) {
                    if (data) {
                        let result = JSON.parse(data);
                        utils.showLog("data=" + data);
                        utils.showLog("result=" + result);
                        utils.showLog("result.uid=" + result.uid);
                        if (result.uid) {
                            self._service_uid = "" + result.uid;
                            console.log("self._service_uid:" + self._service_uid);
                            utils.showLog("服务器请求登录成功! _service_uid=" + self._service_uid);
                            cc.setItem(YZ_Constant.ST_SERVICE_UID, self._service_uid);
                        }
                    }
                }
                else {
                    utils.showLog("获取数据失败1");
                }
                this.isReport = false;
            });
        }
        init(data) {
            if (PlatUtils.IsUc) {
                if (data) {
                    let configObj = JSON.parse(data);
                    if (configObj && configObj.uc) {
                        ST_DefaultServerConfig$a = JSON.stringify(configObj.uc);
                    }
                }
                this._service_uid = cc.getItem(YZ_Constant.ST_SERVICE_UID);
                this._service_uid = this._service_uid ? this._service_uid : "0";
                try {
                    this._sysInfo = this.uc.getSystemInfoSync();
                    if (typeof this._sysInfo === 'string') {
                        try {
                            this._sysInfo = JSON.parse(this._sysInfo);
                        }
                        catch (e) { }
                    }
                    utils.showLog("uc 小游戏平台信息: " + JSON.stringify(this.SysInfo));
                }
                catch (e) {
                    utils.showLog("uc 小游戏平台数据获取失败!");
                }
                this._loadConfig();
            }
        }
        _loadConfig() {
            if (PlatUtils.IsUc) {
                let method = "m=g";
                utils.commomHttpRequest(ST_ServerUrl$a + method, (ret, data) => {
                    if (ret) {
                        utils.showLog("uc服务器配置数据获取成功: data = " + data);
                        if (data) {
                            let result = JSON.parse(data);
                            if (result) {
                                if (!utils.DebugLoacalConfig) {
                                    this._serverConfig = result;
                                    if (this._serverConfig.is_show_log_view && this._serverConfig.is_show_log_view == "true") {
                                        utils.isShowViewLog = true;
                                    }
                                }
                                else {
                                    cc.warn("开启了本地数据测试，使用本地配置!");
                                }
                            }
                            else {
                                utils.showLog("uc服务器配置数据不是合法的JSON数据, 使用本地配置!");
                            }
                        }
                    }
                    else {
                        utils.showLog("uc服务器配置数据获取失败, 使用本地配置!");
                    }
                    if (!this._serverConfig) {
                        this._serverConfig = JSON.parse(ST_DefaultServerConfig$a);
                    }
                    else {
                        if (this._serverConfig.shares) {
                            if (this._serverConfig.shares.sy_title) {
                                utils.config.otherconfig.shareTitle = this._serverConfig.shares.sy_title;
                            }
                            if (this._serverConfig.shares.sy_img) {
                                utils.config.otherconfig.shareImgUrl = this._serverConfig.shares.sy_img;
                            }
                        }
                    }
                    utils.emitServerInitEvent();
                });
            }
        }
        getSystemInfo() {
            if (PlatUtils.IsUc) {
                return this._sysInfo;
            }
        }
        share(callback = null) {
            if (PlatUtils.IsUc) {
                this._shareCallback = callback;
                this._isShare = true;
                let getShareInfo = {
                    title: utils.config.otherconfig.shareTitle,
                    imageUrl: utils.config.otherconfig.shareImgUrl,
                    success: this._shareCallback,
                    fail: this._shareCallback
                };
                this.uc.shareAppMessage(getShareInfo);
            }
        }
        isOverMinVersion(minVersion) {
            let curVersion = this._sysInfo.SDKVersion;
            return this._compareVersion(curVersion, minVersion) >= 0;
        }
        _compareVersion(v1, v2) {
            if (!v1 || !v2)
                return -1;
            v1 = v1.split('.');
            v2 = v2.split('.');
            const len = Math.max(v1.length, v2.length);
            while (v1.length < len) {
                v1.push('0');
            }
            while (v2.length < len) {
                v2.push('0');
            }
            for (let i = 0; i < len; i++) {
                const num1 = parseInt(v1[i]);
                const num2 = parseInt(v2[i]);
                if (num1 > num2) {
                    return 1;
                }
                else if (num1 < num2) {
                    return -1;
                }
            }
            return 0;
        }
        postLevel(level, status, levelName) {
            if (PlatUtils.IsUc) {
                let method = "m=rlevel";
                let url = POST_ServerUrl$8 + method + `&level_id=${level}&level_name=${encodeURI(levelName)}&status=${status}`;
                utils.commomHttpRequest(url, function (ret, data) {
                    if (ret) {
                        utils.showLog("关卡数据上报成功！");
                    }
                    else {
                        utils.showLog("关卡数据上报失败！");
                    }
                }.bind(this));
            }
        }
        sendEvent(eventName) {
            if (PlatUtils.IsUc) {
                let method = "m=revent";
                let url = POST_ServerUrl$8 + method + "&event=" + encodeURI(eventName);
                utils.commomHttpRequest(url, function (ret, data) {
                    if (ret) {
                        utils.showLog("上报自定义事件成功！");
                    }
                    else {
                        utils.showLog("上报自定义事件失败！");
                    }
                }.bind(this));
            }
        }
    }

    var CryptoJS = CryptoJS || function (u, p) {
        var d = {}, l = d.lib = {}, s = function () { }, t = l.Base = {
            extend: function (a) {
                s.prototype = this;
                var c = new s();
                a && c.mixIn(a);
                c.hasOwnProperty("init") || (c.init = function () {
                    c.$super.init.apply(this, arguments);
                });
                c.init.prototype = c;
                c.$super = this;
                return c;
            },
            create: function () {
                var a = this.extend();
                a.init.apply(a, arguments);
                return a;
            },
            init: function () { },
            mixIn: function (a) {
                for (var c in a)
                    a.hasOwnProperty(c) && (this[c] = a[c]);
                a.hasOwnProperty("toString") && (this.toString = a.toString);
            },
            clone: function () {
                return this.init.prototype.extend(this);
            }
        }, r = l.WordArray = t.extend({
            init: function (a, c) {
                a = this.words = a || [];
                this.sigBytes = c != p ? c : 4 * a.length;
            },
            toString: function (a) {
                return (a || v).stringify(this);
            },
            concat: function (a) {
                var c = this.words, e = a.words, j = this.sigBytes;
                a = a.sigBytes;
                this.clamp();
                if (j % 4)
                    for (var k = 0; k < a; k++)
                        c[j + k >>> 2] |= (e[k >>> 2] >>> 24 - 8 * (k % 4) & 255) << 24 - 8 * ((j + k) % 4);
                else if (65535 < e.length)
                    for (k = 0; k < a; k += 4)
                        c[j + k >>> 2] = e[k >>> 2];
                else
                    c.push.apply(c, e);
                this.sigBytes += a;
                return this;
            },
            clamp: function () {
                var a = this.words, c = this.sigBytes;
                a[c >>> 2] &= 4294967295 << 32 - 8 * (c % 4);
                a.length = u.ceil(c / 4);
            },
            clone: function () {
                var a = t.clone.call(this);
                a.words = this.words.slice(0);
                return a;
            },
            random: function (a) {
                for (var c = [], e = 0; e < a; e += 4)
                    c.push(4294967296 * u.random() | 0);
                return new r.init(c, a);
            }
        }), w = d.enc = {}, v = w.Hex = {
            stringify: function (a) {
                var c = a.words;
                a = a.sigBytes;
                for (var e = [], j = 0; j < a; j++) {
                    var k = c[j >>> 2] >>> 24 - 8 * (j % 4) & 255;
                    e.push((k >>> 4).toString(16));
                    e.push((k & 15).toString(16));
                }
                return e.join("");
            },
            parse: function (a) {
                for (var c = a.length, e = [], j = 0; j < c; j += 2)
                    e[j >>> 3] |= parseInt(a.substr(j, 2), 16) << 24 - 4 * (j % 8);
                return new r.init(e, c / 2);
            }
        }, b = w.Latin1 = {
            stringify: function (a) {
                var c = a.words;
                a = a.sigBytes;
                for (var e = [], j = 0; j < a; j++)
                    e.push(String.fromCharCode(c[j >>> 2] >>> 24 - 8 * (j % 4) & 255));
                return e.join("");
            },
            parse: function (a) {
                for (var c = a.length, e = [], j = 0; j < c; j++)
                    e[j >>> 2] |= (a.charCodeAt(j) & 255) << 24 - 8 * (j % 4);
                return new r.init(e, c);
            }
        }, x = w.Utf8 = {
            stringify: function (a) {
                try {
                    return decodeURIComponent(escape(b.stringify(a)));
                }
                catch (c) {
                    throw Error("Malformed UTF-8 data");
                }
            },
            parse: function (a) {
                return b.parse(unescape(encodeURIComponent(a)));
            }
        }, q = l.BufferedBlockAlgorithm = t.extend({
            reset: function () {
                this._data = new r.init();
                this._nDataBytes = 0;
            },
            _append: function (a) {
                "string" == typeof a && (a = x.parse(a));
                this._data.concat(a);
                this._nDataBytes += a.sigBytes;
            },
            _process: function (a) {
                var c = this._data, e = c.words, j = c.sigBytes, k = this.blockSize, b = j / (4 * k), b = a ? u.ceil(b) : u.max((b | 0) - this._minBufferSize, 0);
                a = b * k;
                j = u.min(4 * a, j);
                if (a) {
                    for (var q = 0; q < a; q += k)
                        this._doProcessBlock(e, q);
                    q = e.splice(0, a);
                    c.sigBytes -= j;
                }
                return new r.init(q, j);
            },
            clone: function () {
                var a = t.clone.call(this);
                a._data = this._data.clone();
                return a;
            },
            _minBufferSize: 0
        });
        l.Hasher = q.extend({
            cfg: t.extend(),
            init: function (a) {
                this.cfg = this.cfg.extend(a);
                this.reset();
            },
            reset: function () {
                q.reset.call(this);
                this._doReset();
            },
            update: function (a) {
                this._append(a);
                this._process();
                return this;
            },
            finalize: function (a) {
                a && this._append(a);
                return this._doFinalize();
            },
            blockSize: 16,
            _createHelper: function (a) {
                return function (b, e) {
                    return new a.init(e).finalize(b);
                };
            },
            _createHmacHelper: function (a) {
                return function (b, e) {
                    return new n.HMAC.init(a, e).finalize(b);
                };
            }
        });
        var n = d.algo = {};
        return d;
    }(Math);
    (function () {
        var u = CryptoJS, p = u.lib.WordArray;
        u.enc.Base64 = {
            stringify: function (d) {
                var l = d.words, p = d.sigBytes, t = this._map;
                d.clamp();
                d = [];
                for (var r = 0; r < p; r += 3)
                    for (var w = (l[r >>> 2] >>> 24 - 8 * (r % 4) & 255) << 16 | (l[r + 1 >>> 2] >>> 24 - 8 * ((r + 1) % 4) & 255) << 8 | l[r + 2 >>> 2] >>> 24 - 8 * ((r + 2) % 4) & 255, v = 0; 4 > v && r + 0.75 * v < p; v++)
                        d.push(t.charAt(w >>> 6 * (3 - v) & 63));
                if (l = t.charAt(64))
                    for (; d.length % 4;)
                        d.push(l);
                return d.join("");
            },
            parse: function (d) {
                var l = d.length, s = this._map, t = s.charAt(64);
                t && (t = d.indexOf(t), -1 != t && (l = t));
                for (var t = [], r = 0, w = 0; w < l; w++)
                    if (w % 4) {
                        var v = s.indexOf(d.charAt(w - 1)) << 2 * (w % 4), b = s.indexOf(d.charAt(w)) >>> 6 - 2 * (w % 4);
                        t[r >>> 2] |= (v | b) << 24 - 8 * (r % 4);
                        r++;
                    }
                return p.create(t, r);
            },
            _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
        };
    })();
    (function (u) {
        function p(b, n, a, c, e, j, k) {
            b = b + (n & a | ~n & c) + e + k;
            return (b << j | b >>> 32 - j) + n;
        }
        function d(b, n, a, c, e, j, k) {
            b = b + (n & c | a & ~c) + e + k;
            return (b << j | b >>> 32 - j) + n;
        }
        function l(b, n, a, c, e, j, k) {
            b = b + (n ^ a ^ c) + e + k;
            return (b << j | b >>> 32 - j) + n;
        }
        function s(b, n, a, c, e, j, k) {
            b = b + (a ^ (n | ~c)) + e + k;
            return (b << j | b >>> 32 - j) + n;
        }
        for (var t = CryptoJS, r = t.lib, w = r.WordArray, v = r.Hasher, r = t.algo, b = [], x = 0; 64 > x; x++)
            b[x] = 4294967296 * u.abs(u.sin(x + 1)) | 0;
        r = r.MD5 = v.extend({
            _doReset: function () {
                this._hash = new w.init([1732584193, 4023233417, 2562383102, 271733878]);
            },
            _doProcessBlock: function (q, n) {
                for (var a = 0; 16 > a; a++) {
                    var c = n + a, e = q[c];
                    q[c] = (e << 8 | e >>> 24) & 16711935 | (e << 24 | e >>> 8) & 4278255360;
                }
                var a = this._hash.words, c = q[n + 0], e = q[n + 1], j = q[n + 2], k = q[n + 3], z = q[n + 4], r = q[n + 5], t = q[n + 6], w = q[n + 7], v = q[n + 8], A = q[n + 9], B = q[n + 10], C = q[n + 11], u = q[n + 12], D = q[n + 13], E = q[n + 14], x = q[n + 15], f = a[0], m = a[1], g = a[2], h = a[3], f = p(f, m, g, h, c, 7, b[0]), h = p(h, f, m, g, e, 12, b[1]), g = p(g, h, f, m, j, 17, b[2]), m = p(m, g, h, f, k, 22, b[3]), f = p(f, m, g, h, z, 7, b[4]), h = p(h, f, m, g, r, 12, b[5]), g = p(g, h, f, m, t, 17, b[6]), m = p(m, g, h, f, w, 22, b[7]), f = p(f, m, g, h, v, 7, b[8]), h = p(h, f, m, g, A, 12, b[9]), g = p(g, h, f, m, B, 17, b[10]), m = p(m, g, h, f, C, 22, b[11]), f = p(f, m, g, h, u, 7, b[12]), h = p(h, f, m, g, D, 12, b[13]), g = p(g, h, f, m, E, 17, b[14]), m = p(m, g, h, f, x, 22, b[15]), f = d(f, m, g, h, e, 5, b[16]), h = d(h, f, m, g, t, 9, b[17]), g = d(g, h, f, m, C, 14, b[18]), m = d(m, g, h, f, c, 20, b[19]), f = d(f, m, g, h, r, 5, b[20]), h = d(h, f, m, g, B, 9, b[21]), g = d(g, h, f, m, x, 14, b[22]), m = d(m, g, h, f, z, 20, b[23]), f = d(f, m, g, h, A, 5, b[24]), h = d(h, f, m, g, E, 9, b[25]), g = d(g, h, f, m, k, 14, b[26]), m = d(m, g, h, f, v, 20, b[27]), f = d(f, m, g, h, D, 5, b[28]), h = d(h, f, m, g, j, 9, b[29]), g = d(g, h, f, m, w, 14, b[30]), m = d(m, g, h, f, u, 20, b[31]), f = l(f, m, g, h, r, 4, b[32]), h = l(h, f, m, g, v, 11, b[33]), g = l(g, h, f, m, C, 16, b[34]), m = l(m, g, h, f, E, 23, b[35]), f = l(f, m, g, h, e, 4, b[36]), h = l(h, f, m, g, z, 11, b[37]), g = l(g, h, f, m, w, 16, b[38]), m = l(m, g, h, f, B, 23, b[39]), f = l(f, m, g, h, D, 4, b[40]), h = l(h, f, m, g, c, 11, b[41]), g = l(g, h, f, m, k, 16, b[42]), m = l(m, g, h, f, t, 23, b[43]), f = l(f, m, g, h, A, 4, b[44]), h = l(h, f, m, g, u, 11, b[45]), g = l(g, h, f, m, x, 16, b[46]), m = l(m, g, h, f, j, 23, b[47]), f = s(f, m, g, h, c, 6, b[48]), h = s(h, f, m, g, w, 10, b[49]), g = s(g, h, f, m, E, 15, b[50]), m = s(m, g, h, f, r, 21, b[51]), f = s(f, m, g, h, u, 6, b[52]), h = s(h, f, m, g, k, 10, b[53]), g = s(g, h, f, m, B, 15, b[54]), m = s(m, g, h, f, e, 21, b[55]), f = s(f, m, g, h, v, 6, b[56]), h = s(h, f, m, g, x, 10, b[57]), g = s(g, h, f, m, t, 15, b[58]), m = s(m, g, h, f, D, 21, b[59]), f = s(f, m, g, h, z, 6, b[60]), h = s(h, f, m, g, C, 10, b[61]), g = s(g, h, f, m, j, 15, b[62]), m = s(m, g, h, f, A, 21, b[63]);
                a[0] = a[0] + f | 0;
                a[1] = a[1] + m | 0;
                a[2] = a[2] + g | 0;
                a[3] = a[3] + h | 0;
            },
            _doFinalize: function () {
                var b = this._data, n = b.words, a = 8 * this._nDataBytes, c = 8 * b.sigBytes;
                n[c >>> 5] |= 128 << 24 - c % 32;
                var e = u.floor(a / 4294967296);
                n[(c + 64 >>> 9 << 4) + 15] = (e << 8 | e >>> 24) & 16711935 | (e << 24 | e >>> 8) & 4278255360;
                n[(c + 64 >>> 9 << 4) + 14] = (a << 8 | a >>> 24) & 16711935 | (a << 24 | a >>> 8) & 4278255360;
                b.sigBytes = 4 * (n.length + 1);
                this._process();
                b = this._hash;
                n = b.words;
                for (a = 0; 4 > a; a++)
                    c = n[a], n[a] = (c << 8 | c >>> 24) & 16711935 | (c << 24 | c >>> 8) & 4278255360;
                return b;
            },
            clone: function () {
                var b = v.clone.call(this);
                b._hash = this._hash.clone();
                return b;
            }
        });
        t.MD5 = v._createHelper(r);
        t.HmacMD5 = v._createHmacHelper(r);
    })(Math);
    (function () {
        var u = CryptoJS, p = u.lib, d = p.Base, l = p.WordArray, p = u.algo, s = p.EvpKDF = d.extend({
            cfg: d.extend({
                keySize: 4,
                hasher: p.MD5,
                iterations: 1
            }),
            init: function (d) {
                this.cfg = this.cfg.extend(d);
            },
            compute: function (d, r) {
                for (var p = this.cfg, s = p.hasher.create(), b = l.create(), u = b.words, q = p.keySize, p = p.iterations; u.length < q;) {
                    n && s.update(n);
                    var n = s.update(d).finalize(r);
                    s.reset();
                    for (var a = 1; a < p; a++)
                        n = s.finalize(n), s.reset();
                    b.concat(n);
                }
                b.sigBytes = 4 * q;
                return b;
            }
        });
        u.EvpKDF = function (d, l, p) {
            return s.create(p).compute(d, l);
        };
    })();
    CryptoJS.lib.Cipher || function (u) {
        var p = CryptoJS, d = p.lib, l = d.Base, s = d.WordArray, t = d.BufferedBlockAlgorithm, r = p.enc.Base64, w = p.algo.EvpKDF, v = d.Cipher = t.extend({
            cfg: l.extend(),
            createEncryptor: function (e, a) {
                return this.create(this._ENC_XFORM_MODE, e, a);
            },
            createDecryptor: function (e, a) {
                return this.create(this._DEC_XFORM_MODE, e, a);
            },
            init: function (e, a, b) {
                this.cfg = this.cfg.extend(b);
                this._xformMode = e;
                this._key = a;
                this.reset();
            },
            reset: function () {
                t.reset.call(this);
                this._doReset();
            },
            process: function (e) {
                this._append(e);
                return this._process();
            },
            finalize: function (e) {
                e && this._append(e);
                return this._doFinalize();
            },
            keySize: 4,
            ivSize: 4,
            _ENC_XFORM_MODE: 1,
            _DEC_XFORM_MODE: 2,
            _createHelper: function (e) {
                return {
                    encrypt: function (b, k, d) {
                        return ("string" == typeof k ? c : a).encrypt(e, b, k, d);
                    },
                    decrypt: function (b, k, d) {
                        return ("string" == typeof k ? c : a).decrypt(e, b, k, d);
                    }
                };
            }
        });
        d.StreamCipher = v.extend({
            _doFinalize: function () {
                return this._process(!0);
            },
            blockSize: 1
        });
        var b = p.mode = {}, x = function (e, a, b) {
            var c = this._iv;
            c ? this._iv = u : c = this._prevBlock;
            for (var d = 0; d < b; d++)
                e[a + d] ^= c[d];
        }, q = (d.BlockCipherMode = l.extend({
            createEncryptor: function (e, a) {
                return this.Encryptor.create(e, a);
            },
            createDecryptor: function (e, a) {
                return this.Decryptor.create(e, a);
            },
            init: function (e, a) {
                this._cipher = e;
                this._iv = a;
            }
        })).extend();
        q.Encryptor = q.extend({
            processBlock: function (e, a) {
                var b = this._cipher, c = b.blockSize;
                x.call(this, e, a, c);
                b.encryptBlock(e, a);
                this._prevBlock = e.slice(a, a + c);
            }
        });
        q.Decryptor = q.extend({
            processBlock: function (e, a) {
                var b = this._cipher, c = b.blockSize, d = e.slice(a, a + c);
                b.decryptBlock(e, a);
                x.call(this, e, a, c);
                this._prevBlock = d;
            }
        });
        b = b.CBC = q;
        q = (p.pad = {}).Pkcs7 = {
            pad: function (a, b) {
                for (var c = 4 * b, c = c - a.sigBytes % c, d = c << 24 | c << 16 | c << 8 | c, l = [], n = 0; n < c; n += 4)
                    l.push(d);
                c = s.create(l, c);
                a.concat(c);
            },
            unpad: function (a) {
                a.sigBytes -= a.words[a.sigBytes - 1 >>> 2] & 255;
            }
        };
        d.BlockCipher = v.extend({
            cfg: v.cfg.extend({
                mode: b,
                padding: q
            }),
            reset: function () {
                v.reset.call(this);
                var a = this.cfg, b = a.iv, a = a.mode;
                if (this._xformMode == this._ENC_XFORM_MODE)
                    var c = a.createEncryptor;
                else
                    c = a.createDecryptor, this._minBufferSize = 1;
                this._mode = c.call(a, this, b && b.words);
            },
            _doProcessBlock: function (a, b) {
                this._mode.processBlock(a, b);
            },
            _doFinalize: function () {
                var a = this.cfg.padding;
                if (this._xformMode == this._ENC_XFORM_MODE) {
                    a.pad(this._data, this.blockSize);
                    var b = this._process(!0);
                }
                else
                    b = this._process(!0), a.unpad(b);
                return b;
            },
            blockSize: 4
        });
        var n = d.CipherParams = l.extend({
            init: function (a) {
                this.mixIn(a);
            },
            toString: function (a) {
                return (a || this.formatter).stringify(this);
            }
        }), b = (p.format = {}).OpenSSL = {
            stringify: function (a) {
                var b = a.ciphertext;
                a = a.salt;
                return (a ? s.create([1398893684, 1701076831]).concat(a).concat(b) : b).toString(r);
            },
            parse: function (a) {
                a = r.parse(a);
                var b = a.words;
                if (1398893684 == b[0] && 1701076831 == b[1]) {
                    var c = s.create(b.slice(2, 4));
                    b.splice(0, 4);
                    a.sigBytes -= 16;
                }
                return n.create({
                    ciphertext: a,
                    salt: c
                });
            }
        }, a = d.SerializableCipher = l.extend({
            cfg: l.extend({
                format: b
            }),
            encrypt: function (a, b, c, d) {
                d = this.cfg.extend(d);
                var l = a.createEncryptor(c, d);
                b = l.finalize(b);
                l = l.cfg;
                return n.create({
                    ciphertext: b,
                    key: c,
                    iv: l.iv,
                    algorithm: a,
                    mode: l.mode,
                    padding: l.padding,
                    blockSize: a.blockSize,
                    formatter: d.format
                });
            },
            decrypt: function (a, b, c, d) {
                d = this.cfg.extend(d);
                b = this._parse(b, d.format);
                return a.createDecryptor(c, d).finalize(b.ciphertext);
            },
            _parse: function (a, b) {
                return "string" == typeof a ? b.parse(a, this) : a;
            }
        }), p = (p.kdf = {}).OpenSSL = {
            execute: function (a, b, c, d) {
                d || (d = s.random(8));
                a = w.create({
                    keySize: b + c
                }).compute(a, d);
                c = s.create(a.words.slice(b), 4 * c);
                a.sigBytes = 4 * b;
                return n.create({
                    key: a,
                    iv: c,
                    salt: d
                });
            }
        }, c = d.PasswordBasedCipher = a.extend({
            cfg: a.cfg.extend({
                kdf: p
            }),
            encrypt: function (b, c, d, l) {
                l = this.cfg.extend(l);
                d = l.kdf.execute(d, b.keySize, b.ivSize);
                l.iv = d.iv;
                b = a.encrypt.call(this, b, c, d.key, l);
                b.mixIn(d);
                return b;
            },
            decrypt: function (b, c, d, l) {
                l = this.cfg.extend(l);
                c = this._parse(c, l.format);
                d = l.kdf.execute(d, b.keySize, b.ivSize, c.salt);
                l.iv = d.iv;
                return a.decrypt.call(this, b, c, d.key, l);
            }
        });
    }();
    (function () {
        for (var u = CryptoJS, p = u.lib.BlockCipher, d = u.algo, l = [], s = [], t = [], r = [], w = [], v = [], b = [], x = [], q = [], n = [], a = [], c = 0; 256 > c; c++)
            a[c] = 128 > c ? c << 1 : c << 1 ^ 283;
        for (var e = 0, j = 0, c = 0; 256 > c; c++) {
            var k = j ^ j << 1 ^ j << 2 ^ j << 3 ^ j << 4, k = k >>> 8 ^ k & 255 ^ 99;
            l[e] = k;
            s[k] = e;
            var z = a[e], F = a[z], G = a[F], y = 257 * a[k] ^ 16843008 * k;
            t[e] = y << 24 | y >>> 8;
            r[e] = y << 16 | y >>> 16;
            w[e] = y << 8 | y >>> 24;
            v[e] = y;
            y = 16843009 * G ^ 65537 * F ^ 257 * z ^ 16843008 * e;
            b[k] = y << 24 | y >>> 8;
            x[k] = y << 16 | y >>> 16;
            q[k] = y << 8 | y >>> 24;
            n[k] = y;
            e ? (e = z ^ a[a[a[G ^ z]]], j ^= a[a[j]]) : e = j = 1;
        }
        var H = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54], d = d.AES = p.extend({
            _doReset: function () {
                for (var a = this._key, c = a.words, d = a.sigBytes / 4, a = 4 * ((this._nRounds = d + 6) + 1), e = this._keySchedule = [], j = 0; j < a; j++)
                    if (j < d)
                        e[j] = c[j];
                    else {
                        var k = e[j - 1];
                        j % d ? 6 < d && 4 == j % d && (k = l[k >>> 24] << 24 | l[k >>> 16 & 255] << 16 | l[k >>> 8 & 255] << 8 | l[k & 255]) : (k = k << 8 | k >>> 24, k = l[k >>> 24] << 24 | l[k >>> 16 & 255] << 16 | l[k >>> 8 & 255] << 8 | l[k & 255], k ^= H[j / d | 0] << 24);
                        e[j] = e[j - d] ^ k;
                    }
                c = this._invKeySchedule = [];
                for (d = 0; d < a; d++)
                    j = a - d, k = d % 4 ? e[j] : e[j - 4], c[d] = 4 > d || 4 >= j ? k : b[l[k >>> 24]] ^ x[l[k >>> 16 & 255]] ^ q[l[k >>> 8 & 255]] ^ n[l[k & 255]];
            },
            encryptBlock: function (a, b) {
                this._doCryptBlock(a, b, this._keySchedule, t, r, w, v, l);
            },
            decryptBlock: function (a, c) {
                var d = a[c + 1];
                a[c + 1] = a[c + 3];
                a[c + 3] = d;
                this._doCryptBlock(a, c, this._invKeySchedule, b, x, q, n, s);
                d = a[c + 1];
                a[c + 1] = a[c + 3];
                a[c + 3] = d;
            },
            _doCryptBlock: function (a, b, c, d, e, j, l, f) {
                for (var m = this._nRounds, g = a[b] ^ c[0], h = a[b + 1] ^ c[1], k = a[b + 2] ^ c[2], n = a[b + 3] ^ c[3], p = 4, r = 1; r < m; r++)
                    var q = d[g >>> 24] ^ e[h >>> 16 & 255] ^ j[k >>> 8 & 255] ^ l[n & 255] ^ c[p++], s = d[h >>> 24] ^ e[k >>> 16 & 255] ^ j[n >>> 8 & 255] ^ l[g & 255] ^ c[p++], t = d[k >>> 24] ^ e[n >>> 16 & 255] ^ j[g >>> 8 & 255] ^ l[h & 255] ^ c[p++], n = d[n >>> 24] ^ e[g >>> 16 & 255] ^ j[h >>> 8 & 255] ^ l[k & 255] ^ c[p++], g = q, h = s, k = t;
                q = (f[g >>> 24] << 24 | f[h >>> 16 & 255] << 16 | f[k >>> 8 & 255] << 8 | f[n & 255]) ^ c[p++];
                s = (f[h >>> 24] << 24 | f[k >>> 16 & 255] << 16 | f[n >>> 8 & 255] << 8 | f[g & 255]) ^ c[p++];
                t = (f[k >>> 24] << 24 | f[n >>> 16 & 255] << 16 | f[g >>> 8 & 255] << 8 | f[h & 255]) ^ c[p++];
                n = (f[n >>> 24] << 24 | f[g >>> 16 & 255] << 16 | f[h >>> 8 & 255] << 8 | f[k & 255]) ^ c[p++];
                a[b] = q;
                a[b + 1] = s;
                a[b + 2] = t;
                a[b + 3] = n;
            },
            keySize: 8
        });
        u.AES = p._createHelper(d);
    })();
    CryptoJS.pad.ZeroPadding = {
        pad: function (a, c) {
            var b = 4 * c;
            a.clamp();
            a.sigBytes += b - (a.sigBytes % b || b);
        },
        unpad: function (a) {
            for (var c = a.words, b = a.sigBytes - 1; !(c[b >>> 2] >>> 24 - 8 * (b % 4) & 255);)
                b--;
            a.sigBytes = b + 1;
        }
    };
    CryptoJS.mode.ECB = function () {
        var ECB = CryptoJS.lib.BlockCipherMode.extend();
        ECB.Encryptor = ECB.extend({
            processBlock: function (words, offset) {
                this._cipher.encryptBlock(words, offset);
            }
        });
        ECB.Decryptor = ECB.extend({
            processBlock: function (words, offset) {
                this._cipher.decryptBlock(words, offset);
            }
        });
        return ECB;
    }();
    function cryptoJS() {
        return CryptoJS;
    }
    var CryptoJS$1 = {
        cryptoJS
    };

    const secretKey = "youzhixx12345678";
    let utils = null;
    const UTILSVERSION = "1.3.0";
    class YzUtils extends Laya.Script {
        constructor() {
            super(...arguments);
            this.utilsVersion = UTILSVERSION;
            this.isShowViewLog = true;
            this.DebugLoacalConfig = true;
            this.config = null;
            this.adManager = null;
            this.yzRedBagInfo = null;
            this.oppoVersions = null;
            this._wechatTool = null;
            this._tool_XiaoMi = null;
            this._oppoTool = null;
            this._tool_Baidu = null;
            this._tool_Native = null;
            this._tool_Vivo = null;
            this._tool_Douyin = null;
            this._tool_QQ = null;
            this._tool_QTT = null;
            this._tool_4399 = null;
            this._tool_UC = null;
            this._tool_Broswer = null;
            this._isConfigInit = false;
            this._isServerInit = false;
            this.currentLevel = 0;
            this.isRecording = false;
            this.rewardCallFunc = null;
            this.rewardCloseFunc = null;
            this.rewardValue = 0;
            this.luckBoxShowCount = -1;
            this.turnTablePanelCloseFunc = null;
            this.shareRecordPanelCloseFunc = null;
            this.rewardBoxPanelCloseFunc = null;
            this.rewardShortCutPanelCloseFunc = null;
            this.rewardRecGamePanelCloseFunc = null;
            this.rewardLuckBoxPanelCloseFunc = null;
            this._gameEntryTime = 0;
            this._recommendGamesBanner = null;
            this._recommendGamesList = null;
            this._tryGamesWidget = null;
            this._moreGamesSidePanel = null;
            this.isMoreGamesShowBanner = true;
            this._moreGamesSidePanelBaidu = null;
            this._recordWidget = null;
            this._shortcutWidget = null;
            this._gameBox = null;
            this._nativeTryGamesNode = null;
            this.tryGameDate = [];
            this.nativeNeedChange = true;
            this.recored_share_count = 0;
            this.shareRecordPanel = null;
            this.isShowShareRecordPanel = false;
            this._withdrawalWidget = null;
            this._redBagProgressWidget = null;
            this._withdrawalPanel = null;
            this._openRedBagPanel = null;
            this._rewardRedBagPanel = null;
            this._rewardRedBagPanelShowCount = 0;
            this._privacyWidget = null;
            this.minScale = 1;
            this.maxScale = 1.3;
            this.runTime = 300;
            this.scaleTween = null;
            this._lastReportAdTime = 0;
        }
        get wechatTool() {
            if (!this._wechatTool) {
                utils.showLog("wechat tool is null");
            }
            return this._wechatTool;
        }
        get Tool_XiaoMi() {
            if (!this._tool_XiaoMi) {
                utils.showLog("tool xiaomi is null");
            }
            return this._tool_XiaoMi;
        }
        get oppoTool() {
            if (!this._oppoTool) {
                utils.showLog("oppo tool is null");
            }
            return this._oppoTool;
        }
        get Tool_Baidu() {
            if (!this._tool_Baidu) {
                utils.showLog("tool baidu is null");
            }
            return this._tool_Baidu;
        }
        get Tool_Native() {
            if (!this._tool_Native) {
                utils.showLog("tool native is null");
            }
            return this._tool_Native;
        }
        get Tool_Vivo() {
            if (!this._tool_Vivo) {
                utils.showLog("tool vivo is null");
            }
            return this._tool_Vivo;
        }
        get Tool_Douyin() {
            if (!this._tool_Douyin) {
                utils.showLog("tool douyin is null");
            }
            return this._tool_Douyin;
        }
        get Tool_QQ() {
            if (!this._tool_QQ) {
                utils.showLog("tool qq is null");
            }
            return this._tool_QQ;
        }
        get Tool_QTT() {
            if (!this._tool_QTT) {
                utils.showLog("tool qtt is null");
            }
            return this._tool_QTT;
        }
        get Tool_4399() {
            if (!this._tool_4399) {
                utils.showLog("tool 4399 is null");
            }
            return this._tool_4399;
        }
        get Tool_UC() {
            if (!this._tool_UC) {
                utils.showLog("tool uc is null");
            }
            return this._tool_UC;
        }
        get Tool_Broswer() {
            if (!this._tool_Broswer) {
                utils.showLog("tool qtt is null");
            }
            return this._tool_Broswer;
        }
        getServelCofig() {
            if (PlatUtils.IsVIVO) {
                return this._tool_Vivo.ServerConfig;
            }
            else if (PlatUtils.IsOPPO) {
                return this._oppoTool.ServerConfig;
            }
            else if (PlatUtils.IsWechat) {
                return this.wechatTool.ServerConfig;
            }
            else if (PlatUtils.IsQQ) {
                return this._tool_QQ.ServerConfig;
            }
            else if (PlatUtils.IsBaidu) {
                return this._tool_Baidu.ServerConfig;
            }
            else if (PlatUtils.IsDouyin) {
                return this._tool_Douyin.ServerConfig;
            }
            else if (PlatUtils.IsQTT) {
                return this._tool_QTT.ServerConfig;
            }
            else if (PlatUtils.IsNativeAndroid) {
                return this._tool_Native.ServerConfig;
            }
            else if (PlatUtils.IsXiaoMi) {
                return this._tool_XiaoMi.ServerConfig;
            }
            else if (this.Tool_Broswer) {
                return this.Tool_Broswer.ServerConfig;
            }
            return null;
        }
        _initConfig() {
            if (this._isConfigInit) {
                utils.showLog("配置数据已经初始化，请勿重复初始化!");
                return;
            }
            if (this.config.otherconfig.localConfig) {
                let data = JSON.parse(this.config.otherconfig.localConfig);
                data = JSON.stringify(data);
                utils.showLog("本地数据：" + data);
                if (data) {
                    if (PlatUtils.IsNativeAndroid) {
                        this.initTools(data);
                        this._isConfigInit = this._initLoacalConfig(data);
                        if (this._isConfigInit) {
                            utils.Tool_Native.init();
                        }
                    }
                    else {
                        this._isConfigInit = this._initLoacalConfig(data);
                        this.initTools(data);
                    }
                    this.adManager = new AdManager();
                    this.adManager.Init();
                    if (this._oppoTool) {
                        this._oppoTool.hideDefaultLoadingPage();
                    }
                    utils.yzRedBagInfo = new YzRedBagInfo();
                    utils.registerServerInitEvent(() => {
                        if (utils.ServerConfig) {
                            if (utils.ServerConfig.red_bag_total_progress) {
                                utils.yzRedBagInfo.totalProgress = utils.ServerConfig.red_bag_total_progress;
                            }
                            if (utils.ServerConfig.red_bag_progress_infos) {
                                utils.yzRedBagInfo.progressInfos = utils.ServerConfig.red_bag_progress_infos;
                            }
                            if (utils.ServerConfig.red_bag_moneys) {
                                utils.yzRedBagInfo.withdrawaMoneys = utils.ServerConfig.red_bag_moneys;
                            }
                            if (utils.ServerConfig.is_show_log_view && utils.ServerConfig.is_show_log_view == "true") {
                                utils.isShowViewLog = true;
                            }
                        }
                    }, this);
                }
                else {
                    utils.showLog("本地配置文件不是合法的json文件！");
                }
            }
            else {
                utils.showLog("本地配置文件未找到，请检查 CommonUtils 组件上是否存在！");
            }
        }
        _initLoacalConfig(data) {
            if (this.config) {
                return this.config.init(data);
            }
            else {
                return false;
            }
        }
        onEnable() {
        }
        showViewLog() {
        }
        onUpdate() {
            var dt = Laya.timer.delta / 1000;
            if (this._isConfigInit) {
                if (this.adManager) {
                    this.adManager.OnUpdate(dt);
                }
            }
        }
        initTools(data) {
            if (!this._isConfigInit && !PlatUtils.IsNativeAndroid) {
                utils.showLog("本地数据未初始化!");
                return;
            }
            if (PlatUtils.IsNativeAndroid) {
                utils.showLog("YzUtils在原生平台");
                this._tool_Native = new YZ_Tool_Native();
            }
            else if (PlatUtils.IsWechat) {
                utils.showLog("YzUtils在微信平台");
                this._wechatTool = new WechatTool();
                this._wechatTool.init(data);
            }
            else if (PlatUtils.IsOPPO) {
                this._oppoTool = new OppoTool();
                this._oppoTool.init(data);
            }
            else if (PlatUtils.IsBaidu) {
                this._tool_Baidu = new YZ_Tool_Baidu();
                this._tool_Baidu.init(data);
            }
            else if (PlatUtils.IsVIVO) {
                this._tool_Vivo = new YZ_Tool_Vivo();
                this._tool_Vivo.init(data);
            }
            else if (PlatUtils.IsDouyin) {
                this._tool_Douyin = new YZ_Tool_Douyin();
                this._tool_Douyin.init(data);
            }
            else if (PlatUtils.IsQQ) {
                utils.showLog("YzUtils在qq平台");
                this._tool_QQ = new YZ_Tool_QQ();
                this._tool_QQ.init(data);
            }
            else if (PlatUtils.IsQTT) {
                this._tool_QTT = new YZ_Tool_QTT();
                this._tool_QTT.init(data);
            }
            else if (PlatUtils.Is4399) {
                this._tool_4399 = new YZ_Tool_4399();
                this._tool_4399.init(data);
            }
            else if (PlatUtils.IsUc) {
                this._tool_UC = new YZ_Tool_UC();
                this._tool_UC.init(data);
            }
            else if (PlatUtils.IsXiaoMi) {
                this._tool_XiaoMi = new YZ_Tool_Xiaomi();
                this._tool_XiaoMi.init(data);
            }
            else {
                this._tool_Broswer = new YZ_Tool_Broswer();
                this._tool_Broswer.init(data);
            }
        }
        delayCall(callback, delay) {
            Laya.timer.once(delay * 1000, null, callback);
        }
        share(callback = null) {
            if (!this._isConfigInit) {
                utils.showLog("本地数据未初始化!");
                return;
            }
            this.cur_tool && this.cur_tool.share && this.cur_tool.share(callback);
        }
        gameExit() {
            if (!this._isConfigInit) {
                utils.showLog("本地数据未初始化!");
                return;
            }
        }
        gameExitOff() {
            if (!this._isConfigInit) {
                utils.showLog("本地数据未初始化!");
                return;
            }
        }
        recordStart() {
            if (!this._isConfigInit) {
                utils.showLog("本地数据未初始化!");
                return;
            }
            if (PlatUtils.IsDouyin) {
                if (this.cur_tool != null) {
                    this.cur_tool.recordStart();
                }
            }
        }
        recordEnd() {
            if (!this._isConfigInit) {
                utils.showLog("本地数据未初始化!");
                return;
            }
            if (PlatUtils.IsDouyin) {
                if (this.cur_tool != null) {
                    this.cur_tool.recordEnd();
                }
            }
        }
        getShareInfo() {
            if (!this._isConfigInit) {
                utils.showLog("本地数据未初始化!");
                return null;
            }
            if (this.config.otherconfig.shareTitle && this.config.otherconfig.shareImgUrl) {
                return {
                    title: this.config.otherconfig.shareTitle,
                    imageUrl: this.config.otherconfig.shareImgUrl
                };
            }
            else {
                utils.showLog("分享配置出错！");
                return null;
            }
        }
        getInnerRecommendData() {
            if (!this._isConfigInit) {
                utils.showLog("本地数据未初始化!");
                return null;
            }
            if (this.ServerConfig && this.ServerConfig.jump_list && this.ServerConfig.jump_list.length > 0) {
                return {
                    "jump_refresh_time": this.ServerConfig.icon_jump,
                    "jump_list": this.ServerConfig.jump_list
                };
            }
            return null;
        }
        navigateToMiniGame(data, callback = null) {
            if (!this._isConfigInit) {
                utils.showLog("本地数据未初始化!");
                return;
            }
            if (PlatUtils.IsWechat) {
                if (data) {
                    if (data.is_jump && data.is_jump == "true" && data.appid) {
                        this.wechatTool.navigateToMiniProgram(data.appid, callback, data.path);
                        return;
                    }
                    if (data.is_jump && data.is_jump == "false" && data.qr_code) {
                        this.wechatTool.previewImage(data.qr_code);
                        if (callback) {
                            callback(true);
                        }
                        return;
                    }
                }
            }
            else if (PlatUtils.IsOPPO) {
                if (data && data.appid) {
                    this.oppoTool.navigateToMiniGame(data.appid, callback);
                }
                else {
                    utils.showLog("data 或者 appid 为null!");
                    if (callback) {
                        callback(false);
                    }
                }
            }
            else if (PlatUtils.IsBaidu) {
                if (data && data.appid) {
                    utils.Tool_Baidu.navigateToMiniGame(data.appid, callback);
                }
                else {
                    utils.showLog("data 或者 appid 为null!");
                    if (callback) {
                        callback(false);
                    }
                }
            }
        }
        isSupportnavigateToMiniGame() {
            if (!this._isConfigInit) {
                utils.showLog("本地数据未初始化!");
                return false;
            }
            if (PlatUtils.IsWechat || PlatUtils.IsBaidu) {
                return true;
            }
            else if (PlatUtils.IsOPPO) {
                return this.oppoTool.isOverMiniVersion("1044");
            }
            else if (PlatUtils.IsDouyin) {
                return this.Tool_Douyin.isOverMiniVersion("1.23.0") && this.Tool_Douyin._sysInfo.appName != "live_stream";
            }
            else if (PlatUtils.IsQQ) {
                return this._tool_QQ.isOverMinVersion("1.7.1");
            }
            return false;
        }
        showMsg(msg) {
            if (utils.Tool_Broswer) {
                console.log(msg);
            }
            this.cur_tool && this.cur_tool.showToast && this.cur_tool.showToast(msg);
        }
        hasShortcutInstalled() {
            if (!this._isConfigInit) {
                utils.showLog("本地数据未初始化!");
                return true;
            }
            if (PlatUtils.IsVIVO && this.Tool_Vivo) {
                return this.Tool_Vivo.ShortcutCreated;
            }
            else if (PlatUtils.IsOPPO && this.oppoTool) {
                return this.oppoTool.ShortcutCreated;
            }
            return false;
        }
        createShortcut(callback) {
            if (!this._isConfigInit) {
                utils.showLog("本地数据未初始化!");
                return;
            }
            if (PlatUtils.IsVIVO && this.Tool_Vivo) {
                this.Tool_Vivo.createShortcut(callback);
            }
            else if (PlatUtils.IsOPPO && this.oppoTool) {
                this.oppoTool.createShortcut(callback);
            }
        }
        canCreateShortcut() {
            if (!this._isConfigInit) {
                utils.showLog("本地数据未初始化!");
                return false;
            }
            if (PlatUtils.IsVIVO && this.Tool_Vivo) {
                return this.Tool_Vivo.canCreateShortcut();
            }
            else if (PlatUtils.IsOPPO && this.oppoTool) {
                return this.oppoTool.canCreateShortcut();
            }
            return false;
        }
        commomHttpRequest(url, callback) {
            if (!this._isConfigInit) {
                utils.showLog("本地数据未初始化!");
                return;
            }
            let self = this;
            let completeCallback = callback;
            let xhr = new XMLHttpRequest();
            xhr.timeout = 6000;
            let requestUrl = this._buildServerUrl(url) + `&time_stamp=${(new Date()).getTime()}&reqv=${YZ_Constant.SERVER_VERSION}`;
            utils.showLog("服务器地址:", requestUrl);
            xhr.open('GET', requestUrl);
            xhr.send();
            xhr.onreadystatechange = function () {
                utils.showLog("请求状态改变, reaedyState=", xhr.readyState, "; status=", xhr.status);
                if (xhr.readyState == 4) {
                    if (xhr.status == 200) {
                        if (requestUrl.indexOf("m=g") > -1 || requestUrl.indexOf("m=rlevelv3") > -1) {
                            completeCallback(true, self.aesDecrypt(xhr.responseText));
                        }
                        else {
                            completeCallback(true, xhr.responseText);
                        }
                    }
                }
            };
            xhr.ontimeout = function () {
                utils.showLog("请求超时!");
                if (completeCallback) {
                    completeCallback(false, "");
                }
            };
            xhr.onerror = function (err) {
                utils.showLog("请求出错! err=", err);
                if (completeCallback) {
                    completeCallback(false, "");
                }
            };
        }
        aesEncrypt(content) {
            let key = CryptoJS$1.cryptoJS().enc.Utf8.parse(secretKey);
            let srcs = CryptoJS$1.cryptoJS().enc.Utf8.parse(content);
            let encrypted = CryptoJS$1.cryptoJS().AES.encrypt(srcs, key, { mode: CryptoJS$1.cryptoJS().mode.ECB, padding: CryptoJS$1.cryptoJS().pad.Pkcs7 });
            return encrypted.toString();
        }
        aesDecrypt(encryptStr) {
            let key = CryptoJS$1.cryptoJS().enc.Utf8.parse(secretKey);
            let decrypt = CryptoJS$1.cryptoJS().AES.decrypt(encryptStr, key, { mode: CryptoJS$1.cryptoJS().mode.ECB, padding: CryptoJS$1.cryptoJS().pad.Pkcs7 });
            return CryptoJS$1.cryptoJS().enc.Utf8.stringify(decrypt).toString();
        }
        _buildServerUrl(url) {
            if (PlatUtils.IsOPPO) {
                url = url + `&kyx=true&app_id=${utils.config.oppoconfig.packageName}&channel=oppo&device_uid=${utils.oppoTool.uid}&uid=${utils.oppoTool.serviceId}&source=${this.oppoTool._source}&game_version=${utils.config.oppoconfig.version}`;
            }
            else if (PlatUtils.IsXiaoMi) {
                url = url + `&kyx=true&app_id=${utils.config.xiaomiConfig.appID}&channel=xiaomi&device_uid=${utils._tool_XiaoMi.uid}&uid=${utils._tool_XiaoMi.serviceId}`;
            }
            else if (PlatUtils.IsWechat) {
                url = url + `&kyx=true&app_id=${utils.config.wechatconfig.appID}&channel=wechat&device_uid=${utils.wechatTool.uid}&uid=${utils.wechatTool.serviceId}&source=${this.wechatTool._source}`;
            }
            else if (PlatUtils.IsVIVO) {
                url = url + `&kyx=true&app_id=${utils.config.vivoconfig.appID}&channel=vivo&device_uid=${utils._tool_Vivo.uid}&uid=${utils._tool_Vivo.serviceId}&source=${this._tool_Vivo._source}`;
            }
            else if (PlatUtils.IsQTT) {
                url = url + `&kyx=true&app_id=${utils.config.qttconfig.appID}&channel=qutoutiao&device_uid=${utils._tool_QTT.uid}&uid=${utils._tool_QTT.serviceId}`;
            }
            else if (PlatUtils.IsDouyin) {
                url = url + `&kyx=true&app_id=${utils.config.douyinconfig.appID}&channel=toutiao&device_uid=${utils.Tool_Douyin.uid}&uid=${utils.Tool_Douyin.serviceId}&game_version=${utils.config.douyinconfig.version}`;
            }
            else if (PlatUtils.IsQQ) {
                url = url + `&kyx=true&app_id=${utils.config.qqconfig.appID}&channel=qq&device_uid=${utils._tool_QQ.uid}&uid=${utils._tool_QQ.serviceId}&game_version=${utils.config.qqconfig.version}`;
            }
            else if (PlatUtils.IsUc) {
                url = url + `&kyx=true&app_id=${utils.config.ucConfig.appID}&channel=uc&device_uid=${utils._tool_UC.uid}&uid=${utils._tool_UC.serviceId}&game_version=${utils.config.ucConfig.version}`;
            }
            else if (PlatUtils.IsBaidu) {
                url = url + `&kyx=true&app_id=${utils.config.baiduconfig.appID}&channel=baidu&device_uid=${utils._tool_Baidu.uid}&uid=${utils._tool_Baidu.serviceId}&game_version=${utils.config.baiduconfig.version}`;
            }
            else if (PlatUtils.IsNativeAndroid) {
                url = url + `&kyx=false&app_id=${utils.config.nativeAndroidConfig.appID}&channel=${utils.config.nativeAndroidConfig.channel}&device_uid=${utils.Tool_Native.uid}&uid=${utils.Tool_Native.serviceId}&game_type=2&game_version=${utils.config.nativeAndroidConfig.version}`;
            }
            return url;
        }
        postData(otherGameAppId) {
            if (!this._isConfigInit) {
                utils.showLog("本地数据未初始化!");
                return;
            }
            this.cur_tool && this.cur_tool.postData && this.cur_tool.postData(otherGameAppId);
        }
        registerServerInitEvent(callback, target) {
            if (!this._isConfigInit) {
                utils.showLog("本地数据未初始化!");
                return;
            }
            if (this._isServerInit) {
                if (callback) {
                    callback();
                }
            }
            else {
                Laya.stage.on(YZ_Constant.EC_ServerInit, target, callback);
            }
        }
        postDataByLocation(otherGameAppId, location, status = 0) {
            if (!this._isConfigInit) {
                utils.showLog("本地数据未初始化!");
                return;
            }
            if (PlatUtils.IsBaidu && this.Tool_Baidu) {
                this.Tool_Baidu.postData(otherGameAppId);
            }
            else {
                this.cur_tool && this.cur_tool.postDataByLocation && this.cur_tool.postDataByLocation(otherGameAppId, location, status);
            }
        }
        postRecommentShowData(location) {
            if (!this._isConfigInit) {
                utils.showLog("本地数据未初始化!");
                return;
            }
            this.cur_tool && this.cur_tool.postRecommentShowData && this.cur_tool.postRecommentShowData(location);
        }
        unregisterServerInitEvent(target) {
        }
        emitServerInitEvent() {
            this._isServerInit = true;
            Laya.stage.event(YZ_Constant.EC_ServerInit);
        }
        getRecommondGameList() {
            if (!this._isConfigInit) {
                utils.showLog("本地数据未初始化!");
                return null;
            }
            if (PlatUtils.IsWechat) {
                return this.wechatTool.getRecommondGameList();
            }
            else if (PlatUtils.IsOPPO) {
                return this.oppoTool.getRecommondGameList();
            }
            else if (PlatUtils.IsBaidu) {
                return this.Tool_Baidu.getRecommondGameList();
            }
            else if (PlatUtils.IsDouyin) {
                return this.Tool_Douyin.getRecommondGameList();
            }
            else if (this.Tool_Broswer) {
                return this.Tool_Broswer.getRecommondGameList();
            }
            else if (PlatUtils.IsNativeAndroid) {
                return this.Tool_Native.getRecommondGameList();
            }
            else if (PlatUtils.IsQQ) {
                return this.Tool_QQ.getRecommondGameList();
            }
            return null;
        }
        isShowRecommondGamesBanner() {
            if (!this._isConfigInit) {
                utils.showLog("本地数据未初始化!");
                return false;
            }
            if (this.Tool_Broswer)
                return true;
            if (utils.isSupportnavigateToMiniGame()) {
                if (this.getServelCofig()
                    && this.getServelCofig().is_bottom_banner_list) {
                    if (this.getServelCofig().is_bottom_banner_list == "true") {
                        return true;
                    }
                    else {
                        utils.showLog("is_bottom_banner_list 参数为false，底部更多游戏横幅组件不显示！");
                    }
                }
                else {
                    utils.showLog("配置中没有 is_bottom_banner_list 参数，底部更多游戏横幅组件不显示！");
                }
            }
            else {
                utils.showLog("当前平台不支持游戏内跳转，底部更多游戏横幅组件不显示！");
            }
            return false;
        }
        showRecommendGamesBanner(params = null) {
            if (!this._isConfigInit) {
                utils.showLog("组件配置未初始化!");
                return false;
            }
            if (this.isShowRecommondGamesBanner()) {
                if (this.config.otherconfig.recommendGamesBanner) {
                    let bannerNode = cc.instantiate(this.config.otherconfig.recommendGamesBanner);
                    if (bannerNode) {
                        if (this._recommendGamesBanner && cc.isValid(this._recommendGamesBanner)) {
                            this._recommendGamesBanner.destroy();
                        }
                        this._recommendGamesBanner = bannerNode;
                        cc.addToStage(this._recommendGamesBanner, 999);
                        return true;
                    }
                }
                else {
                    utils.showLog("未找到预制体 RecommendGamesBanner, 请查看CommonUtils组件上是否赋值!");
                }
            }
            return false;
        }
        hideRecommendGamesBanner() {
            if (this._recommendGamesBanner && cc.isValid(this._recommendGamesBanner)) {
                this._recommendGamesBanner.destroy();
            }
        }
        isShowRecommondGamesList() {
            if (!this._isConfigInit) {
                utils.showLog("组件配置未初始化!");
                return false;
            }
            if (this.Tool_Broswer)
                return true;
            if (utils.isSupportnavigateToMiniGame()) {
                if (this.getServelCofig().is_banner_list
                    && this.getServelCofig().is_banner_list == "true"
                    && this.getServelCofig().jump_list
                    && this.getServelCofig().jump_list.length > 6) {
                    return true;
                }
                else {
                    utils.showLog("请确认字段：is_banner_list、jump_list 是否达到显示自定义banner的要求!");
                    return false;
                }
            }
            else {
                utils.showLog("当前平台不支持游戏内跳转，更多游戏列表组件不显示！");
            }
            return false;
        }
        showRecommendGamesList(params = null) {
            if (!this._isConfigInit) {
                utils.showLog("组件配置未初始化!");
                return null;
            }
            if (this.isShowRecommondGamesList()) {
                if (this.config.otherconfig.recommendGamesBar) {
                    if (this._recommendGamesList != null && this._recommendGamesList != undefined) {
                        this._recommendGamesList.visible = true;
                    }
                    else {
                        let barNode = cc.instantiate(this.config.otherconfig.recommendGamesBar);
                        this._recommendGamesList = barNode;
                        this._recommendGamesList.visible = true;
                        cc.addToStage(this._recommendGamesList, 999);
                    }
                    this.reSizeObject(this._recommendGamesList, params);
                    return this._recommendGamesList;
                }
                else {
                    utils.showLog("未找到预制体 RecommendGamesBar, 请查看CommonUtils组件上是否赋值 !");
                }
            }
            return null;
        }
        hideRecommendGamesList() {
            if (this._recommendGamesList && cc.isValid(this._recommendGamesList)) {
                this._recommendGamesList.visible = false;
            }
        }
        isShowTryGamesWidget() {
            if (!this._isConfigInit) {
                utils.showLog("组件配置未初始化!");
                return false;
            }
            if (this.Tool_Broswer)
                return true;
            if (PlatUtils.IsWechat) {
                if (utils.isSupportnavigateToMiniGame()) {
                    if (utils.wechatTool
                        && utils.wechatTool.ServerConfig
                        && utils.wechatTool.ServerConfig.icon_jump) {
                        if (utils.wechatTool.ServerConfig.icon_jump > 0) {
                            return true;
                        }
                        else {
                            utils.showLog("icon_jump参数为false，更多游戏挂件不显示！");
                        }
                    }
                    else {
                        utils.showLog("配置中没有icon_jump参数，更多游戏挂件不显示！");
                    }
                }
                else {
                    utils.showLog("当前平台不支持游戏内跳转，更多游戏挂件不显示！");
                }
            }
            else if (PlatUtils.IsOPPO) {
                if (utils.isSupportnavigateToMiniGame()) {
                    if (utils.oppoTool
                        && utils.oppoTool.ServerConfig
                        && utils.oppoTool.ServerConfig.icon_jump) {
                        if (parseInt(utils.oppoTool.ServerConfig.icon_jump) > 0) {
                            return true;
                        }
                        else {
                            utils.showLog("icon_jump参数为false，更多游戏挂件不显示！");
                        }
                    }
                    else {
                        utils.showLog("配置中没有icon_jump参数，更多游戏挂件不显示！");
                    }
                }
                else {
                    utils.showLog("当前平台不支持游戏内跳转，更多游戏挂件不显示！");
                }
            }
            else if (PlatUtils.IsBaidu) {
                if (utils.isSupportnavigateToMiniGame()) {
                    if (utils.Tool_Baidu
                        && utils.Tool_Baidu.ServerConfig
                        && utils.Tool_Baidu.ServerConfig.icon_jump) {
                        if (utils.Tool_Baidu.ServerConfig.icon_jump > 0) {
                            return true;
                        }
                        else {
                            utils.showLog("icon_jump参数为false，更多游戏挂件不显示！");
                        }
                    }
                    else {
                        utils.showLog("配置中没有icon_jump参数，更多游戏挂件不显示！");
                    }
                }
                else {
                    utils.showLog("当前平台不支持游戏内跳转，更多游戏挂件不显示！");
                }
            }
            if (PlatUtils.IsDouyin) {
                if (utils.isSupportnavigateToMiniGame()) {
                    if (utils.Tool_Douyin && utils.Tool_Douyin.isShowMoreGamesModal()
                        && utils.Tool_Douyin.ServerConfig
                        && utils.Tool_Douyin.ServerConfig.icon_jump) {
                        if (utils.Tool_Douyin.ServerConfig.icon_jump > 0) {
                            return true;
                        }
                        else {
                            utils.showLog("warn:" + "icon_jump参数为false，试玩游戏挂件不显示！");
                        }
                    }
                    else {
                        utils.showLog("warn:" + "配置中没有icon_jump参数，试玩游戏挂件不显示！");
                    }
                }
                else {
                    utils.showLog("warn:" + "当前平台不支持游戏内跳转，试玩游戏挂件不显示！");
                }
            }
            else if (PlatUtils.IsQQ) {
                if (utils.isSupportnavigateToMiniGame()) {
                    if (utils.Tool_QQ
                        && utils.Tool_QQ.ServerConfig
                        && utils.Tool_QQ.ServerConfig.is_more_game) {
                        if (utils.Tool_QQ.ServerConfig.is_more_game == "true") {
                            return true;
                        }
                        else {
                            utils.showLog("is_more_game参数为false，更多游戏侧边栏组件不显示！");
                        }
                    }
                    else {
                        utils.showLog("配置中没有is_more_game参数，更多游戏侧边栏组件不显示！");
                    }
                }
                else {
                    utils.showLog("当前平台不支持游戏内跳转，更多游戏侧边栏组件不显示！");
                }
            }
            return false;
        }
        showTryGamesWidget(params = null) {
            if (!this._isConfigInit) {
                utils.showLog("组件配置未初始化!");
                return null;
            }
            utils.showLog("准备加载试玩挂件...." + params.location);
            if (this.isShowTryGamesWidget()) {
                if (!this.Tool_Broswer) {
                    if (params.location && (!utils.getServelCofig().try_game_widget_locations || utils.getServelCofig().try_game_widget_locations.indexOf(params.location) < 0)) {
                        utils.showLog("当前位置服务器未配置显示试玩挂件！");
                        utils.showLog("try_game_widget_locations....." + utils.getServelCofig().try_game_widget_locations);
                        if (this._tryGamesWidget && cc.isValid(this._tryGamesWidget)) {
                            this._tryGamesWidget.destroy();
                        }
                        return null;
                    }
                }
                if (this.config.otherconfig.tryGamesWidget) {
                    let node = cc.instantiate(this.config.otherconfig.tryGamesWidget);
                    if (node) {
                        if (this._tryGamesWidget && cc.isValid(this._tryGamesWidget)) {
                            this._tryGamesWidget.destroy();
                        }
                        this._tryGamesWidget = node;
                        this._tryGamesWidget.zOrder = 9999;
                        cc.addToStage(this._tryGamesWidget, 998);
                        if (this._tryGamesWidget.width == 0) {
                            this._tryGamesWidget.visible = false;
                            Laya.timer.frameOnce(10, this, () => {
                                this.reSizeObject(this._tryGamesWidget, params);
                            }, null, false);
                        }
                        else {
                            this.reSizeObject(this._tryGamesWidget, params);
                        }
                        return node;
                    }
                }
                else {
                    utils.showLog("未找到预制体 TryGamesWidget, 请查看CommonUtils组件上是否赋值 !");
                }
            }
            else {
                utils.showLog("warn:" + "不支持跳转组件");
            }
            return null;
        }
        hideTryGamesWidget() {
            if (this._tryGamesWidget && cc.isValid(this._tryGamesWidget)) {
                this._tryGamesWidget.destroy();
            }
        }
        isShowMoreGamesSidePanel() {
            if (!this._isConfigInit) {
                utils.showLog("组件配置未初始化!");
                return false;
            }
            if (this.Tool_Broswer)
                return true;
            if (PlatUtils.IsWechat) {
                if (utils.isSupportnavigateToMiniGame()) {
                    if (utils.wechatTool
                        && utils.wechatTool.ServerConfig
                        && utils.wechatTool.ServerConfig.is_more_game) {
                        if (utils.wechatTool.ServerConfig.is_more_game == "true") {
                            return true;
                        }
                        else {
                            utils.showLog("is_more_game参数为false，更多游戏侧边栏组件不显示！");
                        }
                    }
                    else {
                        utils.showLog("配置中没有is_more_game参数，更多游戏侧边栏组件不显示！");
                    }
                }
                else {
                    utils.showLog("当前平台不支持游戏内跳转，更多游戏侧边栏组件不显示！");
                }
            }
            else if (PlatUtils.IsOPPO) {
                if (utils.isSupportnavigateToMiniGame()) {
                    if (utils.oppoTool
                        && utils.oppoTool.ServerConfig
                        && utils.oppoTool.ServerConfig.is_more_game) {
                        if (utils.oppoTool.ServerConfig.is_more_game == "true") {
                            if (utils.oppoTool.ServerConfig.show_oppo_rec) {
                                if (utils.oppoTool.ServerConfig.show_oppo_rec == "true") {
                                    if (!utils.oppoTool.canShowRecommend()) {
                                        utils.showLog("当前平台不支持官方互推，更多游戏按钮不显示！");
                                        return false;
                                    }
                                }
                            }
                            else {
                                utils.showLog("utils.oppoTool.ServerConfig.show_oppo_rec参数没有配置！");
                            }
                            return true;
                        }
                        else {
                            utils.showLog("is_more_game参数为false，更多游戏侧边栏组件不显示！");
                        }
                    }
                    else {
                        utils.showLog("配置中没有is_more_game参数，更多游戏侧边栏组件不显示！");
                    }
                }
                else {
                    utils.showLog("当前平台不支持游戏内跳转，更多游戏侧边栏组件不显示！");
                }
            }
            else if (PlatUtils.IsDouyin) {
                if (PlatUtils.IsAndroid && utils.isSupportnavigateToMiniGame()) {
                    if (utils.Tool_Douyin
                        && utils.Tool_Douyin.ServerConfig
                        && utils.Tool_Douyin.ServerConfig.is_more_game) {
                        if (utils.Tool_Douyin.ServerConfig.is_more_game == "true") {
                            return true;
                        }
                        else {
                            utils.showLog("warn:" + "is_more_game参数为false，更多游戏侧边栏组件不显示！");
                        }
                    }
                    else {
                        utils.showLog("warn:" + "配置中没有is_more_game参数，更多游戏侧边栏组件不显示！");
                    }
                }
                else {
                    utils.showLog("warn:" + "当前平台不支持游戏内跳转，更多游戏侧边栏组件不显示！");
                }
            }
            else if (PlatUtils.IsBaidu) {
                if (utils.isSupportnavigateToMiniGame()) {
                    if (utils.Tool_Baidu
                        && utils.Tool_Baidu.ServerConfig
                        && utils.Tool_Baidu.ServerConfig.is_more_game) {
                        if (utils.Tool_Baidu.ServerConfig.is_more_game == "true") {
                            return true;
                        }
                        else {
                            utils.showLog("is_more_game参数为false，更多游戏侧边栏组件不显示！");
                        }
                    }
                    else {
                        utils.showLog("配置中没有is_more_game参数，更多游戏侧边栏组件不显示！");
                    }
                }
                else {
                    utils.showLog("当前平台不支持游戏内跳转，更多游戏侧边栏组件不显示！");
                }
            }
            else if (PlatUtils.IsQQ) {
                if (utils.isSupportnavigateToMiniGame()) {
                    if (utils.Tool_QQ
                        && utils.Tool_QQ.ServerConfig
                        && utils.Tool_QQ.ServerConfig.is_more_game) {
                        if (utils.Tool_QQ.ServerConfig.is_more_game == "true") {
                            return true;
                        }
                        else {
                            utils.showLog("is_more_game参数为false，更多游戏侧边栏组件不显示！");
                        }
                    }
                    else {
                        utils.showLog("配置中没有is_more_game参数，更多游戏侧边栏组件不显示！");
                    }
                }
                else {
                    utils.showLog("当前平台不支持游戏内跳转，更多游戏侧边栏组件不显示！");
                }
            }
            else if (PlatUtils.Is4399) {
                return true;
            }
            else if (PlatUtils.IsNativeAndroid) {
                if (utils.Tool_Native
                    && utils.Tool_Native.ServerConfig
                    && utils.Tool_Native.ServerConfig.is_more_game) {
                    if (utils.Tool_Native.ServerConfig.is_more_game == "true") {
                        return true;
                    }
                    else {
                        utils.showLog("warn:" + "is_more_game参数为false，更多游戏侧边栏组件不显示！");
                    }
                }
                else {
                    utils.showLog("warn:" + "配置中没有is_more_game参数，更多游戏侧边栏组件不显示！");
                }
            }
            else if (this._tool_Broswer) {
                return true;
            }
            return false;
        }
        showMoreGamesSidePanel(params = null) {
            if (!this._isConfigInit) {
                utils.showLog("组件配置未初始化!");
                return null;
            }
            utils.showLog("显示更多游戏按钮......" + params.location);
            if (!this.Tool_Broswer) {
                if (params.location && (!utils.getServelCofig().more_game_widget_locations || utils.getServelCofig().more_game_widget_locations.indexOf(params.location) < 0)) {
                    utils.showLog("当前位置服务器未配置显示更多游戏挂件！");
                    utils.showLog("more_game_widget_locations......" + utils.getServelCofig().more_game_widget_locations);
                    if (this._moreGamesSidePanel && cc.isValid(this._moreGamesSidePanel)) {
                        this._moreGamesSidePanel.destroy();
                    }
                    return null;
                }
            }
            if (params != null) {
                if (params.isShowBanner != null || params.isShowBanner != undefined) {
                    this.isMoreGamesShowBanner = params.isShowBanner;
                }
            }
            if (PlatUtils.IsDouyin) {
                if (utils.Tool_Douyin) {
                    if (utils.isShowMoreGamesSidePanel()) {
                        if (utils.Tool_Douyin.isShowMoreGamesModal()) {
                            if (this.config.otherconfig.moreGamesWidget) {
                                let node = cc.instantiate(this.config.otherconfig.moreGamesWidget);
                                if (node) {
                                    if (this._moreGamesSidePanel && cc.isValid(this._moreGamesSidePanel)) {
                                        this._moreGamesSidePanel.destroy();
                                    }
                                    this._moreGamesSidePanel = node;
                                    cc.addToStage(this._moreGamesSidePanel, 996);
                                    this.reSizeObject(this._moreGamesSidePanel, params);
                                    return node;
                                }
                            }
                            else {
                                utils.showLog("warn:" + "未找到预制体 MoreGamesWidget, 请查看CommonUtils组件上是否赋值！");
                            }
                        }
                        else {
                            let btn = utils.Tool_Douyin.showMoreGamesButton(params);
                            if (btn) {
                                if (this._moreGamesSidePanel) {
                                    this._moreGamesSidePanel.destroy();
                                }
                                this._moreGamesSidePanel = btn;
                                cc.addToStage(this._moreGamesSidePanel, 996);
                                this.reSizeObject(this._moreGamesSidePanel, params);
                                return this._moreGamesSidePanel;
                            }
                            else {
                                return null;
                            }
                        }
                    }
                    else {
                        utils.showLog("当前平台版本不支持交叉推广, 更多游戏按钮不显示!");
                        return null;
                    }
                }
            }
            else {
                if (this.isShowMoreGamesSidePanel()) {
                    if (this.config.otherconfig.moreGamesWidget) {
                        let node = cc.instantiate(this.config.otherconfig.moreGamesWidget);
                        if (node) {
                            utils.showLog("this._moreGamesSidePanel:  有值");
                            if (this._moreGamesSidePanel && cc.isValid(this._moreGamesSidePanel)) {
                                this._moreGamesSidePanel.destroy();
                            }
                            this._moreGamesSidePanel = node;
                            cc.addToStage(this._moreGamesSidePanel, 996);
                            this.reSizeObject(this._moreGamesSidePanel, params);
                            return node;
                        }
                        else {
                            utils.showLog("this._moreGamesSidePanel:   为空");
                        }
                    }
                    else {
                        utils.showLog("未找到预制体 MoreGamesWidget, 请查看CommonUtils组件上是否赋值！");
                    }
                }
                else {
                    utils.showLog("当前平台版本不支持交叉推广, 更多游戏按钮不显示!");
                }
            }
            return null;
        }
        hideMoreGamesSidePanel(moreGameBtn = null) {
            if (this._moreGamesSidePanel) {
                this._moreGamesSidePanel.destroy();
            }
        }
        showBaiduMoreGamesBtn(params = null) {
            if (!this._isConfigInit) {
                utils.showLog("组件配置未初始化!");
                return null;
            }
            let isShow = false;
            if (PlatUtils.IsBaidu) {
                if (utils.Tool_Baidu
                    && utils.Tool_Baidu.canShowRecommendButton()) {
                    isShow = true;
                }
                else {
                    utils.showLog("当前平台不支持游戏内跳转，百度更多游戏侧边栏组件不显示！");
                }
            }
            if (PlatUtils.IsBaidu) {
                if (utils.Tool_Baidu) {
                    if (isShow) {
                        let btn = utils.Tool_Baidu.showRecommendationButton(params);
                        if (btn) {
                            if (this._moreGamesSidePanelBaidu) {
                                this._moreGamesSidePanelBaidu.destroy();
                            }
                            this._moreGamesSidePanelBaidu = btn;
                            return this._moreGamesSidePanelBaidu;
                        }
                        else {
                            return null;
                        }
                    }
                    else {
                        utils.showLog("当前平台版本不支持交叉推广, 百度更多游戏按钮不显示!");
                        return null;
                    }
                }
            }
        }
        hideBaiduMoreGamesBtn(moreGameBtn) {
            if (PlatUtils.IsBaidu && moreGameBtn) {
                if (moreGameBtn != null) {
                    moreGameBtn.destroy();
                }
            }
        }
        isShowRecordWidget() {
            if (!this._isConfigInit) {
                utils.showLog("组件配置未初始化!");
                return false;
            }
            if (PlatUtils.IsDouyin) {
                return true;
            }
            if (utils._tool_Broswer) {
                return true;
            }
            return false;
        }
        hideRecordWidget() {
            if (this._recordWidget != null && cc.isValid(this._recordWidget)) {
                this._recordWidget.destroy();
            }
        }
        showRecordWidget(params = null) {
            if (!this._isConfigInit) {
                utils.showLog("组件配置未初始化!");
                return null;
            }
            if (!this.isShowRecordWidget())
                return null;
            if (this.config.otherconfig.recordWidget) {
                let node = cc.instantiate(this.config.otherconfig.recordWidget);
                if (node) {
                    if (this._recordWidget && cc.isValid(this._recordWidget)) {
                        this._recordWidget.destroy();
                    }
                    this._recordWidget = node;
                    this._recordWidget.zOrder = 9999;
                    let widget = node.getComponent(Laya.Widget);
                    cc.addToStage(this._recordWidget, 997);
                    if (this._recordWidget.width == 0) {
                        this._recordWidget.visible = false;
                        Laya.timer.frameOnce(50, this, () => {
                            this.reSizeObject(this._recordWidget, params);
                        }, null, false);
                    }
                    else {
                        this.reSizeObject(this._recordWidget, params);
                    }
                    return node;
                }
            }
            else {
                utils.showLog("未找到预制体 RecordWidget, 请查看CommonUtils组件上是否赋值！");
            }
            return null;
        }
        isShowCreateShortcutWidget() {
            if (!this._isConfigInit) {
                utils.showLog("本地数据未初始化!");
                return false;
            }
            if (this.Tool_Broswer)
                return true;
            if (this.canCreateShortcut()) {
                if (this.getServelCofig()
                    && this.getServelCofig().is_desktop) {
                    if (this.getServelCofig().is_desktop == "true") {
                        return true;
                    }
                    else {
                        utils.showLog("配置数据中 is_desktop 字段值为 false， 创建快捷方式按钮不显示!");
                    }
                }
                else {
                    utils.showLog("配置数据中没有 is_desktop 字段， 创建快捷方式按钮不显示!");
                }
            }
            else {
                utils.showLog("当前平台版本不支持创建桌面快捷方式, 创建快捷方式按钮不显示！");
            }
            return false;
        }
        showCreateShortcutWidget(callback = null, params = null) {
            if (!this._isConfigInit) {
                utils.showLog("组件配置未初始化!");
                return null;
            }
            if (this.isShowCreateShortcutWidget()) {
                if (this.config.otherconfig.shortcutWidget) {
                    let node = cc.instantiate(this.config.otherconfig.shortcutWidget);
                    if (node) {
                        if (this._shortcutWidget && cc.isValid(this._shortcutWidget)) {
                            this._shortcutWidget.destroy();
                        }
                        this._shortcutWidget = node;
                        this._shortcutWidget.getComponent(YZ_ShortcutWidget).Callback = callback;
                        cc.addToStage(node, 999);
                        this.reSizeObject(this._shortcutWidget, params);
                    }
                    else {
                        utils.showLog("未找到预制体 ShortcutWidge, 请查看CommonUtils组件上是否赋值！");
                    }
                    return null;
                }
            }
        }
        hideShortcutWidget() {
            if (this._shortcutWidget && cc.isValid(this._shortcutWidget)) {
                this._shortcutWidget.destroy();
            }
        }
        registerEvent(eventName, callback, target) {
            if (!eventName) {
                utils.showLog("[Utils.registerEvent] param eventName is null!");
                return;
            }
            if (!callback) {
                utils.showLog("[Utils.registerEvent] param callback is null!");
                return;
            }
            if (!target) {
                utils.showLog("[Utils.registerEvent] param target is null!");
                return;
            }
            Laya.stage.on(eventName, callback, target);
        }
        unregisterEvent(eventName) {
            Laya.stage.off(eventName, null, null);
        }
        emitCommonEvent(eventName) {
            Laya.stage.event(eventName);
        }
        showGameBox(params = null) {
            if (PlatUtils.IsWechat) {
                let isShow = false;
            }
        }
        isShowNativeTryGamesWidget() {
            if (!this._isConfigInit) {
                utils.showLog("warn:" + "组件配置未初始化!");
                return false;
            }
            if (this.Tool_Broswer)
                return true;
            if (PlatUtils.IsOPPO) {
                if (utils.oppoTool
                    && utils.oppoTool.ServerConfig
                    && utils.oppoTool.ServerConfig.icon_jump_native) {
                    if (parseInt(utils.oppoTool.ServerConfig.icon_jump_native) > 0) {
                        return true;
                    }
                    else {
                        utils.showLog("warn:" + "icon_jump_native参数为false，试玩戏挂件不显示！");
                    }
                }
                else {
                    utils.showLog("warn:" + "配置中没有icon_jump_native参数，试玩游戏挂件不显示！");
                }
            }
            else if (PlatUtils.IsVIVO) {
                if (utils.Tool_Vivo
                    && utils.Tool_Vivo.ServerConfig
                    && utils.Tool_Vivo.ServerConfig.icon_jump_native) {
                    if (parseInt(utils.Tool_Vivo.ServerConfig.icon_jump_native) > 0) {
                        return true;
                    }
                    else {
                        utils.showLog("warn:" + "icon_jump_native参数为false，试玩戏挂件不显示！");
                    }
                }
                else {
                    utils.showLog("warn:" + "配置中没有icon_jump_native参数，试玩游戏挂件不显示！");
                }
            }
            else if (PlatUtils.IsNativeAndroid) {
                if (utils.Tool_Native
                    && utils.Tool_Native.ServerConfig
                    && utils.Tool_Native.ServerConfig.icon_jump_native) {
                    if (parseInt(utils.Tool_Native.ServerConfig.icon_jump_native) > 0) {
                        return true;
                    }
                    else {
                        utils.showLog("warn:" + "icon_jump_native参数为false，原生试玩戏挂件不显示！");
                    }
                }
                else {
                    utils.showLog("warn:" + "配置中没有icon_jump_native参数，原生试玩游戏挂件不显示！");
                }
            }
            return false;
        }
        canShowCrossWidget6() {
            if (!this._isConfigInit) {
                utils.showLog("组件配置未初始化!");
                return false;
            }
            if (this.Tool_Broswer)
                return true;
            if (PlatUtils.IsWechat) {
                if (utils.isSupportnavigateToMiniGame()) {
                    if (utils.wechatTool
                        && utils.wechatTool.ServerConfig
                        && utils.wechatTool.ServerConfig.is_cross_game) {
                        if (utils.wechatTool.ServerConfig.is_cross_game == "true") {
                            return true;
                        }
                        else {
                            utils.showLog("is_cross_game参数为false，6元素交叉推广组件不显示！");
                        }
                    }
                    else {
                        utils.showLog("配置中没有is_cross_game参数，6元素交叉推广组件不显示！");
                    }
                }
                else {
                    utils.showLog("当前平台不支持游戏内跳转，6元素交叉推广组件不显示！");
                }
            }
            else if (PlatUtils.IsOPPO) {
                if (utils.isSupportnavigateToMiniGame()) {
                    if (utils.oppoTool
                        && utils.oppoTool.ServerConfig
                        && utils.oppoTool.ServerConfig.is_cross_game) {
                        if (utils.oppoTool.ServerConfig.is_cross_game == "true") {
                            return true;
                        }
                        else {
                            utils.showLog("is_cross_game参数为false，6元素交叉推广组件不显示！");
                        }
                    }
                    else {
                        utils.showLog("配置中没有is_cross_game参数，6元素交叉推广组件不显示！");
                    }
                }
                else {
                    utils.showLog("当前平台不支持游戏内跳转，6元素交叉推广组件不显示！");
                }
            }
            else if (PlatUtils.IsDouyin) {
                if (PlatUtils.IsAndroid
                    && utils.isSupportnavigateToMiniGame()) {
                    if (utils._tool_Douyin
                        && utils._tool_Douyin.ServerConfig
                        && utils._tool_Douyin.ServerConfig.is_cross_game) {
                        if (utils._tool_Douyin.ServerConfig.is_cross_game == "true") {
                            return true;
                        }
                        else {
                            utils.showLog("is_cross_game参数为false，6元素交叉推广组件不显示！");
                        }
                    }
                }
                else {
                    utils.showLog("当前平台不支持游戏内跳转，6元素交叉推广组件不显示！");
                }
            }
            else if (PlatUtils.IsBaidu) {
                if (utils.isSupportnavigateToMiniGame()) {
                    if (utils.Tool_Baidu
                        && utils.Tool_Baidu.ServerConfig
                        && utils.Tool_Baidu.ServerConfig.is_cross_game) {
                        if (utils.Tool_Baidu.ServerConfig.is_cross_game == "true") {
                            return true;
                        }
                        else {
                            utils.showLog("is_cross_game参数为false，6元素交叉推广组件不显示！");
                        }
                    }
                    else {
                        utils.showLog("配置中没有is_cross_game参数，6元素交叉推广组件不显示！");
                    }
                }
                else {
                    utils.showLog("当前平台不支持游戏内跳转，6元素交叉推广组件不显示！");
                }
            }
            return false;
        }
        showCrossWidget6(params) {
            if (!this._isConfigInit) {
                utils.showLog("组件配置未初始化!");
                return null;
            }
            if (this.canShowCrossWidget6()) {
                if (this.config.otherconfig.crossWidget6) {
                    if (this._crossWidget6) {
                        this._crossWidget6.destroy();
                    }
                    this._crossWidget6 = cc.instantiate(this.config.otherconfig.crossWidget6);
                    cc.addToStage(this._crossWidget6, 980);
                    if (params) {
                        params.centerX = 1;
                    }
                    else {
                        params = { centerX: 1 };
                    }
                    this.reSizeObject(this._crossWidget6, params);
                }
                else {
                    utils.showLog("未找到预制体 CrossWidget6, 请查看CommonUtils组件上是否赋值！");
                }
            }
            return null;
        }
        hideCrossWidget6() {
            if (this._crossWidget6) {
                Laya.stage.removeChild(this._crossWidget6);
                this._crossWidget6.destroy();
                this._crossWidget6 = null;
            }
        }
        showFavoriteGuide(param) {
            if (PlatUtils.IsBaidu) {
                if (utils._tool_Baidu.canShowFavoriteGuide()) {
                }
            }
        }
        checkAutoSign() {
            let config = utils.getServelCofig();
            if (config && config.auto_sign && config.auto_sign == "true") {
                return true;
            }
            return false;
        }
        get ServerConfig() {
            if (this.cur_tool) {
                return this.cur_tool.ServerConfig ? this.cur_tool.ServerConfig : {};
            }
            return null;
        }
        get cur_tool() {
            let tool = null;
            if (PlatUtils.IsWechat) {
                tool = utils.wechatTool;
            }
            else if (PlatUtils.IsOPPO) {
                tool = utils.oppoTool;
            }
            else if (PlatUtils.IsVIVO) {
                tool = utils.Tool_Vivo;
            }
            else if (PlatUtils.IsQQ) {
                tool = utils.Tool_QQ;
            }
            else if (PlatUtils.IsDouyin) {
                tool = utils.Tool_Douyin;
            }
            else if (PlatUtils.IsBaidu) {
                tool = utils.Tool_Baidu;
            }
            else if (PlatUtils.IsQTT) {
                tool = utils.Tool_QTT;
            }
            else if (PlatUtils.IsXiaoMi) {
                tool = utils.Tool_XiaoMi;
            }
            else if (PlatUtils.IsNativeAndroid) {
                tool = utils.Tool_Native;
            }
            else if (PlatUtils.Is4399) {
                tool = utils.Tool_4399;
            }
            else if (PlatUtils.IsUc) {
                tool = utils.Tool_UC;
            }
            else {
                tool = utils._tool_Broswer;
            }
            return tool;
        }
        showLog(str, ...any) {
            if (this.isShowViewLog || PlatUtils.IsTest) {
                if (PlatUtils.IsNativeAndroid) {
                    for (let i = 0; i < any.length; i++) {
                        str += any[i];
                    }
                    console.log("YzCommon >>>>>>>>>:" + str);
                }
                else {
                    console.log("YzCommon >>>>>>>>>:", str, ...any);
                }
            }
        }
        vibrate(type = VibrateType.Short) {
            let isLong = (type == VibrateType.Long);
            if (PlatUtils.IsWechat) {
                if (type == VibrateType.Short) {
                    wx.vibrateShort({ success(res) { }, fail(res) { } });
                }
                else {
                    wx.vibrateLong({ success(res) { }, fail(res) { } });
                }
            }
            else if (PlatUtils.IsOPPO) {
                if (type == VibrateType.Short) {
                    qg.vibrateShort({ success(res) { }, fail(res) { } });
                }
                else {
                    qg.vibrateLong({ success(res) { }, fail(res) { } });
                }
            }
            else if (PlatUtils.IsVIVO) {
                if (type == VibrateType.Short) {
                    qg.vibrateShort();
                }
                else {
                    qg.vibrateLong();
                }
            }
            else if (PlatUtils.IsQQ) {
                if (type == VibrateType.Short) {
                    qq.vibrateShort({ success(res) { }, fail(res) { } });
                }
                else {
                    qq.vibrateLong({ success(res) { }, fail(res) { } });
                }
            }
            else if (PlatUtils.IsDouyin) {
                if (type == VibrateType.Short) {
                    tt.vibrateShort({ success(res) { }, fail(res) { } });
                }
                else {
                    tt.vibrateLong({ success(res) { }, fail(res) { } });
                }
            }
            else if (PlatUtils.IsBaidu) {
                if (type == VibrateType.Short) {
                    swan.vibrateShort({ success(res) { }, fail(res) { } });
                }
                else {
                    swan.vibrateLong({ success(res) { }, fail(res) { } });
                }
            }
            else if (PlatUtils.IsNativeAndroid) {
                if (type == VibrateType.Short) {
                    this._tool_Native && this._tool_Native.vibrateShort();
                }
                else {
                    this._tool_Native && this._tool_Native.vibrateLong();
                }
            }
        }
        StartGame(level, model) {
            utils.showLog(`关卡：${level}开始`);
            AldUtils.StartGame(level, model);
            if (PlatUtils.IsDouyin) {
                this.AutoStartRecord(level);
            }
        }
        GameWin(level, top, star = 0, model, isShowAd = true) {
            utils.showLog(`关卡：${level}胜利`);
            AldUtils.GameWin(level, star, model);
            if (PlatUtils.IsDouyin) {
                this.recordEnd();
            }
            return this.AutoShowStatement(level, true, top, isShowAd);
        }
        GameFail(level, top, model, isShowAd = true) {
            utils.showLog(`关卡：${level}失败`);
            AldUtils.GameFail(level, model);
            if (PlatUtils.IsDouyin) {
                this.recordEnd();
            }
            return this.AutoShowStatement(level, false, top, isShowAd);
        }
        GameSkip(level, model) {
            AldUtils.GameSkip(level, model);
        }
        SendEvent(eventName) {
            AldUtils.SendEvent(eventName);
        }
        static UseTool(level, toolName, model) {
            AldUtils.UseTool(level, toolName, model);
        }
        checkResultShow(type) {
            let level = utils.currentLevel;
            let isSuccess = utils.isSuccess;
            let config = utils.ServerConfig;
            if (!config) {
                utils.showLog("warn:" + "服务器配置不存在,只显示结算广告");
                return type == 3;
            }
            if (PlatUtils.IsDouyin) {
                if (config.auto_record_share_count) {
                    let recoredCount = config.auto_record_share_count;
                    if (recoredCount != 0 && utils.recored_share_count >= recoredCount) {
                        utils.showLog(`服务器配置分享次数：${recoredCount} ,已到上限`);
                    }
                    else {
                        let record_cap = config.auto_record_interval;
                        let checkShow = false;
                        if (level > 0 && record_cap != 0) {
                            if (record_cap.indexOf(",") == -1) {
                                if (level % Number(record_cap) == 0) {
                                    checkShow = true;
                                }
                            }
                            else {
                                utils.showLog(`指定关卡${config.auto_record_interval}分享录屏，当前关卡为：${level}`);
                                let record_cap_arr = record_cap.split(",");
                                record_cap_arr.forEach(str => {
                                    if (level == Number(str)) {
                                        checkShow = true;
                                    }
                                });
                            }
                            if (checkShow) {
                                if (config.auto_record_share_type == "all") {
                                    return type == 1;
                                }
                                if (config.auto_record_share_type == "success") {
                                    if (utils.isSuccess == true) {
                                        return type == 1;
                                    }
                                }
                                if (config.auto_record_share_type == "fail") {
                                    if (utils.isSuccess == false) {
                                        return type == 1;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            utils.showLog(`不能自动分享录屏 分享录屏间隔为：${config.auto_record_interval}  分享类型为：${config.auto_record_share_type}`);
            if (config.auto_video_interval && config.auto_video_interval != 0) {
                let space = config.auto_video_interval;
                let showType = config.auto_video_show_type;
                if (level % space == 0) {
                    if (showType == "all") {
                        return type == 2;
                    }
                    if (showType == "success") {
                        if (isSuccess == true) {
                            return type == 2;
                        }
                    }
                    if (showType == "fail") {
                        if (isSuccess == false) {
                            return type == 2;
                        }
                    }
                }
            }
            utils.showLog(`不能自动弹视频弹视频间隔为：${config.auto_video_interval} 弹视频类型为：${config.auto_video_show_type}`);
            if (config.auto_rec_insert_interval && config.auto_rec_insert_interval != 0) {
                let space = config.auto_rec_insert_interval;
                let showType = config.auto_rec_insert_type;
                if (level % space == 0) {
                    if (showType == "all") {
                        return type == 4;
                    }
                    if (showType == "success") {
                        if (isSuccess == true) {
                            return type == 4;
                        }
                    }
                    if (showType == "fail") {
                        if (isSuccess == false) {
                            return type == 4;
                        }
                    }
                }
            }
            utils.showLog(`不能自动弹互推插屏间隔为：${config.auto_rec_insert_interval} 弹视频类型为：${config.auto_rec_insert_type}`);
            return type == 3;
        }
        AutoShowStatement(level, isSuccess, top, isShowAd) {
            utils.currentLevel = level;
            utils.isSuccess = isSuccess;
            let res = { "type": -1, "node": null };
            if (!isShowAd) {
                utils.showLog("isShowAd为false，只上报不显示广告");
                return res;
            }
            let isShowVideo = false;
            if (this.checkResultShow(2)) {
                if (utils.ServerConfig.result_auto_show_video && utils.ServerConfig.result_auto_show_video == "false")
                    return;
                if (PlatUtils.IsDouyin) {
                    utils.showLog("服务器版本：" + utils.config.douyinconfig.version + "当前版本：" + utils.ServerConfig.version);
                    if (utils.config.douyinconfig.version != utils.ServerConfig.version) {
                        utils.showLog("版本不一致，自动播放视频！");
                        utils.adManager.ShowVideo(() => { });
                        isShowVideo = true;
                    }
                }
                else if (PlatUtils.IsQQ) {
                    if (utils.config.qqconfig.version != utils.ServerConfig.version) {
                        utils.showLog("版本不一致，自动播放视频！");
                        utils.adManager.ShowVideo(() => { });
                        isShowVideo = true;
                    }
                }
                else if (PlatUtils.IsBaidu) {
                    if (utils.config.baiduconfig.version != utils.ServerConfig.version) {
                        utils.showLog("版本不一致，自动播放视频！");
                        utils.adManager.ShowVideo(() => { });
                        isShowVideo = true;
                    }
                }
                else if (PlatUtils.IsNativeAndroid) {
                    if (utils.config.nativeAndroidConfig.version != utils.ServerConfig.version) {
                        utils.showLog("版本不一致，自动播放视频！");
                        if (utils.ServerConfig && utils.ServerConfig.auto_video_type && utils.ServerConfig.auto_video_type == "reward_video") {
                            utils.adManager.ShowVideo(() => { });
                        }
                        else {
                            utils.adManager.showFullScreenVideo();
                        }
                        isShowVideo = true;
                    }
                }
                else if (PlatUtils.IsVIVO) {
                    utils.showLog("服务器配置当前显示强弹视频，但当前平台不支持。需修改服务器配置");
                    utils.adManager.showStatementAds(top);
                }
                else {
                    isShowVideo = true;
                    utils.adManager.ShowVideo(() => { });
                }
                if (isShowVideo && (PlatUtils.IsDouyin || PlatUtils.IsQQ || PlatUtils.IsNativeAndroid || PlatUtils.IsNativeIOS)) {
                    utils.showLog("当前强弹了视频，不显示插屏！");
                }
                else {
                    res = utils.adManager.showStatementAds(top);
                }
            }
            if (this.checkResultShow(3)) {
                res = utils.adManager.showStatementAds(top);
            }
            if (this.canShowRedBag() && this.yzRedBagInfo.progress >= this.yzRedBagInfo.totalProgress) {
                utils.showLog("当前红包进度已满，显示获得红包窗口！");
            }
            if (PlatUtils.IsOPPO) {
                if (this.checkResultShow(4)) {
                    if (this.ServerConfig.statement_show_rec_delay_time) {
                        setTimeout(() => {
                            utils.showLog("服务器配结算显示互推插屏！并延迟" + utils.ServerConfig.statement_show_rec_delay_time + "秒");
                            utils.oppoTool.showOppoGamePortal();
                        }, utils.ServerConfig.statement_show_rec_delay_time * 1000);
                    }
                    else {
                        utils.showLog("服务器配结算显示互推插屏！");
                        utils.oppoTool.showOppoGamePortal();
                    }
                }
            }
            if (PlatUtils.IsDouyin || PlatUtils.IsNativeIOS || PlatUtils.IsBaidu || PlatUtils.IsNativeAndroid) {
                res.node = utils.showCrossWidget6({ top: top });
                console.log("show corrrrrrrrr");
            }
            return res;
        }
        addRedBagCount(callFun) {
            this.yzRedBagInfo.freeRedBagCount++;
            if (callFun) {
                this.rewardCloseFunc = callFun;
            }
            this.showOpenRedBagPanel({ showType: 3 });
            utils.showLog("获得一个现金红包");
        }
        AutoStartRecord(level) {
            let config = utils.getServelCofig();
            if (config) {
                if (config.auto_record_interval && config.auto_record_interval > 0) {
                    utils.recordStart();
                }
                else {
                    utils.showLog("warn:" + "auto_record_interval配置不存在或为0");
                }
            }
            else {
                utils.showLog("warn:" + "服务器配置不存在2");
            }
        }
        showShareRecordPanel(params = null) {
            if (!this._isConfigInit) {
                utils.showLog("组件配置未初始化!");
                return null;
            }
            if (this.config.otherconfig.shareRecordPanel) {
                let node = cc.instantiate(this.config.otherconfig.shareRecordPanel);
                if (node) {
                    if (this.shareRecordPanel && cc.isValid(this.shareRecordPanel)) {
                        console.log("this.shareRecordPanel:", this.shareRecordPanel);
                        this.shareRecordPanel.destroy();
                    }
                    this.shareRecordPanel = node;
                    cc.addToStage(this.shareRecordPanel, 1002);
                    this.reSizeObject(this.shareRecordPanel, params);
                    return node;
                }
            }
            else {
                utils.showLog("未找到预制体 ShareRecordPanel, 请查看CommonUtils组件上是否赋值！");
            }
            return null;
        }
        isShowTrySkin(curLevel) {
            let count = 5;
            if (utils.getServelCofig() != null && utils.getServelCofig() != undefined) {
                if (utils.getServelCofig().try_skin_level_count != null && utils.getServelCofig().try_skin_level_count != undefined) {
                    count = utils.getServelCofig().try_skin_level_count;
                }
                else {
                    utils.showLog("try_skin_level_count......没有配置");
                }
            }
            else {
                utils.showLog("utils.getServelCofig......为空");
            }
            if (curLevel % count == 0) {
                if (utils.getServelCofig() != null || utils.getServelCofig() != undefined) {
                    if (utils.getServelCofig().try_skin_show_ad_interval != undefined && utils.getServelCofig().try_skin_show_ad_interval != null) {
                        if (curLevel % utils.getServelCofig().try_skin_show_ad_interval == 0) {
                            utils.showLog(`服务器配置间隔${utils.getServelCofig().try_skin_show_ad_interval}关试用皮肤展示插屏！`);
                            if (PlatUtils.IsOPPO) {
                                utils.oppoTool.showOppoGamePortal();
                            }
                            else {
                                utils.adManager.ShowInterstitial();
                            }
                        }
                    }
                    else {
                        utils.showLog("try_skin_show_ad_interval......没有配置");
                    }
                }
                else {
                    utils.showLog("utils.getServelCofig......为空");
                }
                return true;
            }
            return false;
        }
        showSkipBtn(btn, isCloseBtn = false, location = BannerLocation.None) {
            if (utils.ServerConfig && btn) {
                if (PlatUtils.IsTest) {
                    utils.ServerConfig.skip_btn_show_delay = 2;
                    utils.ServerConfig.over_page_skip_btn_show_delay = 5;
                    utils.ServerConfig.special_skip_btn_show_delay = 8;
                }
                let delayShowBtn = PlatUtils.IsNativeAndroid ? 3 : 0;
                if (utils.ServerConfig.skip_btn_show_delay != null) {
                    delayShowBtn = utils.ServerConfig.skip_btn_show_delay;
                }
                if (isCloseBtn) {
                    if (utils.ServerConfig.special_skip_btn_show_delay != null) {
                        delayShowBtn = utils.ServerConfig.special_skip_btn_show_delay;
                    }
                }
                if (location == BannerLocation.Over) {
                    if (utils.ServerConfig.over_page_skip_btn_show_delay != null) {
                        delayShowBtn = utils.ServerConfig.over_page_skip_btn_show_delay;
                    }
                }
                if (delayShowBtn > 0) {
                    btn.visible = false;
                    Laya.timer.once(delayShowBtn * 1000, null, () => {
                        btn.visible = true;
                    }, null, false);
                }
                else {
                    if (!btn.visible) {
                        btn.visible = true;
                    }
                }
            }
        }
        delayShowNode(btn) {
            if (btn) {
                btn.visible = false;
                let delayShowBtn = 0;
                if (utils.getServelCofig() != null && utils.getServelCofig() != undefined) {
                    if (utils.getServelCofig().next_btn_show_delay != null && utils.getServelCofig().next_btn_show_delay != undefined) {
                        delayShowBtn = utils.getServelCofig().next_btn_show_delay;
                    }
                }
                Laya.timer.once(delayShowBtn * 1000, null, () => {
                    btn.visible = true;
                });
            }
        }
        isBoxAutoSelectToggle() {
            let cap_level = 0;
            let level = utils.currentLevel;
            if (utils.getServelCofig() && utils.getServelCofig().box_auto_select_level) {
                cap_level = Number(utils.getServelCofig().box_auto_select_level);
            }
            else {
                utils.showLog("服务器配置不存在，不自动勾选");
            }
            if (cap_level != 0 && (level % cap_level) == 0) {
                return true;
            }
            return false;
        }
        isResultAutoSelectToggle() {
            let cap_level = 0;
            let level = utils.currentLevel;
            if (utils.getServelCofig() && utils.getServelCofig().result_auto_select_level) {
                cap_level = Number(utils.getServelCofig().result_auto_select_level);
            }
            else {
                utils.showLog("服务器配置不存在，不自动勾选");
            }
            if (cap_level != 0 && (level % cap_level) == 0) {
                return true;
            }
            return false;
        }
        isTrySkinAutoSelectToggle() {
            let cap_level = 0;
            let level = utils.currentLevel;
            if (utils.getServelCofig() && utils.getServelCofig().skin_auto_select_level) {
                cap_level = Number(utils.getServelCofig().skin_auto_select_level);
            }
            else {
                utils.showLog("服务器配置不存在，不自动勾选");
            }
            if (cap_level != 0 && (level % cap_level) == 0) {
                return true;
            }
            return false;
        }
        controView(view) {
            let result = { "isSelect": true, "msg": "观看视频获得奖励", "btnType": true, "is_open": false };
            let adTipsType;
            let selectType;
            if (!utils.getServelCofig()) {
                utils.showLog("服务器配置不存在");
                return result;
            }
            console.log("utils.ServerConfig.open_check_btn...", utils.ServerConfig.open_check_btn);
            if (utils.ServerConfig.open_check_btn && utils.ServerConfig.open_check_btn == "false") {
                utils.showLog("服务器配置不开启勾选！");
                return result;
            }
            result.is_open = true;
            switch (view) {
                case ViewLocation.sign:
                    selectType = utils.getServelCofig().sign_auto_select_level ? utils.getServelCofig().sign_auto_select_level : 0;
                    if (utils.getServelCofig() && utils.getServelCofig().ad_tip_sign_random == "true") {
                        adTipsType = Math.random() >= 0.5 ? true : false;
                    }
                    else {
                        adTipsType = true;
                    }
                    if (adTipsType) {
                        result.msg = "查看视频获得双倍奖励";
                    }
                    else {
                        result.msg = "不需要视频奖励";
                    }
                    break;
                case ViewLocation.trySkin:
                    selectType = utils.getServelCofig().tryskin_auto_select_level ? utils.getServelCofig().tryskin_auto_select_level : 0;
                    if (utils.getServelCofig() && utils.getServelCofig().ad_tip_tryskin_random == "true") {
                        adTipsType = Math.random() >= 0.5 ? true : false;
                    }
                    else {
                        adTipsType = true;
                    }
                    if (adTipsType) {
                        result.msg = "查看视频试用皮肤";
                    }
                    else {
                        result.msg = "不需要视频试用皮肤";
                    }
                    break;
                case ViewLocation.box:
                    selectType = utils.getServelCofig().box_auto_select_level ? utils.getServelCofig().box_auto_select_level : 0;
                    if (utils.getServelCofig() && utils.getServelCofig().ad_tip_box_random == "true") {
                        adTipsType = Math.random() >= 0.5 ? true : false;
                    }
                    else {
                        adTipsType = true;
                    }
                    if (adTipsType) {
                        result.msg = "查看视频获得五倍奖励";
                    }
                    else {
                        result.msg = "不需要视频奖励";
                    }
                    break;
                case ViewLocation.over:
                    selectType = utils.getServelCofig().result_auto_select_level ? utils.getServelCofig().result_auto_select_level : 0;
                    if (utils.getServelCofig() && utils.getServelCofig().ad_tip_result_random == "true") {
                        adTipsType = Math.random() >= 0.5 ? true : false;
                    }
                    else {
                        adTipsType = true;
                    }
                    if (adTipsType) {
                        result.msg = "查看视频获得双倍奖励";
                    }
                    else {
                        result.msg = "不需要视频奖励";
                    }
                    break;
                case ViewLocation.turntable:
                    selectType = utils.ServerConfig.turntable_auto_select_level ? utils.ServerConfig.turntable_auto_select_level : 0;
                    break;
            }
            if (selectType == 0) {
                result.isSelect = false;
            }
            else if (selectType == 1) {
                result.isSelect = true;
            }
            else if (selectType == 2) {
                result.isSelect = Math.random() >= 0.5 ? true : false;
            }
            result.btnType = adTipsType == result.isSelect;
            return result;
        }
        canShowNextVideo(level) {
            if (utils.getServelCofig() && utils.getServelCofig().next_auto_video_interval) {
                let cap = Number(utils.getServelCofig().next_auto_video_interval);
                if (cap && cap != 0) {
                    if (level % cap == 0) {
                        if (PlatUtils.IsDouyin) {
                            if (utils.getServelCofig().version != utils.config.douyinconfig.version) {
                                return true;
                            }
                        }
                        else if (PlatUtils.IsBaidu) {
                            if (utils.getServelCofig().version != utils.config.baiduconfig.version) {
                                return true;
                            }
                        }
                        else if (PlatUtils.IsUc) {
                            if (utils.ServerConfig.version != utils.config.ucConfig.version) {
                                return true;
                            }
                        }
                        else {
                            return true;
                        }
                    }
                    else {
                        if (PlatUtils.Is4399) {
                            cap = 3;
                            if (cap != 0 && level % cap == 0) {
                                return true;
                            }
                        }
                    }
                }
            }
            return false;
        }
        canShowRedBag() {
            if (!this._isConfigInit) {
                utils.showLog("warn:" + "组件配置未初始化!");
                return false;
            }
            if (this.Tool_Broswer)
                return true;
            if (this.ServerConfig && this.yzRedBagInfo && this.ServerConfig.show_red_bag && this.ServerConfig.show_red_bag == "true") {
                return true;
            }
            utils.showLog("服务器配置不显示红包组件！");
            return false;
        }
        hideWithdrawalWidget() {
            if (this._withdrawalWidget && cc.isValid(this._withdrawalWidget)) {
                this._withdrawalWidget.destroy();
            }
        }
        showWithdrawalWidget(params = null) {
            if (!this._isConfigInit) {
                utils.showLog("warn:" + "组件配置未初始化!");
                return null;
            }
            if (!this.canShowRedBag())
                return null;
            if (this.config.otherconfig.withdrawalWidget) {
                let node = cc.instantiate(this.config.otherconfig.withdrawalWidget);
                if (node) {
                    if (this._withdrawalWidget && cc.isValid(this._withdrawalWidget)) {
                        this._withdrawalWidget.destroy();
                    }
                    this._withdrawalWidget = node;
                    cc.addToStage(node, 9999);
                    if (params) {
                        if (params.scale != null) {
                            node.scale(params.scale, params.scale);
                        }
                        else {
                            node.scale(1, 1);
                        }
                        if (params.top != null) {
                            node.top = params.top;
                        }
                        else if (params.bottom != null) {
                            node.bottom = params.bottom;
                        }
                        if (params.left != null) {
                            node.left = params.left;
                        }
                        else if (params.right != null) {
                            node.right = params.right;
                        }
                    }
                    return node;
                }
            }
            else {
                utils.showLog("warn:" + "未找到预制体 WithdrawalWidget, 请查看CommonUtils组件上是否赋值！");
            }
            return null;
        }
        hideRedBagProgressWidget() {
            if (this._redBagProgressWidget && cc.isValid(this._redBagProgressWidget)) {
                this._redBagProgressWidget.destroy();
            }
        }
        showRedBagProgressWidget(params = null) {
            if (!this._isConfigInit) {
                utils.showLog("warn:" + "组件配置未初始化!");
                return null;
            }
            if (!this.canShowRedBag())
                return null;
            if (this.config.otherconfig.redBagProgressWidget) {
                let node = cc.instantiate(this.config.otherconfig.redBagProgressWidget);
                if (node) {
                    if (this._redBagProgressWidget && cc.isValid(this._redBagProgressWidget)) {
                        this._redBagProgressWidget.destroy();
                    }
                    this._redBagProgressWidget = node;
                    cc.addToStage(node, 9999);
                    if (params) {
                        if (params.scale != null) {
                            node.scale(params.scale, params.scale);
                        }
                        if (params.top != null) {
                            node.top = params.top;
                        }
                        else if (params.bottom != null) {
                            node.bottom = params.bottom;
                        }
                        if (params.left != null) {
                            node.left = params.left;
                        }
                        else if (params.right != null) {
                            node.right = params.right;
                        }
                    }
                    return node;
                }
            }
            else {
                utils.showLog("warn:" + "未找到预制体 RedBagProgressWidget, 请查看CommonUtils组件上是否赋值！");
            }
            return null;
        }
        showWithdrawalPanel(params = null) {
            if (!this._isConfigInit) {
                utils.showLog("warn:" + "组件配置未初始化!");
                return null;
            }
            if (!this.canShowRedBag())
                return null;
            if (this.config.otherconfig.withdrawalPanel) {
                let node = cc.instantiate(this.config.otherconfig.withdrawalPanel);
                if (node) {
                    if (this._withdrawalPanel && cc.isValid(this._withdrawalPanel)) {
                        this._withdrawalPanel.destroy();
                    }
                    this._withdrawalPanel = node;
                    cc.addToStage(this._withdrawalPanel, 9999);
                }
                else {
                    utils.showLog("warn:" + "未找到预制体 WithdrawalPanel, 请查看CommonUtils组件上是否赋值！");
                }
                return null;
            }
        }
        showOpenRedBagPanel(params = null) {
            if (!this._isConfigInit) {
                utils.showLog("warn:" + "组件配置未初始化!");
                return null;
            }
            if (params && params.closeCallFunc) {
                this.rewardCloseFunc = params.closeCallFunc;
            }
            if (!this._isConfigInit) {
                utils.showLog("warn:" + "组件配置未初始化!");
                this.rewardCloseFunc && this.rewardCloseFunc();
                return null;
            }
            if (!this.canShowRedBag()) {
                this.rewardCloseFunc && this.rewardCloseFunc();
                return null;
            }
            if (params && params.location && params.location === BannerLocation.Home) {
                if (this.yzRedBagInfo.progress < this.yzRedBagInfo.totalProgress && !this.yzRedBagInfo.isFreeRedBag) {
                    utils.showLog("当前红包进度不满足条件且没有免费红包领取，首页不显示拆红包窗口");
                    this.rewardCloseFunc && this.rewardCloseFunc();
                    return null;
                }
                else if (!this.yzRedBagInfo.isFreeRedBag) {
                    params.showType = 2;
                }
            }
            if (this.config.otherconfig.openRedBagPanel) {
                let node = cc.instantiate(this.config.otherconfig.openRedBagPanel);
                if (node) {
                    if (this._openRedBagPanel && cc.isValid(this._openRedBagPanel)) {
                        this._openRedBagPanel.destroy();
                    }
                    this._openRedBagPanel = node;
                    cc.addToStage(node, 9999);
                }
                else {
                    utils.showLog("warn:" + "未找到预制体 OpenRedBagPanel, 请查看CommonUtils组件上是否赋值！");
                }
                return null;
            }
        }
        showRewardRedBagPanel(params = null) {
            if (!this._isConfigInit) {
                utils.showLog("warn:" + "组件配置未初始化!");
                return null;
            }
            if (!this.canShowRedBag())
                return null;
            this._rewardRedBagPanelShowCount++;
            if (this._rewardRedBagPanelShowCount % 3 != 0) {
                utils.showLog("获得红包弹窗未达到服务器配置的间隔限制！");
                return;
            }
            if (this.config.otherconfig.rewardRedBagPanel) {
                let node = cc.instantiate(this.config.otherconfig.rewardRedBagPanel);
                if (node) {
                    if (this._rewardRedBagPanel && cc.isValid(this._rewardRedBagPanel)) {
                        this._rewardRedBagPanel.destroy();
                    }
                    this._rewardRedBagPanel = node;
                    cc.addToStage(this._rewardRedBagPanel, 9999);
                }
                else {
                    utils.showLog("warn:" + "未找到预制体 OpenRedBagPanel, 请查看CommonUtils组件上是否赋值！");
                }
                return null;
            }
        }
        isVerticalRecommentPanel() {
            if (!this._isConfigInit) {
                utils.showLog("warn:" + "组件配置未初始化!");
                return false;
            }
            if (this.Tool_Broswer)
                return true;
            if (PlatUtils.IsWechat) {
                if (utils.isSupportnavigateToMiniGame()) {
                    if (utils.wechatTool
                        && utils.wechatTool.ServerConfig
                        && utils.wechatTool.ServerConfig.is_vertical_game) {
                        if (utils.wechatTool.ServerConfig.is_vertical_game == "true") {
                            return true;
                        }
                        else {
                            utils.showLog("warn:" + "is_vertical_game参数为false，更多游戏侧边栏组件不显示！");
                        }
                    }
                    else {
                        utils.showLog("warn:" + "配置中没有is_vertical_game参数，更多游戏侧边栏组件不显示！");
                    }
                }
                else {
                    utils.showLog("warn:" + "当前平台不支持游戏内跳转，更多游戏侧边栏组件不显示！");
                }
            }
            else if (PlatUtils.IsOPPO) {
                if (utils.isSupportnavigateToMiniGame()) {
                    if (utils.oppoTool
                        && utils.oppoTool.ServerConfig
                        && utils.oppoTool.ServerConfig.is_vertical_game) {
                        if (utils.oppoTool.ServerConfig.is_vertical_game == "true") {
                            return true;
                        }
                        else {
                            utils.showLog("warn:" + "is_vertical_game参数为false，更多游戏侧边栏组件不显示！");
                        }
                    }
                    else {
                        utils.showLog("warn:" + "配置中没有is_vertical_game参数，更多游戏侧边栏组件不显示！");
                    }
                }
                else {
                    utils.showLog("warn:" + "当前平台不支持游戏内跳转，更多游戏侧边栏组件不显示！");
                }
            }
            else if (PlatUtils.IsDouyin) {
                if (PlatUtils.IsAndroid
                    && utils.isSupportnavigateToMiniGame()) {
                    if (utils.Tool_Douyin
                        && utils.Tool_Douyin.ServerConfig
                        && utils.Tool_Douyin.ServerConfig.is_vertical_game) {
                        if (utils.Tool_Douyin.ServerConfig.is_vertical_game == "true") {
                            return true;
                        }
                        else {
                            utils.showLog("warn:" + "is_vertical_game参数为false，更多游戏侧边栏组件不显示！");
                        }
                    }
                    else {
                        utils.showLog("warn:" + "配置中没有is_vertical_game参数，更多游戏侧边栏组件不显示！");
                    }
                }
                else {
                    utils.showLog("warn:" + "当前平台不支持游戏内跳转，更多游戏侧边栏组件不显示！");
                }
            }
            else if (PlatUtils.IsBaidu) {
                if (utils.isSupportnavigateToMiniGame()) {
                    if (utils.Tool_Baidu
                        && utils.Tool_Baidu.ServerConfig
                        && utils.Tool_Baidu.ServerConfig.is_vertical_game) {
                        if (utils.Tool_Baidu.ServerConfig.is_vertical_game == "true") {
                            return true;
                        }
                        else {
                            utils.showLog("warn:" + "is_vertical_game参数为false，更多游戏侧边栏组件不显示！");
                        }
                    }
                    else {
                        utils.showLog("warn:" + "配置中没有is_vertical_game参数，更多游戏侧边栏组件不显示！");
                    }
                }
                else {
                    utils.showLog("warn:" + "当前平台不支持游戏内跳转，更多游戏侧边栏组件不显示！");
                }
            }
            else if (PlatUtils.IsQQ) {
                if (utils.isSupportnavigateToMiniGame()) {
                    if (utils.Tool_QQ
                        && utils.Tool_QQ.ServerConfig
                        && utils.Tool_QQ.ServerConfig.is_vertical_game) {
                        if (utils.Tool_QQ.ServerConfig.is_vertical_game == "true") {
                            return true;
                        }
                        else {
                            utils.showLog("warn:" + "is_vertical_game参数为false，更多游戏侧边栏组件不显示！");
                        }
                    }
                    else {
                        utils.showLog("warn:" + "配置中没有is_vertical_game参数，更多游戏侧边栏组件不显示！");
                    }
                }
                else {
                    utils.showLog("warn:" + "当前平台不支持游戏内跳转，更多游戏侧边栏组件不显示！");
                }
            }
            else if (PlatUtils.Is4399) {
                return true;
            }
            else if (PlatUtils.IsNativeAndroid) {
                if (utils.Tool_Native && utils.config.nativeAndroidConfig.channel == "oppo") {
                    utils.showLog("原生OPPO渠道，默认开启更多游戏！");
                    return true;
                }
                if (utils.Tool_Native
                    && utils.Tool_Native.ServerConfig
                    && utils.Tool_Native.ServerConfig.is_vertical_game) {
                    if (utils.Tool_Native.ServerConfig.is_vertical_game == "true") {
                        return true;
                    }
                    else {
                        utils.showLog("warn:" + "is_vertical_game参数为false，更多游戏侧边栏组件不显示！");
                    }
                }
                else {
                    utils.showLog("warn:" + "配置中没有is_vertical_game参数，更多游戏侧边栏组件不显示！");
                }
            }
            return false;
        }
        showVerticalRecommentPanel(params = null) {
            if (!this._isConfigInit) {
                utils.showLog("warn:" + "组件配置未初始化!");
                return null;
            }
            if (!this.isVerticalRecommentPanel())
                return null;
            if (this.config.otherconfig.verticalRecommentPanel) {
                let node = cc.instantiate(this.config.otherconfig.verticalRecommentPanel);
                if (node) {
                    cc.addToStage(node, 9999);
                    if (params) {
                        if (params.scale != null) {
                            node.scale(params.scale, params.scale);
                        }
                        if (params.top != null) {
                            node.top = params.top;
                        }
                        else if (params.bottom != null) {
                            node.bottom = params.bottom;
                        }
                        if (params.left != null) {
                            node.left = params.left;
                        }
                        else if (params.right != null) {
                            node.right = params.right;
                        }
                        if (params.position != null) {
                            node.x = params.position.x;
                            node.y = params.position.y;
                        }
                    }
                    return node;
                }
            }
            else {
                utils.showLog("warn:" + "未找到预制体 verticalRecommentPanel, 请查看CommonUtils组件上是否赋值！");
            }
            return null;
        }
        isShowPrivacyWidget() {
            if (this.Tool_Broswer)
                return true;
            if (PlatUtils.IsNativeAndroid) {
                utils.showLog("utils.Tool_Native.ServerConfig.is_privacy......" + utils.Tool_Native.ServerConfig.is_privacy);
                if (utils.Tool_Native != null && utils.Tool_Native != undefined) {
                    if (utils.Tool_Native.ServerConfig != null && utils.Tool_Native.ServerConfig != undefined) {
                        if (utils.Tool_Native.ServerConfig.is_privacy != null && utils.Tool_Native.ServerConfig.is_privacy != undefined) {
                            if (utils.Tool_Native.ServerConfig.is_privacy == "true") {
                                return true;
                            }
                            else {
                                utils.showLog("warn:" + "is_privacy参数为false，用户协议挂件组件不显示！");
                            }
                        }
                        else {
                            utils.showLog("warn:" + "配置中没有is_privacy参数，更用户协议挂件组件不显示！");
                        }
                    }
                    else {
                        utils.showLog("warn:" + "当前平台不支持游戏内跳转，更用户协议挂件组件不显示！");
                    }
                }
                else {
                    utils.showLog("warn:" + "当前平台不支持游戏内跳转，更用户协议挂件组件不显示！");
                }
            }
            return false;
        }
        showPrivacyWidget(params = null) {
            if (this.isShowPrivacyWidget()) {
                let view = cc.instantiate(this.config.otherconfig.privacyPolicy);
                if (this._privacyWidget && cc.isValid(this._privacyWidget)) {
                    this._privacyWidget.destroy();
                    this._privacyWidget = null;
                }
                this._privacyWidget = view;
                let text = view.getChildByName("text");
                if (params) {
                    if (params.parent != null) {
                        params.parent.addChild(this._privacyWidget, 9999);
                    }
                    else {
                        cc.addToStage(this._privacyWidget, 9999);
                    }
                    if (params.color != null) {
                        text.color = params.color;
                    }
                    if (params.top != null) {
                        this._privacyWidget.top = params.top;
                    }
                    else if (params.bottom != null) {
                        this._privacyWidget.bottom = params.bottom;
                    }
                    if (params.left != null) {
                        this._privacyWidget.left = params.left;
                    }
                    else if (params.right != null) {
                        this._privacyWidget.right = params.right;
                    }
                }
                return this._privacyWidget;
            }
            else {
                utils.showLog("warn:" + "不可显示更多游戏侧边栏");
                return null;
            }
        }
        hidePrivacyWidget() {
            if (this._privacyWidget && cc.isValid(this._privacyWidget)) {
                this._privacyWidget.destroy();
                this._privacyWidget = null;
            }
        }
        reSizeObject(view, params) {
            if (params) {
                if (params.centerX) {
                    view.centerX = params.centerX;
                }
                if (params.left) {
                    view.left = params.left;
                }
                else if (params.right) {
                    view.right = params.right;
                }
                if (params.top) {
                    view.top = params.top;
                }
                else if (params.bottom) {
                    view.bottom = params.bottom;
                }
                if (params.scale) {
                    view.scale(params.scale, params.scale);
                }
            }
        }
        showScaleAction(videoBtn, normalBtn, changeBtn = true, showHand = true, location = BannerLocation.None) {
            if (changeBtn) {
                if (!cc.isValid(normalBtn) || !cc.isValid(videoBtn))
                    return;
            }
            else {
                if (!cc.isValid(videoBtn))
                    return;
            }
            if (PlatUtils.IsTest) {
                utils.ServerConfig.btn_show_scale = "true";
                utils.ServerConfig.change_btn_position = "true";
                utils.ServerConfig.over_page_change_btn = "false";
                utils.ServerConfig.over_page_scale_btn = "false";
            }
            let scaleNode = videoBtn;
            if (utils.ServerConfig && utils.ServerConfig.change_btn_position && utils.ServerConfig.change_btn_position == "true" && changeBtn == true) {
                let changePosition = true;
                if (location == BannerLocation.Over) {
                    if (utils.ServerConfig.over_page_change_btn && utils.ServerConfig.over_page_change_btn == "false") {
                        changePosition = false;
                        utils.showLog("结算页面按钮配置不切换位置！");
                    }
                }
                if (changePosition) {
                    let rand = Math.floor(Math.random() * 2 + 1);
                    let videoPos = { x: videoBtn.x, y: videoBtn.y };
                    let normalPos = { x: normalBtn.x, y: normalBtn.y };
                    if (rand % 2 == 0) {
                        normalBtn.x = videoPos.x;
                        normalBtn.y = videoPos.y;
                        videoBtn.x = normalPos.x;
                        videoBtn.y = normalPos.y;
                    }
                    else {
                        scaleNode = videoBtn;
                        normalBtn.x = normalPos.x;
                        normalBtn.y = normalPos.y;
                        videoBtn.x = videoPos.x;
                        videoBtn.y = videoPos.y;
                    }
                    scaleNode = normalBtn.y < videoBtn.y ? normalBtn : videoBtn;
                }
            }
            if (utils.ServerConfig && utils.ServerConfig.btn_show_scale && utils.ServerConfig.btn_show_scale == "true") {
                if (location == BannerLocation.Over &&
                    utils.ServerConfig.over_page_scale_btn &&
                    utils.ServerConfig.over_page_scale_btn == "false") {
                    utils.showLog("结算页面按钮配置不缩放按钮！");
                    return;
                }
                if (videoBtn) {
                    Laya.Tween.clearTween(videoBtn);
                    videoBtn.scale(1, 1);
                }
                if (normalBtn) {
                    Laya.Tween.clearTween(normalBtn);
                    normalBtn.scale(1, 1);
                }
                let scaleMax = () => {
                    Laya.Tween.to(scaleNode, { scaleX: this.maxScale, scaleY: this.maxScale }, this.runTime, null, Laya.Handler.create(this, () => {
                        if (!scaleNode)
                            return;
                        Laya.Tween.to(scaleNode, { scaleX: this.minScale, scaleY: this.minScale }, this.runTime, null, Laya.Handler.create(this, () => {
                            if (!scaleNode)
                                return;
                            scaleMax();
                        }));
                    }));
                };
                scaleMax();
                if (showHand) {
                    if (videoBtn) {
                        let child = videoBtn.parent.getChildByName("helpHand");
                        if (child) {
                            child.destroy();
                        }
                    }
                    if (normalBtn) {
                        let child = normalBtn.parent.getChildByName("helpHand");
                        if (child) {
                            child.destroy();
                        }
                    }
                    if (this.config.otherconfig.helpHand) {
                        let hand = cc.instantiate(this.config.otherconfig.helpHand);
                        hand.x = scaleNode.x + scaleNode.width / 2;
                        hand.y = scaleNode.y + 25;
                        hand.zIndex = 99999;
                        console.log(hand);
                        scaleNode.parent.addChild(hand);
                    }
                }
            }
        }
        reportNativeAdClick() {
            if ((new Date().getTime() - this._lastReportAdTime) / 1000 > 3) {
                this._lastReportAdTime = new Date().getTime();
                Laya.stage.event(YZ_Constant.YZ_NativeAdClick);
                this.showLog("上报原生广告点击！");
            }
            else {
                this.showLog("上报原生广告点击间隔时间小于3秒！");
            }
        }
    }

    class UIChest extends Laya.Script {
        constructor() {
            super(...arguments);
            this.closeCB = null;
            this.chests = [];
            this.openBoxNumber = 0;
            this.ranbox = 0;
            this.isSkinReward = false;
            this.goldBestReward = 500;
            this.tweenIsEnd = false;
        }
        onAwake() {
            this.chestBox = this.owner.getChildByName("chestBox");
            this.chestBox.active = false;
            for (let i = 0; i < 9; i++) {
                let chest = this.chestBox.getChildByName('chest' + i);
                chest.visible = true;
                this.chests.push(chest);
                chest.on(Laya.Event.CLICK, this, this.onChestClick, [i]);
            }
            this.keyTip = this.chestBox.getChildByName("keyTip");
            this.videoTip = this.chestBox.getChildByName("watchVideoTip");
            this.back = this.owner.getChildByName("back");
            this.showStage = this.owner.getChildByName("showStage");
            this.icon = this.showStage.getChildByName("icon");
            this.glow = this.showStage.getChildByName("glow");
            DataManager.instance.showFBInterstitialAd();
            if (utils)
                if (utils.ServerConfig.isInterstitial == "true" || utils.ServerConfig.isInterstitial) {
                    console.log('调用插屏广告');
                    utils.adManager.ShowInterstitial();
                }
            let tryGame = null;
            if (utils)
                tryGame = utils.adManager.showNativeTryGameWidget({ left: 0, scale: 1 });
            this.fitUI();
            if (tryGame) {
                tryGame.scale(0.6, 0.6);
                tryGame.x = this.back.x;
                tryGame.y = this.back.y - 100;
                tryGame.zOrder = 994;
            }
            this.addEvent();
        }
        onStart() {
            Tools.showBanner(true, BannerLocation.Over);
            this.tweenIsEnd = true;
            this.ranbox = Math.floor(Math.random() * 8);
            this.openBoxNumber = 0;
            this.onUpdateBottom();
            if (UIMain.instance.UIChestId == 6) {
                this.isSkinReward = true;
                this.init3D();
                this.refresh3D(UIMain.instance.UIChestId);
            }
            else {
                this.isSkinReward = false;
                this.refresh2D();
            }
        }
        init3D() {
            this.roleScene = new Laya.Scene3D();
            this.owner.addChild(this.roleScene);
            this.roleScene.zOrder = 999;
            this.roleScene.ambientColor = new Laya.Vector3(0.4, 0.4, 0.4);
            var camera = (this.roleScene.addChild(new Laya.Camera(0, 0.1, 100)));
            camera.clearFlag = 2;
            camera.transform.translate(new Laya.Vector3(0, 2, 6));
            let ratio = 65 * (0.5 - Laya.stage.width / Laya.stage.height);
            camera.transform.rotationEuler = new Laya.Vector3(-40 + ratio, 0, 0);
            var directionLight = this.roleScene.addChild(new Laya.DirectionLight());
            directionLight.color = new Laya.Vector3(0.7, 0.7, 0.7);
            directionLight.transform.translate(new Laya.Vector3(0, 0, 0));
            directionLight.transform.rotationEuler = new Laya.Vector3(-45, 0, 0);
            this.rolePlaneRotate = new Laya.Sprite3D();
            this.roleScene.addChild(this.rolePlaneRotate);
            this.rolePlane = new Laya.MeshSprite3D();
            this.rolePlaneRotate.addChild(this.rolePlane);
        }
        refresh2D() {
            let gold = Laya.Pool.getItemByCreateFun("goldReward", UIMain.instance.goldReward.create, UIMain.instance.goldReward);
            gold.pos(this.icon.x, this.icon.y);
            gold.scale(1.5, 1.5);
            this.showStage.addChild(gold);
            gold.getChildByName("number").text = this.goldBestReward.toString();
        }
        refresh3D(id) {
            if (this.icon.visible) {
                this.rolePlane.active = true;
                Laya.Sprite3D.load("res/scenes/LayaScene_prefabs/Conventional/player" + id + ".lh", Laya.Handler.create(this, (sp) => {
                    this.rolePlane.removeChildren();
                    let node = (sp.clone());
                    this.rolePlane.addChild(node);
                    node.getChildByName('tail').active = false;
                    for (let i = 2; i < node.numChildren; i++) {
                        if (node.getChildAt(i)) {
                            node.getChildAt(i).active = false;
                        }
                    }
                    node.transform.localRotationY = -180;
                    node.transform.localPosition = new Laya.Vector3(0, -2, 0);
                    this.rolePlane.transform.scale = new Laya.Vector3(1, 1, 1);
                }));
            }
        }
        fitUI() {
            let gap = Laya.stage.height / Laya.stage.width > 2 ? 300 : 200;
            this.chestBox.scaleX = Laya.stage.width / 730;
            this.chestBox.x = Laya.stage.width / 2;
            this.chestBox.scaleY = this.chestBox.scaleX;
            this.chestBox.y = Laya.stage.height - this.chestBox.height + 120;
            this.back.x = 0;
            this.back.y = this.chestBox.y - gap;
            this.showStage.x = Laya.stage.width / 2;
            this.showStage.y = 0;
            this.glow.y = Laya.stage.height / Laya.stage.width > 2 ? 300 : 200;
        }
        addEvent() {
            Tools.AddClickEvent(this.back, this, this.onBackClick, this.back.scaleX);
        }
        onBackClick() {
            if (this.closeCB) {
                this.closeCB();
            }
            if (utils)
                utils.adManager.hideNativeTryGameWidget();
            this.owner.removeSelf();
            this.owner.destroy();
            UIMain.instance.showNativeTryGameWidgetByEnd();
        }
        onChestClick(index) {
            let self = this;
            if (self.chests[index]) {
                if (!self.tweenIsEnd) {
                    return;
                }
                Tools.showBanner(true, BannerLocation.Over);
                if (self.openBoxNumber <= 3 && GData.curKey > 0) {
                    GData.curKey--;
                    self.openChest(index);
                }
                else {
                    let cb = function () {
                        self.openChest(index);
                    };
                    Tools.watchVideo(cb);
                }
            }
        }
        onUpdate() {
            if (this.glow) {
                this.glow.rotation++;
            }
        }
        openChest(index) {
            let self = this;
            this.tweenIsEnd = false;
            Laya.Tween.to(self.chests[index], { scaleX: 0, scaleY: 0 }, 500, Laya.Ease.elasticInOut, Laya.Handler.create(this, () => {
                self.chests[index].visible = false;
                if (index == self.ranbox && UIMain.instance.skinReward) {
                    if (self.isSkinReward) {
                        let skin = Laya.Pool.getItemByCreateFun("skinReward", UIMain.instance.skinReward.create, UIMain.instance.skinReward);
                        skin.pos(self.chests[index].x, self.chests[index].y - 20);
                        skin.scale(0, 0);
                        this.chestBox.addChild(skin);
                        skin.getChildByName("skin").skin = 'skinicon/skin' + UIMain.instance.UIChestId + '.png';
                        Laya.timer.loop(10, this, () => {
                            if (skin.getChildByName("glow")) {
                                skin.getChildByName("glow").rotation++;
                            }
                        });
                        Laya.Tween.to(skin, { scaleX: 1, scaleY: 1 }, 300, Laya.Ease.elasticInOut, Laya.Handler.create(this, () => {
                            this.tweenIsEnd = true;
                            DataManager.instance.curPlayerID = UIMain.instance.UIChestId;
                            DataManager.instance.buyFaceByID(UIMain.instance.UIChestId);
                            Tools.showTip("Get Best Reward");
                        }));
                    }
                    else {
                        let gold = Laya.Pool.getItemByCreateFun("goldReward", UIMain.instance.goldReward.create, UIMain.instance.goldReward);
                        gold.pos(self.chests[index].x, self.chests[index].y - 20);
                        gold.scale(0, 0);
                        this.chestBox.addChild(gold);
                        gold.getChildByName("number").text = this.goldBestReward.toString();
                        Laya.Tween.to(gold, { scaleX: 1, scaleY: 1 }, 300, Laya.Ease.elasticInOut, Laya.Handler.create(this, () => {
                            this.tweenIsEnd = true;
                            GData.curTotalGold += this.goldBestReward;
                            Tools.showTip("Get " + this.goldBestReward + " Coins");
                            Laya.stage.event("onUpdateGold");
                        }));
                    }
                }
                else {
                    let gold = Laya.Pool.getItemByCreateFun("goldReward", UIMain.instance.goldReward.create, UIMain.instance.goldReward);
                    gold.pos(self.chests[index].x, self.chests[index].y - 20);
                    gold.scale(0, 0);
                    this.chestBox.addChild(gold);
                    let ranReward = Math.floor(Math.random() * 20) + 10;
                    gold.getChildByName("number").text = ranReward.toString();
                    Laya.Tween.to(gold, { scaleX: 1, scaleY: 1 }, 300, Laya.Ease.elasticInOut, Laya.Handler.create(this, () => {
                        this.tweenIsEnd = true;
                        GData.curTotalGold += ranReward;
                        Tools.showTip("Get " + ranReward + " Coins");
                        Laya.stage.event("onUpdateGold");
                    }));
                }
            }));
            Laya.stage.event("onUpdateKey");
            self.openBoxNumber++;
            self.onUpdateBottom();
        }
        onUpdateBottom() {
            this.keyTip.visible = GData.curKey > 0 && this.openBoxNumber < 3;
            ;
            this.videoTip.visible = !this.keyTip.visible;
            for (let i = 0; i < 9; i++) {
                if (this.chestBox.getChildByName("chest" + i).getChildByName("video")) {
                    this.chestBox.getChildByName("chest" + i).getChildByName("video").visible = !this.keyTip.visible;
                }
            }
            if (GData.curKey <= 0 || this.openBoxNumber >= 3) {
                if (utils) {
                    utils.adManager.hideNativeTryGameWidget();
                    utils.showSkipBtn(this.back);
                    let tryGame = utils.adManager.showNativeTryGameWidget({ right: 0, scale: 1 });
                    if (tryGame) {
                        tryGame.scale(0.6, 0.6);
                        tryGame.x = Laya.stage.width - (tryGame.width * 0.6);
                        tryGame.y = this.chestBox.y - (tryGame.height * 0.6);
                        tryGame.zOrder = 994;
                    }
                }
                else {
                    this.back.visible = true;
                }
            }
            else {
                this.back.visible = false;
            }
            if (this.keyTip.getChildByName("number")) {
                this.keyTip.getChildByName("number").text = GData.curKey.toString();
            }
        }
    }

    var adType;
    (function (adType) {
        adType[adType["banner"] = 0] = "banner";
        adType[adType["rewardVideo"] = 1] = "rewardVideo";
        adType[adType["splash"] = 2] = "splash";
        adType[adType["fullScreenInterstitial"] = 3] = "fullScreenInterstitial";
    })(adType || (adType = {}));
    class XiaoMiPack {
        static showAd(type) {
            console.log('showAd');
            if (Laya.Browser.onAndroid && window["PlatformClass"] && window["PlatformClass"].createClass("demo.mi.JavaCallTs")) {
                console.log('在安卓下');
                var Test = window["PlatformClass"].createClass("demo.mi.JavaCallTs");
                Test.call("test", '我是JS穿过来的');
            }
        }
        static AndroidCallTs(str) {
            console.log('Test AndroidCallTs:' + str);
        }
    }
    if (Laya.Browser.window) {
        Laya.Browser.window.XiaoMiPack = XiaoMiPack;
    }

    class UIMain extends Laya.Script {
        constructor() {
            super(...arguments);
            this.startX = 0;
            this.startY = 0;
            this.maskList = [];
            this.levelList = [];
            this.operationTimes = 0;
            this.UIChestId = 0;
            this.UITestId = -1;
            this.isDown1 = false;
            this.isRestart = false;
            this.isTimeKeep = false;
            this.isDown = false;
        }
        onAwake() {
            UIMain.instance = this;
            if (utils) {
                utils.registerServerInitEvent(function () {
                }, this);
            }
            this.levelBox = this.owner.getChildByName("levelbox");
            this.beginBox = this.owner.getChildByName("beginBox");
            this.novice = this.beginBox.getChildByName('novice');
            this.track = this.novice.getChildByName('track');
            this.hand = this.track.getChildByName("hand");
            this.tip = this.novice.getChildByName("tip");
            this.setbox = this.beginBox.getChildByName('setbox');
            this.set = this.setbox.getChildByName('set');
            this.box = this.setbox.getChildByName('box');
            this.sound = this.box.getChildByName("sound");
            this.shake = this.box.getChildByName("shake");
            this.soundSwitch = this.sound.getChildByName("switch");
            this.shakeSwitch = this.shake.getChildByName("switch");
            this.goldBox = this.beginBox.getChildByName("goldbox");
            this.goldNumber = this.goldBox.getChildByName("goldnumber");
            this.keyBox = this.beginBox.getChildByName("keybox");
            this.keyNumber = this.keyBox.getChildByName("keynumber");
            this.skinShop = this.beginBox.getChildByName("skinshop");
            this.chestTipBox = this.beginBox.getChildByName("chesttipbox");
            this.signBox = this.beginBox.getChildByName("signbox");
            this.turntableBox = this.beginBox.getChildByName("turntablebox");
            this.moregoldBox = this.beginBox.getChildByName("moregoldbox");
            this.chestTipGlow = this.beginBox.getChildByName("chesttipglow");
            this.gameBox = this.owner.getChildByName("gameBox");
            this.clear = this.gameBox.getChildByName("clear");
            this.touch = this.gameBox.getChildByName('touch');
            this.skip = this.gameBox.getChildByName("skip");
            this.clockBox = this.gameBox.getChildByName("clockBox");
            this.minute = this.clockBox.getChildByName("minute");
            this.second = this.clockBox.getChildByName("second");
            this.endBox = this.owner.getChildByName('endBox');
            this.levelTip = this.endBox.getChildByName("levelTip");
            this.level = this.levelTip.getChildByName("level");
            this.levelNum = this.levelTip.getChildByName("levelNum");
            this.rewardBox = this.endBox.getChildByName("rewardBox");
            this.loseBox = this.endBox.getChildByName("loseBox");
            this.curLevelReward = this.rewardBox.getChildByName("curLevelReward").getChildByName("reward");
            this.doubleGet = this.rewardBox.getChildByName("doubleget");
            this.singleGet = this.rewardBox.getChildByName("singleget");
            this.backMain = this.loseBox.getChildByName("backMain");
            this.restart = this.loseBox.getChildByName("restart");
            Laya.loader.load("prefab/score.json", Laya.Handler.create(this, (prefab) => {
                this.score = new Laya.Prefab();
                this.score.json = prefab;
            }));
            Laya.loader.load("prefab/goldReward.json", Laya.Handler.create(this, (prefab) => {
                this.goldReward = new Laya.Prefab();
                this.goldReward.json = prefab;
            }));
            Laya.loader.load("prefab/keyReward.json", Laya.Handler.create(this, (prefab) => {
                this.keyReward = new Laya.Prefab();
                this.keyReward.json = prefab;
            }));
            Laya.loader.load("prefab/skinReward.json", Laya.Handler.create(this, (prefab) => {
                this.skinReward = new Laya.Prefab();
                this.skinReward.json = prefab;
            }));
            this.fitUI();
            if (utils) {
                this.moreGame = utils.showMoreGamesSidePanel({ right: 0 });
                if (this.moreGame != null && this.moreGame) {
                    console.log('moregame', this.moreGame, this.keyBox);
                    this.moreGame.pos(this.keyBox.x - 115, this.keyBox.y + 80);
                    this.moreGame.scale(0.7, 0.7);
                    this.moreGame.zOrder = 994;
                }
            }
            if (utils) {
                let privacy = utils.showPrivacyWidget({ group: "default", right: 0 });
                if (privacy) {
                    privacy.x = Laya.stage.width - privacy.width * 0.7;
                    privacy.y = Laya.stage.height / 2 - 60 - (privacy.height * 0.7);
                    privacy.scale(0.7, 0.7);
                    privacy.zOrder = 994;
                }
            }
            this.addEvent();
            Tools.playBGM(SOUND_TYPE.BGM);
        }
        UIChestRandomId() {
            let playerArray = [6];
            playerArray = playerArray.filter((id) => { return DataManager.instance.getPlayerFaceIDs().indexOf(id) < 0; });
            return playerArray[Math.floor(Math.random() * playerArray.length)];
        }
        UITestRandomId() {
            let playerArray = [1, 2, 3, 4, 5, 8, 9, 10, 11];
            playerArray = playerArray.filter((id) => { return DataManager.instance.getPlayerFaceIDs().indexOf(id) < 0; });
            return playerArray[Math.floor(Math.random() * playerArray.length)];
        }
        onStart() {
            for (let index = 1; index < 6; index++) {
                let mask = this.levelBox.getChildByName("mask" + index);
                let level = this.levelBox.getChildByName(index.toString());
                this.maskList.push(mask);
                this.levelList.push(level);
            }
            this.beginBox.active = false;
            this.levelBox.active = false;
            this.gameBox.active = false;
            this.endBox.active = false;
        }
        onUpdateGold() {
            this.goldNumber.value = GData.curTotalGold.toString();
        }
        onUpdateKey() {
            this.keyNumber.value = GData.curKey.toString();
        }
        addEvent() {
            Laya.stage.on('onUpdateGold', this, this.onUpdateGold);
            Laya.stage.on('onUpdateKey', this, this.onUpdateKey);
            Tools.AddClickEvent(this.moregoldBox, this, this.onMoreGoldBoxClick, this.moregoldBox.scaleX);
            Tools.AddClickEvent(this.set, this, this.onSetClick, this.set.scaleX);
            Tools.AddClickEvent(this.sound, this, this.onSoundClick, this.sound.scaleX);
            Tools.AddClickEvent(this.shake, this, this.onShakeClick, this.shake.scaleX);
            Tools.AddClickEvent(this.skip, this, this.onSkipClick, this.skip.scaleX);
            Tools.AddClickEvent(this.chestTipBox, this, this.onChestTipBoxClick, this.chestTipBox.scaleX);
            Tools.AddClickEvent(this.doubleGet, this, this.onDoubleGetClick, this.doubleGet.scaleX);
            Tools.AddClickEvent(this.singleGet, this, this.onSingleGetClick, this.singleGet.scaleX);
            Tools.AddClickEvent(this.skinShop, this, this.onSkinShopClick, this.skinShop.scaleX);
            Tools.AddClickEvent(this.signBox, this, this.onSignBoxClick, this.signBox.scaleX);
            Tools.AddClickEvent(this.turntableBox, this, this.onTurntableBoxClick, this.turntableBox.scaleX);
            Tools.AddClickEvent(this.backMain, this, this.onBackMainClick, this.backMain.scaleX);
            Tools.AddClickEvent(this.restart, this, this.onRestartClick, this.restart.scaleX);
            this.novice.on(Laya.Event.MOUSE_DOWN, this, this.onGameDown);
            this.novice.on(Laya.Event.MOUSE_MOVE, this, this.gameStart);
            this.novice.on(Laya.Event.MOUSE_UP, this, this.onGameUp);
            this.touch.on(Laya.Event.MOUSE_DOWN, this, this.onDownStage);
            this.touch.on(Laya.Event.MOUSE_MOVE, this, this.onMoveStage);
            this.touch.on(Laya.Event.MOUSE_UP, this, this.onUpStage);
        }
        onGameDown() {
            this.isDown1 = true;
        }
        onGameUp() {
            this.isDown1 = false;
        }
        onMoreGoldBoxClick() {
            let cb = function () {
                GData.curTotalGold += 100;
                Laya.stage.event("onUpdateGold");
                Tools.showTip("Get 100 Coins");
            };
            Tools.watchVideo(cb);
        }
        showNativeTryGameWidget() {
        }
        initUiMain() {
            Tools.showMoreGameAd(true);
            if (this.isRestart) {
                this.gameStart();
                return;
            }
            Tools.showGameAd(true, this.signBox.y - 350, this.signBox.x - 80);
            Laya.timer.clear(this, this.initUiMain);
            Laya.timer.loop(1000, this, () => {
                Tools.joggle(this.chestTipBox);
            });
            DataManager.instance.isRealyBegin = false;
            if (this.signBox) {
                let day = (new Date()).getDate();
                let isAutoShow;
                if (utils)
                    isAutoShow = utils.checkAutoSign();
                let isSignedToday = DataManager.instance.signDays.indexOf(day) > -1;
                let signedDays = DataManager.instance.signDays.length;
                if (!isSignedToday && signedDays <= 7 && isAutoShow) {
                    this.onSignBoxClick();
                }
            }
            Tools.addDestop(true);
            Tools.showBanner(true, BannerLocation.Home);
            this.operationTimes = 0;
            Laya.stage.event("onUpdateGold");
            Laya.stage.event("onUpdateKey");
            this.refreshLevelBox();
            this.beginBox.visible = true;
            this.levelBox.visible = true;
            this.gameBox.visible = false;
            this.endBox.visible = false;
            this.showNativeTryGameWidget();
            this.levelNum.text = GData.curLevel.toString();
            this.NoviceAnimation();
            this.UITestId = this.UITestRandomId();
            Laya.Sprite3D.load("res/scenes/LayaScene_prefabs/Conventional/player" + this.UITestId + ".lh", null);
        }
        fitUI() {
            this.goldBox.x = 0;
            this.goldBox.y = 100;
            this.keyBox.x = Laya.stage.width;
            this.keyBox.y = 100;
            this.levelBox.x = Laya.stage.width / 2;
            this.levelBox.y = 100;
            this.skip.x = Laya.stage.width - 100;
            this.skip.y = 300;
            this.clockBox.x = Laya.stage.width / 2;
            this.clockBox.y = 200;
            this.levelTip.x = Laya.stage.width / 2;
            this.levelTip.y = 100;
            this.novice.x = Laya.stage.width / 2;
            this.novice.y = Laya.stage.height - 300;
            this.skinShop.x = Laya.stage.width;
            this.skinShop.y = Laya.stage.height / 2 + 100;
            this.skinShop.y = Laya.stage.height / 2 + 200;
            this.curLevelReward.parent.x = Laya.stage.width / 2;
            this.curLevelReward.parent.y = 200;
            this.doubleGet.x = Laya.stage.width / 2;
            this.singleGet.x = Laya.stage.width / 2;
            this.doubleGet.y = Laya.stage.height - 400;
            this.singleGet.y = this.doubleGet.y + 120;
            this.setbox.x = 60;
            this.setbox.y = this.goldBox.y + 100;
            this.signBox.x = Laya.stage.width - this.signBox.width / 2;
            this.signBox.y = Laya.stage.height / 2 - 50;
            this.moregoldBox.x = 60;
            this.moregoldBox.y = this.setbox.y + 200;
            this.turntableBox.x = 60;
            this.turntableBox.y = this.moregoldBox.y + 150;
            this.chestTipBox.x = 60;
            this.chestTipBox.y = this.turntableBox.y + 150 + this.chestTipBox.height / 2;
            this.chestTipGlow.pos(this.chestTipBox.x, this.chestTipBox.y);
            this.backMain.x = Laya.stage.width / 2 - 50;
            this.backMain.y = Laya.stage.height - 300;
            this.restart.x = Laya.stage.width / 2 + 50;
            this.restart.y = Laya.stage.height - 300;
        }
        onBackMainClick() {
            this.isRestart = false;
            GData.curLevel--;
            this.onEndClick();
        }
        onRestartClick() {
            this.isRestart = true;
            GData.curLevel--;
            this.onEndClick();
        }
        onTimeKeeping() {
            Laya.timer.clear(this, this.onTimeKeeping);
            this.gameTime = 90;
            Laya.timer.loop(1000, this, () => {
                if (this.resurgence || !DataManager.instance.isRealyBegin || GameScene.instance.player.isWin) {
                    return;
                }
                if (this.gameTime > 0) {
                    if (!this.isTimeKeep) {
                        return;
                    }
                    this.gameTime--;
                    this.minute.text = "0" + Math.floor(this.gameTime / 60);
                    let sec = this.gameTime % 60;
                    if (sec < 10) {
                        this.second.text = ":0" + Math.floor(this.gameTime % 60);
                    }
                    else {
                        this.second.text = ":" + Math.floor(this.gameTime % 60);
                    }
                }
                else {
                    if (!GameScene.instance.player.isSprint && DataManager.instance.isRealyBegin) {
                        this.resurgence = Tools.ShowUI("prefab/UIResurgence.json", 994);
                    }
                }
            });
        }
        onTurntableBoxClick() {
            Tools.ShowUI("prefab/UITurntable.json", 994);
        }
        async onSignBoxClick() {
            let node = await Tools.CreateUI('prefab/UISign.json');
            if (!DataManager.instance.isRealyBegin) {
                node.zOrder = 994;
                Laya.stage.addChild(node);
            }
        }
        onChestTipBoxClick() {
            Tools.ShowUI("prefab/UITipChest.json", 994);
        }
        onSkinShopClick() {
            XiaoMiPack.showAd(adType.banner);
            Tools.ShowUI("prefab/UIShop.json", 994);
            Tools.showBanner(true, BannerLocation.Skin);
        }
        onSoundClick() {
            this.soundSwitch.visible = !this.soundSwitch.visible;
            DataManager.instance.soundOpen = this.soundSwitch.visible ? 0 : 1;
            if (DataManager.instance.soundOpen == 1) {
                Tools.playBGM(SOUND_TYPE.BGM);
            }
            else {
                Tools.stopBGM();
            }
        }
        onShakeClick() {
            this.shakeSwitch.visible = !this.shakeSwitch.visible;
            DataManager.instance.shakeOpen = this.shakeSwitch.visible ? 0 : 1;
        }
        onSkipClick() {
            let self = this;
            if (GameScene.instance.player.isMove) {
                return;
            }
            self.isTimeKeep = false;
            let cb = function () {
                if (utils)
                    utils.GameSkip(GData.curLevel.toString());
                GameScene.instance.player.isWin = true;
                GData.curLevelGetGold = 32;
                self.gameOver();
                self.isTimeKeep = true;
            };
            let cl = function () {
                self.isTimeKeep = true;
            };
            Tools.watchVideo(cb, cl);
        }
        onDoubleGetClick() {
            let self = this;
            let cb = function () {
                GData.curTotalGold += GData.curLevelGetGold * 2;
                self.isRestart = false;
                self.onEndClick();
                console.log('选择双倍u领取');
            };
            Tools.watchVideo(cb);
        }
        onSingleGetClick() {
            GData.curTotalGold += GData.curLevelGetGold;
            this.isRestart = false;
            this.onEndClick();
            console.log('点击直接领取');
        }
        refreshLevelBox() {
            for (let index = 0; index < 5; index++) {
                let mask = this.maskList[index];
                let level = this.levelList[index];
                let value = GData.curLevel + index;
                level.value = value.toString();
                mask.visible = value > GData.curLevel;
            }
        }
        NoviceAnimation() {
            let tween = null;
            tween = Laya.Tween.to(this.hand, { x: 200 }, 1000, null, Laya.Handler.create(this, () => {
                this.track.rotation = 90;
                this.hand.rotation = 180;
                Laya.Tween.to(this.hand, { x: 0 }, 1000, null, Laya.Handler.create(this, () => {
                    this.track.rotation = 180;
                    Laya.Tween.to(this.hand, { x: 200 }, 1000, null, Laya.Handler.create(this, () => {
                        this.track.rotation = 90;
                        this.hand.rotation = 0;
                        Laya.Tween.to(this.hand, { x: 20 }, 1000, null, Laya.Handler.create(this, () => {
                            this.track.rotation = 0;
                            this.NoviceAnimation();
                        }));
                    }));
                }));
            }), 0, true);
        }
        gameStart() {
            if (!this.isDown1) {
                return;
            }
            this.isDown1 = false;
            Laya.timer.clear(this, this.gameStart);
            Laya.timer.loop(1000, this, () => {
                Tools.joggle(this.skip);
            });
            Tools.addDestop(false);
            Tools.showMoreGameAd(false);
            DataManager.instance.isRealyBegin = false;
            Tools.ShowUI("prefab/UITest.json", 994);
            if (utils) {
            }
            this.moreGame = null;
            this.resurgence = null;
            this.isTimeKeep = true;
            this.onTimeKeeping();
            this.levelBox.visible = true;
            this.beginBox.visible = false;
            this.gameBox.visible = true;
            this.endBox.visible = false;
            this.UIChestId = this.UIChestRandomId();
            if (utils) {
                let tryGame = utils.adManager.showNativeTryGameWidget({ scale: 1 });
                if (tryGame != null) {
                    tryGame.scale(0.6, 0.6);
                    tryGame.zOrder = 994;
                    tryGame.x = this.skip.x - 510;
                    tryGame.y = this.skip.y - this.skip.width / 2;
                }
            }
            if (this.UIChestId == 6) {
                Laya.Sprite3D.load("res/scenes/LayaScene_prefabs/Conventional/player" + this.UIChestId + ".lh", null);
            }
            Tools.showGameAd(false, 0, 0);
            Tools.showGameAd(true, this.skip.y - 30, 30);
        }
        showNativeTryGameWidgetByEnd() {
            if (!utils)
                return;
            let tryGame = utils.adManager.showNativeTryGameWidget({ scale: 1 });
            if (tryGame != null) {
                tryGame.scale(0.6, 0.6);
                if (GameScene.instance.player.isWin) {
                    tryGame.x = this.doubleGet.x + this.doubleGet.width * 0.5;
                    tryGame.y = this.doubleGet.y;
                }
                else {
                    tryGame.x = Laya.stage.width / 2 + 100;
                    tryGame.y = 100;
                }
            }
        }
        async gameOver() {
            let self = this;
            this.levelBox.visible = false;
            Tools.showGameAd(false, 0, 0);
            Tools.showMoreGameAd(true);
            Tools.showGameAd(true, this.signBox.y - 400, this.signBox.x - 80);
            if (utils)
                utils.adManager.hideNativeTryGameWidget();
            let showGameOver = function () {
                Tools.showBanner(true, BannerLocation.Over);
                if (utils)
                    utils.isShowTryGamesWidget();
                if (GameScene.instance.player.isWin) {
                    if (utils)
                        utils.GameWin(GData.curLevel.toString(), Laya.stage.height / 2 - 300);
                }
                else {
                    if (utils)
                        utils.GameFail(GData.curLevel.toString(), Laya.stage.height / 2 - 300);
                }
                self.rewardBox.visible = GameScene.instance.player.isWin;
                self.loseBox.visible = !GameScene.instance.player.isWin;
                if (self.loseBox.visible) {
                    if (utils)
                        utils.showSkipBtn(self.backMain);
                    else
                        self.backMain.visible = true;
                }
                self.endBox.visible = true;
                if (utils)
                    utils.showSkipBtn(self.singleGet);
                else
                    self.singleGet.visible = true;
            };
            this.gameBox.visible = false;
            this.beginBox.visible = false;
            this.curLevelReward.text = "+" + GData.curLevelGetGold;
            if (GameScene.instance.player.isWin) {
                let node = await Tools.ShowUI("prefab/UIChest.json", 994);
                let cls = node.getComponent(UIChest);
                cls.closeCB = showGameOver;
            }
            else {
                showGameOver();
            }
            Laya.timer.clearAll(this);
        }
        onEndClick() {
            Tools.showMoreGameAd(false);
            Tools.showGameAd(false, 0, 0);
            Laya.timer.clearAll(this);
            if (utils) {
                utils.hideCrossWidget6();
                utils.hideTryGamesWidget();
                utils.adManager.hideNativeTryGameWidget();
            }
            GameScene.instance.initOrChangeScene();
        }
        onSetClick() {
            this.box.visible = !this.box.visible;
        }
        scoreEffect() {
            let self = this;
            let s = Laya.Pool.getItemByCreateFun("score", self.score.create, self.score);
            s.pos(Laya.stage.width / 2, 300);
            s.zOrder = 1000;
            s.stroke = 6;
            s.scaleX = 1;
            s.scaleY = 1;
            s.alpha = 1;
            Laya.stage.addChild(s);
            Laya.Tween.to(s, { y: s.y - 50, scaleX: 0, scaleY: 0, alpha: 0, stroke: 30 }, 1000, null, Laya.Handler.create(this, () => {
                Laya.stage.removeChild(s);
            }));
        }
        onUpdate() {
            if (this.chestTipGlow) {
                this.chestTipGlow.rotation++;
            }
            if (this.skip) {
                this.skip.visible = this.operationTimes >= 0;
            }
            if (GameScene.instance.player && GameScene.instance.player.gameobject && GameScene.instance.player.owner) {
                let z = 0;
                let needChildren = 0;
                if (DataManager.instance.curPart == 1) {
                    z = SData.part1[0].length;
                    needChildren = 2 + DataManager.instance.needChildren1;
                }
                else if (DataManager.instance.curPart == 2) {
                    if (!GameScene.instance.taizi3) {
                        GameScene.instance.addBrick(3);
                        GameScene.instance.addTaizi(3);
                    }
                    z = SData.part1[0].length + SData.part2[0].length;
                    needChildren = 2 + DataManager.instance.needChildren1 + DataManager.instance.needChildren2;
                }
                else if (DataManager.instance.curPart == 3) {
                    if (!GameScene.instance.rainBow && DataManager.instance.needChildren3 > 0) {
                        GameScene.instance.addRainbow();
                    }
                    z = SData.part1[0].length + SData.part2[0].length + SData.part3[0].length;
                    needChildren = 2 + DataManager.instance.needChildren1 + DataManager.instance.needChildren2;
                }
                else {
                    z = 0;
                }
                if (GameScene.instance.player.gameobject.numChildren >= needChildren && !GameScene.instance.player.isMove && DataManager.instance.isForwardPoint) {
                    this.clearEffect(true);
                    DataManager.instance.isForwardPoint = false;
                    Tools.HideChild(GameScene.instance.player.gameobject);
                    GameScene.instance.player.gameobject.transform.position = new Laya.Vector3(4, 0, z);
                    setTimeout(() => {
                        this.clearEffect(false);
                    }, 500);
                }
                if (!GameScene.instance.player.isMove && DataManager.instance.isBackPoint) {
                    DataManager.instance.isBackPoint = false;
                    Tools.ShowChild(GameScene.instance.player.gameobject);
                }
            }
        }
        clearEffect(isShow) {
            if (isShow) {
                Tools.PlaySound(SOUND_TYPE.CLEAR);
            }
            else {
                if (this.clear.visible) {
                    this.clear.visible = false;
                }
                for (let i = 1; i < 4; i++) {
                    if (GameScene.instance["taizi" + i] && GameScene.instance["taizi" + i].getChildByName("clearPlane")) {
                        if (GameScene.instance["taizi" + i].getChildByName("clearPlane").active) {
                            GameScene.instance["taizi" + i].getChildByName("clearPlane").active = false;
                        }
                    }
                }
            }
            if (DataManager.instance.curPart == 1 && GameScene.instance.taizi1.getChildByName("clearPlane")) {
                this.clear.visible = isShow;
                GameScene.instance.taizi1.getChildByName("clearPlane").active = isShow;
            }
            if (DataManager.instance.curPart == 2 && GameScene.instance.taizi2.getChildByName("clearPlane")) {
                this.clear.visible = isShow;
                GameScene.instance.taizi2.getChildByName("clearPlane").active = isShow;
            }
            if (DataManager.instance.curPart == 3 && GameScene.instance.taizi3.getChildByName("clearPlane") && GameScene.instance.player.gameobject.numChildren >= (2 + DataManager.instance.needChildren1 + DataManager.instance.needChildren2 + DataManager.instance.needChildren3)) {
                this.clear.visible = isShow;
                GameScene.instance.taizi3.getChildByName("clearPlane").active = isShow;
            }
        }
        onDownStage(e) {
            console.log('按下');
            this.isDown = true;
            if (GameScene.instance.player.isMove || !DataManager.instance.isRealyBegin) {
                return;
            }
            this.beginBox.visible = false;
            this.gameBox.visible = true;
            this.startX = e.stageX;
            this.startY = e.stageY;
        }
        onMoveStage(e) {
            if (this.isDown == false) {
                return;
            }
            if (!GameScene.instance.player.isMove && DataManager.instance.isRealyBegin) {
                console.log('开始滑动');
                let disX = e.stageX - this.startX;
                let disY = e.stageY - this.startY;
                GameScene.instance.isMoveMouse = true;
                if (Math.abs(disX) > 50) {
                    if (disX > 0) {
                        GameScene.instance.player.freezeXMove = 1;
                        GameScene.instance.player.freezeZMove = 0;
                        GameScene.instance.player.updateMove(Tools.Pathfinding(GameScene.instance.player.gameobject, 2), 2);
                    }
                    else {
                        GameScene.instance.player.freezeXMove = -1;
                        GameScene.instance.player.freezeZMove = 0;
                        GameScene.instance.player.updateMove(Tools.Pathfinding(GameScene.instance.player.gameobject, 1), 1);
                    }
                }
                if (Math.abs(disY) > 50) {
                    if (disY > 0) {
                        GameScene.instance.player.freezeXMove = 0;
                        GameScene.instance.player.freezeZMove = -1;
                        GameScene.instance.player.updateMove(Tools.Pathfinding(GameScene.instance.player.gameobject, 4), 4);
                    }
                    else {
                        GameScene.instance.player.freezeXMove = 0;
                        GameScene.instance.player.freezeZMove = 1;
                        GameScene.instance.player.updateMove(Tools.Pathfinding(GameScene.instance.player.gameobject, 3), 3);
                    }
                }
            }
        }
        onUpStage(e) {
            console.log('抬起');
            this.isDown = false;
        }
    }

    class Player extends Laya.Script {
        constructor() {
            super(...arguments);
            this.moveSpeed = 10;
            this.gameobject = null;
            this.player = null;
            this.canMove = true;
            this.isMove = false;
            this.isWin = false;
            this.time = 0;
            this.freezeXMove = 0;
            this.freezeZMove = 0;
            this.cameraOfffset = 0;
            this.isCamereRotate = false;
            this.isSprint = false;
        }
        onAwake() {
            this.gameobject = this.owner;
            this.player = this.owner.getChildByName("player");
            this.tailEffect = this.owner.getChildByName('tail');
            this.successEffect = this.player.getChildByName("success");
            this.tailEffect.transform.localPositionY = -1;
            this.initPlayer();
        }
        initPlayer() {
            this.isCamereRotate = false;
            this.isWin = false;
            this.isMove = false;
            this.isSprint = false;
            this.gameobject.transform.position = GameScene.instance.bornPoint.clone();
        }
        setPlayerState(state = PlayerState.idle) {
            let ani = this.gameobject.getChildByName("player").getComponent(Laya.Animator);
            if (ani) {
                if (state == PlayerState.idle) {
                    ani.play("Hero_Idle");
                }
                else if (state == PlayerState.left) {
                    ani.play("Hero_MoveLeft");
                }
                else if (state == PlayerState.right) {
                    ani.play("Hero_MoveRight");
                }
                else if (state == PlayerState.refect) {
                    ani.play("Hero_StackReaction");
                }
                else if (state == PlayerState.forward) {
                    ani.play("Hero_MoveFwd");
                }
                else if (state == PlayerState.back) {
                    ani.play("Hero_MoveBwd");
                }
                else {
                    ani.play("Hero_Idle");
                }
            }
        }
        updateMove(destination, direction) {
            if (GameScene.instance.isMoveMouse && !this.isMove) {
                this.isMove = true;
                if (DataManager.instance.curPart == 1) {
                    this.tailEffect.transform.localPositionY = 0;
                }
                else if (DataManager.instance.curPart == 2) {
                    this.tailEffect.transform.localPositionY = DataManager.instance.needChildren1 * 0.3;
                }
                else if (DataManager.instance.curPart == 3) {
                    this.tailEffect.transform.localPositionY = (DataManager.instance.needChildren1 + DataManager.instance.needChildren2) * 0.3;
                }
                this.setPlayerState(direction);
                UIMain.instance.operationTimes++;
                let tempPosition = new Laya.Vector3(this.gameobject.transform.position.x, this.gameobject.transform.position.y, this.gameobject.transform.position.z);
                let dis = Laya.Vector3.distance(this.gameobject.transform.position, destination);
                let speed = 0.02;
                if (DataManager.instance.curPart <= 3) {
                    Tools.ClearPathRepeat(tempPosition, destination, GameScene.instance["brickArray" + DataManager.instance.curPart], 1 / speed);
                }
                Laya.Tween.to(this.gameobject, { position: destination }, dis / speed, null, Laya.Handler.create(this, () => {
                    if (this.isWin) {
                        Tools.PlaySound(SOUND_TYPE.COMPLETE);
                        this.successEffect.active = true;
                        this.isCamereRotate = false;
                        UIMain.instance.gameOver();
                        return;
                    }
                    let addZ = 0;
                    if (DataManager.instance.curPart == 1) {
                        addZ = 0;
                    }
                    else if (DataManager.instance.curPart == 2) {
                        addZ += SData.part1[0].length;
                    }
                    else if (DataManager.instance.curPart == 3) {
                        addZ += SData.part1[0].length + SData.part2[0].length;
                    }
                    else {
                        addZ += SData.part1[0].length + SData.part2[0].length + SData.part3[0].length;
                    }
                    this.time = 1;
                    this.isMove = false;
                    this.tailEffect.transform.localPositionY = -1;
                    this.setPlayerState(PlayerState.idle);
                    this.inertiaEffect(new Laya.Vector2(tempPosition.x, tempPosition.z), new Laya.Vector2(destination.x, destination.z));
                    this.flash(SData["part" + DataManager.instance.curPart][destination.x][destination.z - addZ]);
                    this.arrowMove(SData["part" + DataManager.instance.curPart][destination.x][destination.z - addZ]);
                    this.turnMove(addZ, tempPosition, destination, SData["part" + DataManager.instance.curPart][destination.x][destination.z - addZ]);
                }));
            }
        }
        turnMove(addZ, tempPosition, destination, paramter) {
            if (GameScene.instance["toolArray" + DataManager.instance.curPart][destination.x][destination.z - addZ]) {
                Tools.TurnEffect(GameScene.instance["toolArray" + DataManager.instance.curPart][destination.x][destination.z - addZ]);
            }
            if (paramter == 5) {
                if (tempPosition.z == destination.z && tempPosition.x != destination.x) {
                    this.updateMove(Tools.Pathfinding(this.gameobject, 3), 3);
                }
                if (tempPosition.z != destination.z && tempPosition.x == destination.x) {
                    this.updateMove(Tools.Pathfinding(this.gameobject, 2), 2);
                }
            }
            else if (paramter == 6) {
                if (tempPosition.z == destination.z && tempPosition.x != destination.x) {
                    this.updateMove(Tools.Pathfinding(this.gameobject, 4), 4);
                }
                if (tempPosition.z != destination.z && tempPosition.x == destination.x) {
                    this.updateMove(Tools.Pathfinding(this.gameobject, 1), 1);
                }
            }
            else if (paramter == 7) {
                if (tempPosition.z == destination.z && tempPosition.x != destination.x) {
                    this.updateMove(Tools.Pathfinding(this.gameobject, 3), 3);
                }
                if (tempPosition.z != destination.z && tempPosition.x == destination.x) {
                    this.updateMove(Tools.Pathfinding(this.gameobject, 1), 1);
                }
            }
            else if (paramter == 8) {
                if (tempPosition.z == destination.z && tempPosition.x != destination.x) {
                    this.updateMove(Tools.Pathfinding(this.gameobject, 4), 4);
                }
                if (tempPosition.z != destination.z && tempPosition.x == destination.x) {
                    this.updateMove(Tools.Pathfinding(this.gameobject, 2), 2);
                }
            }
        }
        arrowMove(paramter) {
            if (paramter == 9) {
                this.updateMove(Tools.Pathfinding(this.gameobject, 3), 3);
            }
            else if (paramter == 10) {
                this.updateMove(Tools.Pathfinding(this.gameobject, 4), 4);
            }
            else if (paramter == 11) {
                this.updateMove(Tools.Pathfinding(this.gameobject, 1), 1);
            }
            else if (paramter == 12) {
                this.updateMove(Tools.Pathfinding(this.gameobject, 2), 2);
            }
        }
        flash(parameter) {
            let height = 0;
            if (DataManager.instance.curPart == 1) {
                height = 0;
            }
            else if (DataManager.instance.curPart == 2) {
                height = (2 + DataManager.instance.needChildren1) * 0.3;
            }
            else if (DataManager.instance.curPart == 3) {
                height = (2 + DataManager.instance.needChildren1) * 0.3 + (DataManager.instance.needChildren2) * 0.3;
            }
            else {
                height = (2 + DataManager.instance.needChildren1) * 0.3 + (DataManager.instance.needChildren2) * 0.3 + (DataManager.instance.needChildren3) * 0.3;
            }
            if (parameter == 4) {
                this.isMove = true;
                let tempPosition1 = new Laya.Vector3(this.gameobject.transform.position.x, height - Tools.brickHeight, this.gameobject.transform.position.z);
                Laya.Tween.to(this.gameobject, { position: tempPosition1 }, 20 * Tools.brickHeight, null, Laya.Handler.create(this, () => {
                    let tempPosition2 = Tools.Flashfinding(this.gameobject);
                    this.gameobject.transform.position = new Laya.Vector3(Tools.Flashfinding(this.gameobject).x, height - Tools.brickHeight, Tools.Flashfinding(this.gameobject).z);
                    Laya.Tween.to(this.gameobject, { position: tempPosition2 }, 20 * Tools.brickHeight, null, Laya.Handler.create(this, () => {
                        this.isMove = false;
                    }));
                }));
            }
        }
        inertiaEffect(begin, end) {
            let inertiaX = end.x - begin.x;
            let inertiaZ = end.y - begin.y;
            let XisZero = inertiaX == 0 ? 0 : 1;
            let ZisZero = inertiaZ == 0 ? 0 : 1;
            let directionX = inertiaX > 0 ? -1 : 1;
            let directionZ = inertiaZ > 0 ? 1 : -1;
            let height = Math.ceil(Tools.brickHeight);
            Laya.timer.clearAll(this);
            Laya.timer.loop(10, this, () => {
                if (XisZero != 0 || ZisZero != 0) {
                    if (this.time <= 100 && !this.isMove) {
                        this.time++;
                        this.gameobject.transform.localRotationEulerX = Math.cos(this.time / 10) * (100 / this.time) * directionZ * ZisZero / height;
                        this.gameobject.transform.localRotationEulerZ = Math.cos(this.time / 10) * (100 / this.time) * directionX * XisZero / height;
                    }
                }
                else {
                    if (this.time <= 100 && !this.isMove) {
                        this.time++;
                        this.gameobject.transform.localRotationEulerX = Math.cos(this.time / 10) * (50 / this.time) * this.freezeZMove / height;
                        this.gameobject.transform.localRotationEulerZ = Math.cos(this.time / 10) * (50 / this.time) * this.freezeXMove / height;
                    }
                }
            });
        }
        playerWin() {
            let brick = new Laya.Sprite3D;
            for (let i = 2; i < this.gameobject.numChildren; i++) {
                brick = this.gameobject.getChildAt(i);
                this.gameobject.getChildAt(i);
                brick.transform.position = new Laya.Vector3(4, 0, 8);
            }
            this.player.transform.localPosition = new Laya.Vector3(0, 0, 0);
        }
        onUpdate() {
            if (this.gameobject && this.gameobject.parent) {
                Tools.celebrateEffect(this.gameobject);
            }
            if (this.isSprint && this.gameobject && !this.isWin) {
                this.isWin = true;
                this.isSprint = false;
                let t = (this.gameobject.numChildren - DataManager.instance.needChildren1 - DataManager.instance.needChildren2 - 2) * 1.25 + 20;
                if (t >= GameScene.instance.endPoint) {
                    console.log("玩家可以到达终点");
                    t = GameScene.instance.endPoint;
                    GData.curKey++;
                    GData.curLevelGetGold = GameScene.instance.rainbowNumber * 8;
                }
                else {
                    console.log("玩家不能到达终点");
                    t = (this.gameobject.numChildren - DataManager.instance.needChildren1 - DataManager.instance.needChildren2 - 2) + 20;
                    GData.curLevelGetGold = Math.floor((t - 30) / 8) * 8;
                }
                if (GData.curLevelGetGold >= 64) {
                    GData.curLevelGetGold = 64;
                }
                this.updateMove(new Laya.Vector3(4, 0, t + this.gameobject.transform.position.z), 3);
                let tt = 1300;
                setTimeout(() => {
                    this.isCamereRotate = true;
                    Tools.ClearChild(this.gameobject);
                }, tt);
                return;
            }
            if (this.isMove && this.gameobject && !this.isWin) {
                Tools.PlatformDetect(GameScene.instance["brickArray" + DataManager.instance.curPart], new Laya.Vector3(Math.round(this.gameobject.transform.position.x), this.gameobject.transform.position.y, Math.round(this.gameobject.transform.position.z)));
            }
            if (this.gameobject && this.gameobject.parent) {
                if (this.gameobject.transform.position.z < SData.part1[0].length) {
                    DataManager.instance.curPart = 1;
                    if (this.gameobject.numChildren > (DataManager.instance.needChildren1 + 2)) {
                        Tools.ShowChild(this.gameobject);
                    }
                }
                else if (this.gameobject.transform.position.z < SData.part1[0].length + SData.part2[0].length) {
                    DataManager.instance.curPart = 2;
                    if (this.gameobject.numChildren > (DataManager.instance.needChildren1 + DataManager.instance.needChildren2 + 2)) {
                        Tools.ShowChild(this.gameobject);
                    }
                }
                else if (this.gameobject.transform.position.z < SData.part1[0].length + SData.part2[0].length + SData.part3[0].length) {
                    DataManager.instance.curPart = 3;
                }
                else {
                    DataManager.instance.curPart = 4;
                    if (!this.isWin) {
                        this.isSprint = true;
                    }
                }
            }
        }
    }
    var PlayerState;
    (function (PlayerState) {
        PlayerState[PlayerState["idle"] = 0] = "idle";
        PlayerState[PlayerState["left"] = 1] = "left";
        PlayerState[PlayerState["right"] = 2] = "right";
        PlayerState[PlayerState["forward"] = 3] = "forward";
        PlayerState[PlayerState["back"] = 4] = "back";
        PlayerState[PlayerState["refect"] = 5] = "refect";
    })(PlayerState || (PlayerState = {}));

    class UITip extends Laya.Script {
        onStart() {
        }
        showTip(desc) {
            let action = this.owner.getChildByName('Action');
            let label = action.getChildByName('Label');
            label.text = desc;
            Laya.timer.once(1000, this, () => {
                Laya.Tween.to(action, { alpha: 0, complete: Laya.Handler.create(this, () => {
                        this.owner.removeSelf();
                        this.owner.destroy();
                    }) }, 200);
            });
        }
    }

    class Tools {
        static async waitMS(ms) {
            return new Promise(function (res, rej) {
                setTimeout(() => {
                }, ms);
            });
        }
        static async ShowUI(path, zOrder) {
            return new Promise(function (res, rej) {
                Laya.loader.load(path, Laya.Handler.create(null, (prefab) => {
                    if (typeof (prefab) == 'object') {
                        let p = new Laya.Prefab();
                        p.json = prefab;
                        let ui = p.create();
                        Laya.stage.addChild(ui);
                        ui.zOrder = zOrder;
                        res(ui);
                    }
                    else {
                        let ui = prefab.create();
                        Laya.stage.addChild(ui);
                        ui.zOrder = zOrder;
                        res(ui);
                    }
                }));
            });
        }
        static async CreateUI(path) {
            return new Promise(function (res, rej) {
                Laya.loader.load(path, Laya.Handler.create(null, (prefab) => {
                    if (typeof (prefab) == 'object') {
                        let p = new Laya.Prefab();
                        p.json = prefab;
                        let ui = p.create();
                        res(ui);
                    }
                    else {
                        let ui = prefab.create();
                        res(ui);
                    }
                }));
            });
        }
        static async showTip(msg) {
            if (typeof qg != 'undefined') {
                if (typeof qg.getSystemInfoSync !== 'undefined') {
                    let Info = qg.getSystemInfoSync();
                    if (Info.brand == 'vivo') {
                        qg.showToast({ message: msg });
                    }
                    else if (Info.brand == 'OPPO') {
                        let node = await Tools.ShowUI('prefab/UITip.json', 5000);
                        node.pos(Laya.stage.width / 2, Laya.stage.height / 2);
                        let cls = node.getComponent(UITip);
                        cls.showTip(msg);
                    }
                }
            }
            else if (typeof wx !== 'undefined') {
                wx.showToast({ title: msg });
            }
            else {
                let node = await Tools.ShowUI('prefab/UITip.json', 5000);
                node.pos(Laya.stage.width / 2, Laya.stage.height / 2);
                let cls = node.getComponent(UITip);
                cls.showTip(msg);
            }
        }
        static AddClickEvent(btn, call, func, beginScale) {
            btn.on(Laya.Event.MOUSE_DOWN, call, () => { btn.scale(1.1, 1.1, true); });
            btn.on(Laya.Event.MOUSE_OUT, call, () => { btn.scale(beginScale, beginScale, true); });
            btn.on(Laya.Event.CLICK, call, func);
        }
        static joggle(btn) {
            Laya.Tween.to(btn, { rotation: -25 }, 100, null, Laya.Handler.create(this, () => {
                Laya.Tween.to(btn, { rotation: 25 }, 100, null, Laya.Handler.create(this, () => {
                    Laya.Tween.to(btn, { rotation: -25 }, 100, null, Laya.Handler.create(this, () => {
                        Laya.Tween.to(btn, { rotation: 25 }, 100, null, Laya.Handler.create(this, () => {
                            Laya.Tween.to(btn, { rotation: -15 }, 100, null, Laya.Handler.create(this, () => {
                                Laya.Tween.to(btn, { rotation: 0 }, 50, null, Laya.Handler.create(this, () => {
                                }));
                            }));
                        }));
                    }));
                }));
            }));
        }
        static breath(btn) {
            if (btn) {
                Laya.timer.loop(10, this, () => {
                    this.timer++;
                    btn.scaleX = Math.sin(this.timer / 50) * 0.1 + 1;
                    btn.scaleY = Math.sin(this.timer / 50) * 0.1 + 1;
                });
            }
        }
        static Pathfinding(player, direction) {
            let addZ = 0;
            if (DataManager.instance.curPart == 1) {
                addZ = 0;
            }
            else if (DataManager.instance.curPart == 2) {
                addZ += SData.part1[0].length;
            }
            else if (DataManager.instance.curPart == 3) {
                addZ += SData.part1[0].length + SData.part2[0].length;
            }
            else {
                addZ += SData.part1[0].length + SData.part2[0].length + SData.part3[0].length;
            }
            DataManager.instance.isForwardPoint = false;
            DataManager.instance.isBackPoint = false;
            if (direction == 1) {
                for (let i = player.transform.position.x; i <= SData["part" + DataManager.instance.curPart].length; i++) {
                    if (SData["part" + DataManager.instance.curPart][i][player.transform.position.z - addZ] == -2 && this.platformArrayData) {
                        for (let k = 0; k < this.platformArrayData.length; k++) {
                            if (this.platformArrayData[k].x == i && this.platformArrayData[k].z == player.transform.position.z) {
                                return new Laya.Vector3(i - 1, 0, player.transform.position.z);
                            }
                        }
                    }
                    if (SData["part" + DataManager.instance.curPart][i][player.transform.position.z - addZ] > 2 && player.transform.position.x != i) {
                        return new Laya.Vector3(i, 0, player.transform.position.z);
                    }
                    if (SData["part" + DataManager.instance.curPart][i][player.transform.position.z - addZ] == 0) {
                        return new Laya.Vector3(i - 1, 0, player.transform.position.z);
                    }
                }
            }
            else if (direction == 2) {
                for (let i = player.transform.position.x; i >= -1; i--) {
                    if (SData["part" + DataManager.instance.curPart][i][player.transform.position.z - addZ] == -2 && this.platformArrayData) {
                        for (let k = 0; k < this.platformArrayData.length; k++) {
                            if (this.platformArrayData[k].x == i && this.platformArrayData[k].z == player.transform.position.z) {
                                return new Laya.Vector3(i + 1, 0, player.transform.position.z);
                            }
                        }
                    }
                    if (SData["part" + DataManager.instance.curPart][i][player.transform.position.z - addZ] > 2 && player.transform.position.x != i) {
                        return new Laya.Vector3(i, 0, player.transform.position.z);
                    }
                    if (SData["part" + DataManager.instance.curPart][i][player.transform.position.z - addZ] == 0) {
                        return new Laya.Vector3(i + 1, 0, player.transform.position.z);
                    }
                }
            }
            else if (direction == 3) {
                for (let j = player.transform.position.z - addZ; j <= SData["part" + DataManager.instance.curPart][0].length; j++) {
                    if (player.transform.position.x == 4 && j == SData["part" + DataManager.instance.curPart][0].length - 1) {
                        if (player.transform.position.z < addZ + SData["part" + DataManager.instance.curPart][0].length && player.transform.position.z > addZ) {
                            DataManager.instance.isForwardPoint = true;
                            return new Laya.Vector3(4, 0, addZ + j);
                        }
                    }
                    if (SData["part" + DataManager.instance.curPart][player.transform.position.x][j] == -2 && this.platformArrayData) {
                        for (let k = 0; k < this.platformArrayData.length; k++) {
                            if (this.platformArrayData[k].x == player.transform.position.x && this.platformArrayData[k].z == j + addZ) {
                                return new Laya.Vector3(player.transform.position.x, 0, addZ + j - 1);
                            }
                        }
                    }
                    if (SData["part" + DataManager.instance.curPart][player.transform.position.x][j] > 2 && player.transform.position.z != j + addZ) {
                        return new Laya.Vector3(player.transform.position.x, 0, addZ + j);
                    }
                    if (SData["part" + DataManager.instance.curPart][player.transform.position.x][j] == 0) {
                        return new Laya.Vector3(player.transform.position.x, 0, addZ + j - 1);
                    }
                }
            }
            else if (direction == 4) {
                for (let j = player.transform.position.z - addZ; j >= -1; j--) {
                    if (player.transform.position.x == 4 && SData["part" + DataManager.instance.curPart][4][j] == null) {
                        if (player.transform.position.z != j + addZ) {
                            DataManager.instance.isBackPoint = true;
                            return new Laya.Vector3(4, 0, addZ - 1);
                        }
                    }
                    if (SData["part" + DataManager.instance.curPart][player.transform.position.x][j] == -2 && this.platformArrayData) {
                        for (let k = 0; k < this.platformArrayData.length; k++) {
                            if (this.platformArrayData[k].x == player.transform.position.x && this.platformArrayData[k].z == j + addZ) {
                                return new Laya.Vector3(player.transform.position.x, 0, addZ + j + 1);
                            }
                        }
                    }
                    if (SData["part" + DataManager.instance.curPart][player.transform.position.x][j] > 2 && player.transform.position.z != j + addZ) {
                        return new Laya.Vector3(player.transform.position.x, 0, addZ + j);
                    }
                    if (SData["part" + DataManager.instance.curPart][player.transform.position.x][j] == 0) {
                        return new Laya.Vector3(player.transform.position.x, 0, j + 1 + addZ);
                    }
                }
            }
        }
        static Flashfinding(player) {
            let addZ = 0;
            if (DataManager.instance.curPart == 1) {
                addZ = 0;
            }
            else if (DataManager.instance.curPart == 2) {
                addZ += SData.part1[0].length;
            }
            else if (DataManager.instance.curPart == 3) {
                addZ += SData.part1[0].length + SData.part2[0].length;
            }
            else {
                addZ += SData.part1[0].length + SData.part2[0].length + SData.part3[0].length;
            }
            for (let i = 0; i <= SData["part" + DataManager.instance.curPart].length; i++) {
                for (let j = 0; j <= SData["part" + DataManager.instance.curPart][i].length; j++) {
                    if (SData["part" + DataManager.instance.curPart][i][j] == 4 && player.transform.position.x != i && player.transform.position.z != j) {
                        return new Laya.Vector3(i, 0, j + addZ);
                    }
                }
            }
        }
        static PlatformDetect(brickArray, playerPosition) {
            let addZ = 0;
            if (DataManager.instance.curPart == 1) {
                addZ = 0;
            }
            else if (DataManager.instance.curPart == 2) {
                addZ += SData.part1[0].length;
            }
            else if (DataManager.instance.curPart == 3) {
                addZ += SData.part1[0].length + SData.part2[0].length;
            }
            else {
                addZ += SData.part1[0].length + SData.part2[0].length + SData.part3[0].length;
            }
            if (brickArray && brickArray[playerPosition.x][playerPosition.z - addZ]) {
                if (brickArray[playerPosition.x][playerPosition.z - addZ].brickProperty == -2) {
                    let platformPosition = new Laya.Vector3(playerPosition.x, playerPosition.y, playerPosition.z - addZ);
                    this.PlatformUpDown(addZ, platformPosition);
                }
            }
        }
        static ClearPathRepeat(beginPosition, endPosition, brickArray, delaySecond) {
            let addZ = 0;
            let delayTimes = 0;
            if (DataManager.instance.curPart == 1) {
                addZ = 0;
            }
            else if (DataManager.instance.curPart == 2) {
                addZ += SData.part1[0].length;
            }
            else if (DataManager.instance.curPart == 3) {
                addZ += SData.part1[0].length + SData.part2[0].length;
            }
            else {
                addZ += SData.part1[0].length + SData.part2[0].length + SData.part3[0].length;
            }
            if (beginPosition.x == endPosition.x && beginPosition.z <= endPosition.z) {
                for (let i = beginPosition.z; i <= endPosition.z; i++) {
                    delayTimes++;
                    Laya.timer.once(delaySecond * delayTimes, this, () => { brickArray[beginPosition.x][i - addZ] && Tools.PlayerAddChild(brickArray[beginPosition.x][i - addZ]); });
                }
            }
            else if (beginPosition.x == endPosition.x && beginPosition.z >= endPosition.z) {
                for (let i = beginPosition.z; i >= endPosition.z; i--) {
                    delayTimes++;
                    Laya.timer.once(delaySecond * delayTimes, this, () => { brickArray[beginPosition.x][i - addZ] && Tools.PlayerAddChild(brickArray[beginPosition.x][i - addZ]); });
                }
            }
            else if (beginPosition.z == endPosition.z && beginPosition.x <= endPosition.x) {
                for (let i = beginPosition.x; i <= endPosition.x; i++) {
                    delayTimes++;
                    Laya.timer.once(delaySecond * delayTimes, this, () => { brickArray[i][beginPosition.z - addZ] && Tools.PlayerAddChild(brickArray[i][beginPosition.z - addZ]); });
                }
            }
            else if (beginPosition.z == endPosition.z && beginPosition.x >= endPosition.x) {
                for (let i = beginPosition.x; i >= endPosition.x; i--) {
                    delayTimes++;
                    Laya.timer.once(delaySecond * delayTimes, this, () => { brickArray[i][beginPosition.z - addZ] && Tools.PlayerAddChild(brickArray[i][beginPosition.z - addZ]); });
                }
            }
            else {
                console.log("玩家没有动");
            }
        }
        static PlayerAddChild(child) {
            if (child.brickProperty > 0) {
                child.brickProperty = -1;
                if (child.owner && !child.owner.active) {
                    child.owner.active = true;
                }
                GameScene.instance.player.gameobject.addChild(child.owner);
                child.owner.transform.localPosition = new Laya.Vector3(0, this.brickHeight, 0);
                this.brickHeight += 0.3;
                this.PlaySound(SOUND_TYPE.ADD);
                this.shake(2);
                GameScene.instance.player.setPlayerState(PlayerState.refect);
                GameScene.instance.player.player.transform.localPositionY = this.brickHeight;
                if (child.owner.getChildByName("glow")) {
                    this.GlowEffect(child.owner.getChildByName("glow"));
                }
            }
            if (child.brickProperty == -2) {
                if (child.owner.name == "walk" + GameScene.instance.ranScene) {
                    GameScene.instance.player.gameobject.addChild(child.owner);
                    child.owner.transform.localPosition = new Laya.Vector3(0, this.brickHeight, 0);
                    this.brickHeight += 0.3;
                    this.PlaySound(SOUND_TYPE.ADD);
                    this.shake(2);
                    GameScene.instance.player.setPlayerState(PlayerState.refect);
                    GameScene.instance.player.player.transform.localPositionY = this.brickHeight;
                    if (child.owner.getChildByName("glow")) {
                        this.GlowEffect(child.owner.getChildByName("glow"));
                    }
                }
            }
        }
        static PlatformUpDown(addZ, platformPosition) {
            let platform = null;
            if (GameScene.instance["toolArray" + DataManager.instance.curPart][platformPosition.x][platformPosition.z] && platformPosition) {
                if (GameScene.instance["toolArray" + DataManager.instance.curPart][platformPosition.x][platformPosition.z].name == "platform" + GameScene.instance.ranScene) {
                    platform = GameScene.instance["toolArray" + DataManager.instance.curPart][platformPosition.x][platformPosition.z];
                    let inside = platform.getChildByName("inside");
                    platformPosition.z = platformPosition.z + addZ;
                    this.platformArrayData.push(platformPosition);
                    Laya.Tween.to(inside, { localPosition: new Laya.Vector3(0, 0.5, 0) }, 100, null, Laya.Handler.create(this, () => {
                        this.PlaySound(SOUND_TYPE.SNAP);
                        setTimeout(() => {
                            Laya.Tween.to(inside, { localPosition: new Laya.Vector3(0, -0.5, 0) }, 100, null, Laya.Handler.create(this, () => {
                                this.platformArrayData.shift();
                            }));
                        }, 1000);
                    }));
                }
            }
        }
        static ClearChild(player) {
            Laya.timer.clear(this, this.ClearChild);
            let num = player.numChildren;
            let child = num;
            let bri = 0;
            let tt = 60;
            Laya.timer.loop(tt, player, () => {
                if (bri < 100) {
                    if (GameScene.instance.rainBow.getChildByName("bricks").getChildAt(bri).transform.position.z <= player.transform.position.z) {
                        GameScene.instance.rainBow.getChildByName("bricks").getChildAt(bri).active = true;
                        this.PlaySound(SOUND_TYPE.REMOVE);
                        bri++;
                    }
                }
                if (child >= (DataManager.instance.needChildren1 + DataManager.instance.needChildren2 + 2)) {
                    player.removeChildAt(child);
                    child--;
                    this.brickHeight -= 0.3;
                    GameScene.instance.player.cameraOfffset -= 0.05;
                    GameScene.instance.player.player.transform.localPositionY = this.brickHeight + 0.3;
                }
            });
        }
        static celebrateEffect(player) {
            if (GameScene.instance.beginTaizi) {
                for (let i = 0; i < 6; i++) {
                    if (GameScene.instance.beginTaizi.getChildByName("lihuapao" + i)) {
                        if (GameScene.instance.beginTaizi.getChildByName("lihuapao" + i).transform.position.z <= player.transform.position.z + 10) {
                            if (!GameScene.instance.beginTaizi.getChildByName("lihuapao" + i).getChildByName("firework").active) {
                                GameScene.instance.beginTaizi.getChildByName("lihuapao" + i).getChildByName("firework").active = true;
                                this.PlaySound(SOUND_TYPE.COMPLETE);
                            }
                        }
                    }
                }
            }
        }
        static HideChild(player) {
            if (DataManager.instance.curPart == 1) {
                GameScene.instance.cacheBrick1.active = true;
                for (let i = 2; i < 2 + DataManager.instance.needChildren1; i++) {
                    if (player.getChildAt(i)) {
                        player.getChildAt(i).active = false;
                    }
                }
            }
            else if (DataManager.instance.curPart == 2) {
                GameScene.instance.cacheBrick1.active = true;
                GameScene.instance.cacheBrick2.active = true;
                for (let i = 2; i < 2 + DataManager.instance.needChildren1 + DataManager.instance.needChildren2; i++) {
                    if (player.getChildAt(i)) {
                        player.getChildAt(i).active = false;
                    }
                }
            }
        }
        static ShowChild(player) {
            if (DataManager.instance.curPart == 1) {
                GameScene.instance.cacheBrick1.active = false;
                for (let i = 2; i < 2 + DataManager.instance.needChildren1; i++) {
                    if (player.getChildAt(i)) {
                        player.getChildAt(i).active = true;
                    }
                }
            }
            else if (DataManager.instance.curPart == 2) {
                GameScene.instance.cacheBrick2.active = false;
                for (let i = 2 + DataManager.instance.needChildren1; i < 2 + DataManager.instance.needChildren1 + DataManager.instance.needChildren2; i++) {
                    if (player.getChildAt(i)) {
                        player.getChildAt(i).active = true;
                    }
                }
            }
        }
        static searchData(datas, id) {
            var col = datas[0].length;
            var row = datas.length;
            var result = [];
            for (var r = 0; r < row; r++) {
                for (var c = 0; c < col; c++) {
                    var rowDatas = Tools.rowSearch(r, c, result, datas);
                    let w = rowDatas.length;
                    if (rowDatas.length > 0) {
                        var colDatas = Tools.colSearch(rowDatas, datas);
                        colDatas.width = w;
                        result.push(colDatas);
                    }
                }
            }
            for (let i = 0; i < result.length; i++) {
                let brick = GameScene.instance["brickArray" + id][result[i].datas[0].row][result[i].datas[0].col].owner;
                brick.active = true;
                brick.meshRenderer.receiveShadow = true;
                brick.transform.localPositionX -= 0.5;
                brick.transform.localPositionZ -= 0.5;
                brick.transform.localScaleZ = result[i].width / 4;
                brick.transform.localScaleX = result[i].height / 4;
            }
        }
        static rowSearch(row, col, result, datas) {
            if (!Tools.isSearchDone(row, col, result)) {
                var data = datas[row][col];
                if (data == 0) {
                    var arr = [];
                    var rowDatas = datas[row];
                    for (var i = col; i < rowDatas.length; i++) {
                        if (datas[row][i] == 0) {
                            arr.push({ row: row, col: i });
                        }
                        else {
                            return arr;
                        }
                    }
                    return arr;
                }
            }
            return [];
        }
        static colSearch(rowDatas, datas) {
            var count = Tools.loopSearchCol(rowDatas, rowDatas[0].row + 1, rowDatas[0].col, 0, datas);
            let all = rowDatas[0].col + rowDatas.length;
            for (var i = 0; i < count; i++) {
                for (let j = rowDatas[0].col; j < all; j++) {
                    rowDatas.push({ row: rowDatas[0].row + i + 1, col: j });
                }
            }
            return { height: count + 1, datas: rowDatas, width: 0 };
        }
        static loopSearchCol(rowDatas, row, col, count, datas) {
            for (var i = 0; i < rowDatas.length; i++) {
                if (typeof datas[row] != 'undefined') {
                    var data = datas[row][rowDatas[i].col];
                    if (typeof data == 'undefined' || data != 0) {
                        return count;
                    }
                }
                else {
                    return count;
                }
            }
            count++;
            return Tools.loopSearchCol(rowDatas, row + 1, col, count, datas);
        }
        static isSearchDone(row, col, result) {
            for (var i = 0; i < result.length; i++) {
                var group = result[i].datas;
                for (var j = 0; j < group.length; j++)
                    if (group[j].row == row && group[j].col == col) {
                        return true;
                    }
            }
            return false;
        }
        static TurnEffect(turn) {
            if (turn.name = "turn") {
                Laya.Tween.to(turn, { localScale: new Laya.Vector3(1.2, 1, 1.2) }, 100, Laya.Ease.bounceInOut, Laya.Handler.create(this, () => {
                    Laya.Tween.to(turn, { localScale: new Laya.Vector3(1, 1, 1) }, 500, Laya.Ease.bounceInOut);
                }));
            }
        }
        static GlowEffect(glow) {
            let glowHeight = 0;
            if (DataManager.instance.curPart == 1) {
                glowHeight = -Math.floor(Tools.brickHeight);
            }
            else if (DataManager.instance.curPart == 2) {
                glowHeight = -Math.floor(Tools.brickHeight) + DataManager.instance.needChildren1 * 0.3;
            }
            else {
                glowHeight = -Math.floor(Tools.brickHeight) + (DataManager.instance.needChildren1 + DataManager.instance.needChildren2) * 0.3;
            }
            glow.transform.localPosition = new Laya.Vector3(0, glowHeight, 0);
            Laya.Tween.to(glow, { localScale: new Laya.Vector3(20, 1, 20) }, 200, null, Laya.Handler.create(this, () => {
                glow.destroy();
            }));
        }
        static GetChildByName(node, name) {
            let child;
            child = node.getChildByName(name);
            if (child) {
                return child;
            }
            for (let index = 0; index < node.numChildren; index++) {
                let _child = node.getChildAt(index);
                let obj = Tools.GetChildByName(_child, name);
                if (obj != null) {
                    return obj;
                }
            }
            return null;
        }
        static playBGM(url) {
            if (this.bgm) {
                this.bgm.stop();
            }
            this.bgm = this.PlaySound(url, 0);
        }
        static stopBGM() {
            if (this.bgm) {
                this.bgm.stop();
            }
        }
        static PlaySound(url, loops = -1) {
            if (DataManager.instance.soundOpen == 1) {
                if (typeof wx !== 'undefined') {
                    let sound = wx.createInnerAudioContext();
                    sound.src = 'http://xcx.youletd.com/xcx/vivo/fklql/v100/Resource/' + url;
                    sound.loop = loops == 0;
                    sound.play();
                    return sound;
                }
                else {
                    if (loops < 0) {
                        return Laya.SoundManager.playSound(url);
                    }
                    return Laya.SoundManager.playSound(url, loops);
                }
            }
            else {
                this.StopAllSound();
            }
        }
        static StopAllSound() {
            if (typeof wx !== 'undefined') {
            }
            else {
                Laya.SoundManager.stopMusic();
                Laya.SoundManager.stopAllSound();
            }
        }
        static shake(type) {
            if (type == 1) {
            }
            else {
            }
        }
        static clampf(value, min, max) {
            if (value < min) {
                value = min;
            }
            if (value > max) {
                value = max;
            }
            return value;
        }
        static getRandomInt(min, max) {
            return Math.floor(Math.random() * (max + 1 - min) + min);
        }
        static cutNameLen(playerName, len, add = '...') {
            var newName = "";
            if (playerName.length > len) {
                newName = playerName.substring(0, len);
                newName += add;
            }
            else {
                newName = playerName;
            }
            return newName;
        }
        static imageDrawPath(icon, cutLength = 20) {
            let path = [
                ["moveTo", cutLength, 0],
                ["lineTo", icon.width - cutLength, 0],
                ["arcTo", icon.width, 0, icon.width, cutLength, cutLength],
                ["lineTo", icon.width, icon.height - cutLength],
                ["arcTo", icon.width, icon.height, icon.width - cutLength, icon.height, cutLength],
                ["lineTo", cutLength, icon.height],
                ["arcTo", 0, icon.height, 0, icon.height - cutLength, cutLength],
                ["lineTo", 0, cutLength],
                ["arcTo", 0, 0, cutLength, 0, cutLength],
            ];
            icon.mask.graphics.drawPath(0, 0, path, { fillStyle: "#000000" });
        }
        static goldEffect(owner, num, begin, end) {
            for (let i = 0; i < num; i++) {
                let gold = new Laya.Image();
                gold.skin = 'textures/jinbi.png';
                owner.addChild(gold);
                gold.pos(begin.x + 50, begin.y - 35);
                Laya.Tween.to(gold, { x: (begin.x + 50) - Math.cos(2 * i / Math.PI) * 100, y: (begin.y - 35) - Math.sin(2 * i / Math.PI) * 100 }, 100, Laya.Ease.linearIn, Laya.Handler.create(this, () => {
                    Laya.Tween.to(gold, { x: end.x, y: end.y }, 1000, Laya.Ease.linearIn, Laya.Handler.create(this, () => {
                        gold.destroy();
                    }), i * 100);
                }), 100);
            }
        }
        static splitToNumber(text, separator) {
            if (!text || text.length == 0) {
                return [];
            }
            let strArr = text.split(separator);
            let newArr = [];
            for (let i = 0; i < strArr.length; i++) {
                newArr.push(Number(strArr[i]));
            }
            return newArr;
        }
        static async LoadLhSync(path) {
            return new Promise(function (res, rej) {
                Laya.Sprite3D.load(path, Laya.Handler.create(null, (sprite3D) => {
                    res(sprite3D);
                }));
            });
        }
        static async LoadTextureSync(path) {
            return new Promise(function (res, rej) {
                Laya.Texture2D.load(path, Laya.Handler.create(null, (tex) => {
                    res(tex);
                }));
            });
        }
        static twoPointDistance(a, b) {
            return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2));
        }
        static GetLocalForward(startPoint, angle, distance = 10) {
            let localForward = new Laya.Vector3();
            let radian = (angle * Math.PI) / 180;
            localForward.x = startPoint.x + distance * Math.sin(radian);
            localForward.y = startPoint.y;
            localForward.z = (startPoint.z + distance * Math.cos(radian));
            return localForward;
        }
        static minValue(array) {
            var min = array[0];
            for (var i = 0; i < array.length; i++) {
                if (min > array[i]) {
                    min = array[i];
                }
            }
            return min;
        }
        static TimeDown() {
            this.Timer--;
            if (this.Timer <= 0) {
                Laya.timer.clear(this, this.TimeDown);
            }
        }
        static createVideo(videoID, callback = null) {
            Tools.VideoCb = callback;
            let v = null;
            if (typeof qg !== 'undefined') {
                if (typeof qg.getSystemInfoSync !== 'undefined') {
                    let Info = qg.getSystemInfoSync();
                    if (Info.brand == 'vivo') {
                        if (Tools.Video) {
                            Tools.Video.load();
                            return;
                        }
                        if (qg.createRewardedVideoAd) {
                            Tools.Video = qg.createRewardedVideoAd({ posId: videoID });
                            Tools.Video.load();
                            Tools.Video.onLoad((res) => {
                                Tools.Video.show();
                            });
                            Tools.Video.onError((res) => {
                                Tools.showTip("广告正在加载中，请" + this.Timer + "秒后再尝试~");
                                Tools.VideoCb = null;
                            });
                            Tools.Video.onClose((res) => {
                                if (res && res.isEnded) {
                                    Tools.VideoCb && (Tools.VideoCb('ok'));
                                    Laya.timer.clear(this, this.TimeDown);
                                    this.Timer = 60;
                                    Laya.timer.loop(1000, this, this.TimeDown);
                                }
                                else {
                                    Tools.showTip('请完整观看');
                                    Tools.VideoCb && (Tools.VideoCb('no'));
                                }
                                Tools.VideoCb = null;
                            });
                        }
                    }
                    else if (Info.brand == 'OPPO') {
                        if (Tools.Video) {
                            Tools.Video.load();
                            return;
                        }
                        if (Info.platformVersionCode >= 1040) {
                            Tools.Video = qg.createRewardedVideoAd({ posId: videoID });
                        }
                        else if (Info.platformVersionCode >= 1051) {
                            Tools.Video = qg.createRewardedVideoAd({ adUnitId: videoID });
                        }
                        Tools.Video.onLoad((res) => {
                            Tools.Video.show();
                        });
                        Tools.Video.onError((res) => {
                            Tools.showTip("暂无视频");
                            Tools.VideoCb = null;
                        });
                        Tools.Video.onClose((res) => {
                            if (res && res.isEnded) {
                                Tools.VideoCb && (Tools.VideoCb('ok'));
                            }
                            else {
                                Tools.showTip("请完整观看");
                                Tools.VideoCb && (Tools.VideoCb('no'));
                            }
                            Tools.VideoCb = null;
                        });
                        Tools.Video.load();
                    }
                }
            }
        }
        static watchVideo(cb, cl = null) {
            DataManager.instance.playFBVideo(cb);
            console.log("调用观看视频函数");
        }
        static createBanner(bannerID, oldBannerAd = null, isShowBannerNow = false) {
            Tools.isShowBanner = isShowBannerNow;
            if (typeof qg !== 'undefined') {
                if (typeof qg.getSystemInfoSync !== 'undefined') {
                    let Info = qg.getSystemInfoSync();
                    if (Info.brand == 'vivo') {
                        let bannerAd = qg.createBannerAd({
                            posId: bannerID,
                            style: {}
                        });
                        let adshow = bannerAd.show();
                        adshow && adshow.then(() => {
                            console.log("banner广告展示成功");
                        }).catch((err) => {
                            switch (err.code) {
                                case 30003:
                                    break;
                                case 30009:
                                    break;
                                case 30002:
                                    setTimeout(() => {
                                        Tools.retryShow(bannerAd);
                                    }, 11000);
                                    break;
                                default:
                                    break;
                            }
                        });
                        bannerAd.onLoad((res) => {
                            if (Tools.isShowBanner) {
                                bannerAd.show();
                            }
                            else {
                                bannerAd.hide();
                            }
                        });
                    }
                    else if (Info.brand == 'OPPO') {
                        if (oldBannerAd) {
                            oldBannerAd.hide();
                            oldBannerAd.destroy();
                        }
                        var phone = qg.getSystemInfoSync();
                        var w = phone.screenWidth / 2;
                        var h = phone.screenHeight;
                        let self = this;
                        let screenWidth = qg.getSystemInfoSync().screenWidth;
                        let screenHeight = qg.getSystemInfoSync().screenHeight;
                        let designSize = new Laya.Size(640, 1136);
                        let rateHeight = (screenWidth / designSize.width) * designSize.height;
                        let minHeight = 100 * (screenWidth / designSize.width) + (screenHeight - rateHeight) / 2;
                        let bannerAd = qg.createBannerAd({
                            adUnitId: bannerID,
                            style: {
                                left: 0,
                                top: screenHeight - 100,
                                width: screenWidth,
                                height: minHeight
                            }
                        });
                        let isSetWidth = false;
                        bannerAd.onResize(res => {
                            if (isSetWidth) {
                                return;
                            }
                            isSetWidth = true;
                        });
                        bannerAd.onLoad((res) => {
                        });
                        bannerAd.onError((err) => {
                            Tools.Banner = null;
                        });
                        if (Tools.isShowBanner) {
                            bannerAd.show();
                        }
                        else {
                            bannerAd.hide();
                        }
                        return bannerAd;
                    }
                }
            }
            return null;
        }
        static retryShow(bannerID) {
            let bannerAdRetey = qg.createBannerAd({
                posId: bannerID,
                style: {}
            });
            let adShowRetry = bannerAdRetey.show();
            adShowRetry && adShowRetry.catch((error) => {
            });
        }
        static showBanner(isShow, location = null) {
            Tools.isShowBanner = isShow;
            if (isShow) {
                DataManager.instance.showFBBanner(true);
                if (utils)
                    utils.adManager.ShowBanner(location, { width: 0.8, bottom: 5 });
            }
            else {
                DataManager.instance.showFBBanner(false);
                if (utils)
                    utils.adManager.HideBanner(location);
            }
        }
        static changeWxBanner() {
            if (typeof qg != 'undefined') {
                if (typeof qg.getSystemInfoSync !== 'undefined') {
                    let info = qg.getSystemInfoSync();
                    if (info.brand == 'vivo') {
                        Tools.Banner = Tools.createBanner('bea6ba2872334aa99d2f399e17567c00', Tools.Banner, Tools.isShowBanner);
                    }
                    else {
                        Tools.Banner = Tools.createBanner('205947', Tools.Banner, Tools.isShowBanner);
                    }
                }
            }
        }
        static showGameAd(isShow, height, width) {
            if (typeof qg !== 'undefined') {
                if (typeof qg.getSystemInfoSync !== 'undefined') {
                    let Info = qg.getSystemInfoSync();
                    if (Info.brand == 'vivo') {
                    }
                    else if (Info.brand == 'OPPO') {
                        if (isShow) {
                            if (utils)
                                utils.showTryGamesWidget({ top: height, left: width });
                        }
                        else {
                            if (utils)
                                utils.hideTryGamesWidget();
                        }
                    }
                }
            }
        }
        static showInsertAd() {
            DataManager.instance.showFBInterstitialAd();
            if (typeof qg !== 'undefined') {
                if (typeof qg.getSystemInfoSync !== 'undefined') {
                    let Info = qg.getSystemInfoSync();
                    if (Info.brand == 'vivo') {
                        if (utils)
                            utils.adManager.ShowInterstitial();
                    }
                    else if (Info.brand == 'OPPO') {
                    }
                }
            }
        }
        static showMoreGameAd(isShow) {
            if (typeof qg !== 'undefined') {
                if (typeof qg.getSystemInfoSync !== 'undefined') {
                    let Info = qg.getSystemInfoSync();
                    if (Info.brand == 'vivo') {
                    }
                    else if (Info.brand == 'OPPO') {
                        if (isShow) {
                            if (utils)
                                utils.showMoreGamesSidePanel({ top: UIMain.instance.chestTipBox.y + 100, left: 10 });
                        }
                        else {
                            if (utils)
                                utils.hideMoreGamesSidePanel();
                        }
                    }
                }
            }
        }
        static addDestop(isShow) {
            if (typeof qg !== 'undefined') {
                if (typeof qg.getSystemInfoSync !== 'undefined') {
                    let Info = qg.getSystemInfoSync();
                    if (Info.brand == 'vivo') {
                        if (isShow) {
                            console.log("展示添加桌面图标");
                            if (utils)
                                utils.showCreateShortcutWidget(function (ret) {
                                    if (ret) {
                                        Tools.showTip("创建桌面图标成功");
                                    }
                                    else {
                                        Tools.showTip("创建桌面图标失败");
                                    }
                                }, { top: 200, right: 10 });
                        }
                        else {
                            if (utils)
                                utils.hideShortcutWidget();
                        }
                    }
                    else if (Info.brand == 'OPPO') {
                        if (isShow) {
                            console.log("展示添加桌面图标");
                            if (utils)
                                utils.showCreateShortcutWidget(function (ret) {
                                    if (ret) {
                                        Tools.showTip("创建桌面图标成功");
                                    }
                                    else {
                                        Tools.showTip("创建桌面图标失败");
                                    }
                                }, { top: UIMain.instance.signBox.y - 200, right: 10 });
                        }
                        else {
                            if (utils)
                                utils.hideShortcutWidget();
                        }
                    }
                }
            }
        }
        static showDestop() {
            if (typeof qg !== 'undefined') {
                if (typeof qg.getSystemInfoSync !== 'undefined') {
                    let Info = qg.getSystemInfoSync();
                    if (Info.brand == 'vivo') {
                        if (Info.platformVersionCode >= 1041) {
                            qg.hasShortcutInstalled({
                                success: function (res) {
                                    if (res == false) {
                                        qg.installShortcut({
                                            success: function () {
                                                Tools.showTip('添加桌面成功');
                                            },
                                            fail: function (err) { },
                                            complete: function () { }
                                        });
                                    }
                                },
                                fail: function (err) { },
                                complete: function () { }
                            });
                        }
                    }
                    else if (Info.brand == 'OPPO') {
                        if (Info.platformVersionCode >= 1040) {
                            qg.hasShortcutInstalled({
                                success: function (res) {
                                    if (res == false) {
                                        qg.installShortcut({
                                            success: function () {
                                                Tools.showTip('添加桌面成功');
                                            },
                                            fail: function (err) { },
                                            complete: function () { }
                                        });
                                    }
                                    else {
                                    }
                                },
                                fail: function (err) { },
                                complete: function () { }
                            });
                        }
                    }
                }
            }
        }
        static loadNativeAd(id, cb) {
            let v = null;
            Tools.qgNativeCb = cb;
            if (Tools.qgNative) {
                Tools.qgNative.load();
            }
            else {
                if (typeof qg !== 'undefined') {
                    if (typeof qg.getSystemInfoSync !== 'undefined') {
                        let Info = qg.getSystemInfoSync();
                        if (typeof qg.createNativeAd !== 'undefined') {
                            if (Info.brand == 'vivo') {
                                v = qg.createNativeAd({ posId: id });
                                if (v && typeof v.load != 'undefined') {
                                    v.load();
                                    v.onLoad((res) => {
                                        Tools.qgNativeCb && Tools.qgNativeCb(res, v);
                                    });
                                }
                            }
                            else if (Info.brand == 'OPPO') {
                                v = qg.createNativeAd({ adUnitId: id });
                                Tools.qgNative = v;
                                v.load();
                                v.onLoad((res) => {
                                    Tools.qgNativeCb && Tools.qgNativeCb(res, v);
                                });
                            }
                        }
                    }
                }
            }
        }
    }
    Tools.timer = 0;
    Tools.brickHeight = 0;
    Tools.platformArrayData = null;
    Tools.bgm = null;
    Tools.Timer = 60;
    Tools.Video = null;
    Tools.VideoCb = null;
    Tools.adUnitId = null;
    Tools.changeBannerTimes = 0;
    Tools.isShowBanner = false;
    Tools.qgNative = null;
    Tools.qgNativeCb = null;

    class DataManager {
        constructor() {
            this.isRealyBegin = false;
            this.lotteryTimes = 2;
            this.signDays = [];
            this.curPlayerID = 0;
            this.playerFaceInfo = [];
            this.chestRewardInfo = [];
            this.videoUnlockChestTimes = [];
            this.needChildren1 = 0;
            this.needChildren2 = 0;
            this.needChildren3 = 0;
            this.cheating = false;
            this.curPart = 1;
            this.isForwardPoint = false;
            this.isBackPoint = false;
            this.shareID = -1;
            this.shareTime = 0;
            this.shareCB = null;
            this.soundOpen = 1;
            this.shakeOpen = 1;
            this.fbTimer = 0;
            this.FBRewardedVideo = null;
            this.fbInterstitialAd = null;
            DataManager.instance = this;
            this.init();
        }
        init() {
            this.loadDatas();
            Laya.stage.on(Laya.Event.KEY_UP, this, this.onKeyUp);
        }
        loadDatas() {
            let day = (new Date()).getDate();
            this.soundOpen = parseInt(localStorage.getItem('soundOpen') || '1');
            this.shakeOpen = parseInt(localStorage.getItem('shakeOpen') || '1');
            this.lotteryTimes = parseInt(localStorage.getItem('lotteryTimes') || '2');
            this.curPlayerID = parseInt(localStorage.getItem('curPlayerID') || '0');
            this.playerFaceInfo = JSON.parse(localStorage.getItem('playerFaceInfo') || '[]');
            this.chestRewardInfo = JSON.parse(localStorage.getItem('chestRewardInfo') || '[]');
            let sinDaysStr = localStorage.getItem("signDays") || '';
            this.videoUnlockChestTimes = Tools.splitToNumber(localStorage.getItem('videoUnlockChestTimes') || '', ',');
            if (this.videoUnlockChestTimes.length == 0) {
                this.videoUnlockChestTimes = [0, 0, 0, 0, 0, 0, 0, 0];
            }
            if (this.playerFaceInfo.length == 0) {
                this.initPlayerFaceInfo();
            }
            if (this.chestRewardInfo.length == 0) {
                this.initChestRewardInfo();
            }
            if (sinDaysStr.length > 0) {
                this.signDays = Tools.splitToNumber(sinDaysStr, ',');
            }
            this.saveDatas();
        }
        initChestRewardInfo() {
            for (let i = 0; i < 8; i++) {
                let info = {
                    id: i,
                    state: 0,
                };
                this.chestRewardInfo.push(info);
            }
            localStorage.setItem('chestRewardInfo', JSON.stringify(this.chestRewardInfo));
        }
        onKeyUp(e) {
            console.log("你按下的键值为", e.keyCode);
            if (e["keyCode"] == 87) {
                GameScene.instance.hideUI();
            }
            else if (e["keyCode"] == 76) {
            }
            else if (e["keyCode"] == 49) {
            }
            else if (e["keyCode"] == 50) {
            }
            else if (e["keyCode"] == 51) {
            }
            else if (e["keyCode"] == 52) {
            }
            else if (e["keyCode"] == 53) {
            }
        }
        getChestUnlockDescByID(id) {
            let str = '';
            let info = CHEST_INFO[id];
            for (let i = 0; i < info.unlockInfo.length; i++) {
                let data = info.unlockInfo[i];
                if (data.type == CHEST_TYPE.sign) {
                    str = '    Unlock after\n    sign-in for ' + data.count + '    \nconsecutive days';
                }
                else if (data.type == CHEST_TYPE.level) {
                    str = 'Unlock after level ' + data.count;
                }
                else if (data.type == CHEST_TYPE.video) {
                    str = '   Unlock after ' + (data.count - this.videoUnlockChestTimes[id]) + "\n   Watch video";
                }
            }
            return str;
        }
        initPlayerFaceInfo() {
            let info = {
                id: 0,
                state: 2,
            };
            this.playerFaceInfo.push(info);
            this.curPlayerID = info.id;
            localStorage.setItem('playerFaceInfo', JSON.stringify(this.playerFaceInfo));
        }
        getPlayerFaceIDs() {
            let ids = [];
            for (let i = 0; i < this.playerFaceInfo.length; i++) {
                if (this.playerFaceInfo[i].state == 2) {
                    ids.push(this.playerFaceInfo[i].id);
                }
            }
            return ids;
        }
        isUnlockFaceByID(id) {
            for (let i = 0; i < this.playerFaceInfo.length; i++) {
                if (this.playerFaceInfo[i].id == id) {
                    return this.playerFaceInfo[i].state == 1;
                }
            }
            return false;
        }
        isCanUnlockFaceByID(id) {
            let info = SHOP_INFO[id];
            for (let i = 0; i < info.unlockInfo.length; i++) {
                let data = info.unlockInfo[i];
                if (data.type == SHOP_TPYE.exp) {
                    return false;
                }
            }
            for (let i = 0; i < info.unlockInfo.length; i++) {
                let data = info.unlockInfo[i];
                if (data.type == SHOP_TPYE.sign) {
                    if (DataManager.instance.signDays.length < data.count) {
                        return false;
                    }
                }
            }
            return true;
        }
        isCanBuyFaceByID(id) {
            for (let i = 0; i < this.playerFaceInfo.length; i++) {
                if (this.playerFaceInfo[i].id == id) {
                    return this.playerFaceInfo[i].state == 1;
                }
            }
            return false;
        }
        isHaveFaceByID(id) {
            for (let i = 0; i < this.playerFaceInfo.length; i++) {
                if (this.playerFaceInfo[i].id == id) {
                    return this.playerFaceInfo[i].state == 2;
                }
            }
            return false;
        }
        getFaceUnlockDescByID(id) {
            let str = '';
            let info = SHOP_INFO[id];
            let type = 0;
            let index = 0;
            for (let i = 0; i < info.unlockInfo.length; i++) {
                let data = info.unlockInfo[i];
                if (data.type == SHOP_TPYE.sign) {
                    str = '连续签到' + data.count + '天';
                    index = data.count;
                    type = 1;
                }
                else if (data.type == SHOP_TPYE.video && data.count > 0) {
                    str = 'Watch Video';
                    type = 2;
                }
            }
            let isHaveGold = false;
            for (let i = 0; i < info.unlockInfo.length; i++) {
                let data = info.unlockInfo[i];
                if (data.type == SHOP_TPYE.gold && data.count > 0) {
                    isHaveGold = true;
                    str = str.length > 0 ? str + '' + data.count + '金币解锁该角色' : data.count + '金币解锁该角色';
                    index = data.count;
                    type = 3;
                }
            }
            if (type == 3) {
                str = index + " gold coins to unlock the character";
            }
            if (!isHaveGold) {
                str = str + 'Unlock';
                if (type == 1) {
                    str = "Unlock after sign in for " + index + " consecutive days";
                }
                else if (type == 2) {
                    str = "Watch the video to get the character";
                }
                else if (type == 3) {
                    str = index + " gold coins to unlock the character";
                }
            }
            return str;
        }
        getFaceBuyDescByID(id) {
            let str = '';
            let info = SHOP_INFO[id];
            let type = 0;
            let index = 0;
            for (let i = 0; i < info.buyInfo.length; i++) {
                let data = info.buyInfo[i];
                if (data.type == SHOP_TPYE.sign) {
                    str = '连续签到' + data.count + '天';
                    index = data.count;
                    type = 1;
                }
                else if (data.type == SHOP_TPYE.video && data.count > 0) {
                    str = 'Watch Video';
                    type = 2;
                }
            }
            let isHaveGold = false;
            for (let i = 0; i < info.buyInfo.length; i++) {
                let data = info.buyInfo[i];
                if (data.type == SHOP_TPYE.gold && data.count > 0) {
                    isHaveGold = true;
                    str = str.length > 0 ? str + '' + data.count + '金币获得该角色' : data.count + '金币获得该角色';
                    type = 3;
                    index = data.count;
                }
            }
            if (type == 3) {
                str = index + " gold coins to unlock the character";
            }
            if (!isHaveGold) {
                str = str + '获得该角色';
                if (type == 1) {
                    str = "Unlock after sign in for " + index + " consecutive days";
                }
                else if (type == 2) {
                    str = "Watch the video to get the character";
                }
                else if (type == 3) {
                    str = index + " gold coins to unlock the character";
                }
            }
            return str;
        }
        getFaceInfoById(id) {
            for (let i = 0; i < this.playerFaceInfo.length; i++) {
                if (this.playerFaceInfo[i].id == id) {
                    return this.playerFaceInfo[i];
                }
            }
            return null;
        }
        unlockFaceByID(id) {
            let info = this.getFaceInfoById(id);
            if (info) {
                if (info.state == 0) {
                    info.state = 1;
                }
                ;
            }
            else {
                let info = {
                    id: id,
                    state: 1
                };
                this.playerFaceInfo.push(info);
            }
            localStorage.setItem('playerFaceInfo', JSON.stringify(this.playerFaceInfo));
        }
        buyFaceByID(id) {
            let info = this.getFaceInfoById(id);
            if (info) {
                info.state = 2;
            }
            else {
                let data = {
                    id: id,
                    state: 2
                };
                this.playerFaceInfo.push(data);
            }
            localStorage.setItem('playerFaceInfo', JSON.stringify(this.playerFaceInfo));
        }
        saveDatas() {
            localStorage.setItem('soundOpen', this.soundOpen.toString());
            localStorage.setItem('shakeOpen', this.shakeOpen.toString());
            localStorage.setItem('curPlayerID', this.curPlayerID.toString());
        }
        static setStorgeByPlatform(key, value) {
            if (DataManager.platformSDK == null) {
                localStorage.setItem(key, value);
            }
        }
        static getStorgeByPlatform(key) {
            if (DataManager.platformSDK == null) {
                return localStorage.getItem(key);
            }
            else {
                return null;
            }
        }
        static get getScaleRate() {
            let scale_width = Laya.Browser.clientWidth * Laya.Browser.pixelRatio / 750;
            let want_height = scale_width * 1334;
            let scaleRate = 1334 / want_height;
            return scaleRate;
        }
        isChest(id, array) {
            for (let i = 0; i < array.length; i++) {
                if (array[i] == id) {
                    return true;
                }
            }
            return false;
        }
        isSkin(id, array) {
            for (let i = 0; i < array.length; i++) {
                if (array[i] == id) {
                    return true;
                }
            }
            return false;
        }
        initFbLoading() {
            console.log('fb initFbLoading');
            Laya.timer.loop(100, this, this.updateFbLoading);
        }
        updateFbLoading() {
            this.fbTimer += 1;
            if (this.fbTimer < 99) {
                FBInstant.setLoadingProgress(Math.floor(this.fbTimer));
            }
            else {
                Laya.timer.clear(this, this.updateFbLoading);
            }
        }
        loadFbVideo() {
            var self = this;
            var supportedAPIs = FBInstant.getSupportedAPIs();
            if (supportedAPIs.includes('getRewardedVideoAsync')) {
                FBInstant.getRewardedVideoAsync('4864743603539728_5324944030853014').then(function (rewarded) {
                    self.FBRewardedVideo = rewarded;
                    return self.FBRewardedVideo.loadAsync();
                }).then(function () {
                    console.log('加载fb激励视频成功');
                }).catch(function (err) {
                    console.error('加载fb激励视频失败: ' + err.message);
                });
            }
            console.log('fb小游戏' + supportedAPIs);
        }
        playFBVideo(cb) {
            let self = this;
            if (this.FBRewardedVideo != null) {
                this.FBRewardedVideo.showAsync()
                    .then(function () {
                    console.log('FB激励视频播放成功');
                    cb && cb();
                    self.loadFbVideo();
                })
                    .catch(function (e) {
                    console.log('FB激励视频播放失败' + e.message);
                    console.error(e.message);
                });
            }
            else {
                this.loadFbVideo();
            }
        }
        loadFBInterstitialAd() {
            var self = this;
            var supportedAPIs = FBInstant.getSupportedAPIs();
            if (supportedAPIs.includes('getInterstitialAdAsync')) {
                FBInstant.getInterstitialAdAsync('4864743603539728_5324943400853077').then(function (interstitial) {
                    self.fbInterstitialAd = interstitial;
                    return self.fbInterstitialAd.loadAsync();
                }).then(function () {
                    console.log('Interstitial preloaded');
                }).catch(function (err) {
                    console.error('加载FB插屏广告失败: ' + err.message);
                });
            }
        }
        showFBInterstitialAd() {
            var self = this;
            if (this.fbInterstitialAd) {
                this.fbInterstitialAd.showAsync()
                    .then(function () {
                    self.loadFBInterstitialAd();
                    console.log('Interstitial ad finished successfully');
                })
                    .catch(function (e) {
                    console.error(e.message);
                });
            }
            else {
                self.loadFBInterstitialAd();
            }
        }
        showFBBanner(isShow) {
            if (isShow) {
                var supportedAPIs = FBInstant.getSupportedAPIs();
                if (supportedAPIs.includes('loadBannerAdAsync')) {
                    FBInstant.loadBannerAdAsync('4864743603539728_5324942390853178').then(function () {
                        console.log('展示FBBanner广告');
                    }).catch(function (err) {
                        console.error('展示FBBanner广告失败: ' + err.message);
                    });
                }
            }
            else {
                var supportedAPIs = FBInstant.getSupportedAPIs();
                if (supportedAPIs.includes('hideBannerAdAsync')) {
                    FBInstant.hideBannerAdAsync().then(function () {
                        console.log('隐藏banner');
                    }).catch(function (err) {
                        console.error('隐藏banner失败 ' + err.message);
                    });
                }
            }
        }
    }
    DataManager.platform = "";
    DataManager.platformSDK = null;
    DataManager.instance = null;

    class GameData {
        constructor() {
            this.curLevelGetGold = 0;
            this._curKey = 0;
            this._curLevel = 1;
            this._curTotalGold = 0;
        }
        get curKey() {
            return this._curKey;
        }
        set curKey(value) {
            this._curKey = value;
            DataManager.setStorgeByPlatform("curKey", value.toString());
        }
        get curLevel() {
            return this._curLevel;
        }
        set curLevel(value) {
            this._curLevel = value;
            DataManager.setStorgeByPlatform("curLevel", value.toString());
        }
        get curTotalGold() {
            return this._curTotalGold;
        }
        set curTotalGold(value) {
            this._curTotalGold = value;
            DataManager.setStorgeByPlatform("curGold", value.toString());
        }
    }
    GameData.instance = new GameData();
    const GData = GameData.instance;

    class GameCameraFloow extends Laya.Script3D {
        constructor() {
            super(...arguments);
            this.pos = new Laya.Vector3(0, 0, 0);
            this.out = new Laya.Vector3();
            this.up = new Laya.Vector3(0, 1, 0);
        }
        onAwake() {
            GameCameraFloow.instance = this;
            this.upDirection = new Laya.Vector3(0, 1, 0);
        }
        reset() {
            this.node.transform.position = this.originPos;
        }
        setTarget(t) {
            this.target = t;
            this.node = this.owner;
            this.originPos = this.node.transform.position.clone();
            let out = new Laya.Vector3();
            Laya.Vector3.subtract(t.gameobject.transform.position, GameScene.instance.bornPoint, out);
            this.pos = out;
        }
        onUpdate() {
            if (!GameScene.instance || !GameScene.instance.player) {
                return;
            }
            if (this.node && this.node.transform && this.target && this.target.gameobject && this.target.gameobject.parent) {
                this.out.x = this.pos.x + 4 + GameScene.instance.player.cameraOfffset;
                this.out.y = this.pos.y + 12 + Tools.brickHeight + GameScene.instance.player.cameraOfffset;
                this.out.z = this.pos.z + this.target.gameobject.transform.position.z - 8;
                Laya.Vector3.lerp(this.node.transform.position, this.out, 0.1, this.out);
                this.node.transform.position = this.out;
                if (GameScene.instance.player.isCamereRotate) {
                    if (!this.playershadow) {
                        this.playershadow = new Laya.Vector3(GameScene.instance.player.gameobject.transform.position.x, GameScene.instance.player.gameobject.transform.position.y + Tools.brickHeight - 5, GameScene.instance.player.gameobject.transform.position.z);
                    }
                    Laya.Vector3.lerp(this.playershadow, GameScene.instance.player.player.transform.position, 0.1, this.playershadow);
                    this.node.transform.lookAt(this.playershadow, this.upDirection);
                }
            }
        }
        nearTarget() {
            this.pos.x /= 2;
            this.pos.y /= 2;
            this.pos.z /= 2;
        }
    }

    class Brick extends Laya.Script {
        constructor() {
            super();
            this.gameobject = null;
            this.brickProperty = -1;
        }
        onAwake() {
            this.gameobject = this.owner;
        }
    }
    var BrickProperty;
    (function (BrickProperty) {
        BrickProperty[BrickProperty["null"] = -1] = "null";
        BrickProperty[BrickProperty["unwalk"] = 0] = "unwalk";
        BrickProperty[BrickProperty["walk"] = 1] = "walk";
        BrickProperty[BrickProperty["platform"] = 2] = "platform";
        BrickProperty[BrickProperty["stop"] = 3] = "stop";
        BrickProperty[BrickProperty["transfar"] = 4] = "transfar";
        BrickProperty[BrickProperty["turnUp"] = 5] = "turnUp";
        BrickProperty[BrickProperty["turnDown"] = 6] = "turnDown";
        BrickProperty[BrickProperty["turnLeft"] = 7] = "turnLeft";
        BrickProperty[BrickProperty["turnRight"] = 8] = "turnRight";
        BrickProperty[BrickProperty["arrowUp"] = 9] = "arrowUp";
        BrickProperty[BrickProperty["arraowDown"] = 10] = "arraowDown";
        BrickProperty[BrickProperty["arraowLeft"] = 11] = "arraowLeft";
        BrickProperty[BrickProperty["arraowRight"] = 12] = "arraowRight";
    })(BrickProperty || (BrickProperty = {}));

    class GameScene extends Laya.Script3D {
        constructor() {
            super();
            this.scene = null;
            this.player = null;
            this.endPoint = 0;
            this.isMoveMouse = false;
            this.brickArray1 = null;
            this.brickArray2 = null;
            this.brickArray3 = null;
            this.toolArray1 = null;
            this.toolArray2 = null;
            this.toolArray3 = null;
            this.rainbowNumber = 0;
            this.testIndex = 0;
        }
        onAwake() {
            GameScene.instance = this;
            this.scene = this.owner;
            this.brickArray1 = [];
            this.brickArray2 = [];
            this.brickArray3 = [];
            this.toolArray1 = [];
            this.toolArray2 = [];
            this.toolArray3 = [];
            this.cacheBrick1 = new Laya.Sprite3D;
            this.cacheBrick2 = new Laya.Sprite3D;
            this.cacheBrick3 = new Laya.Sprite3D;
            Tools.platformArrayData = [];
            Config.useRetinalCanvas = true;
        }
        async onStart() {
            this.scene.ambientColor = new Laya.Vector3(1, 1, 1);
            var camera = this.scene.getChildByName("Main Camera");
            camera.transform.rotate(new Laya.Vector3(10, 0, 0), true, false);
            camera.enableHDR = false;
            this.gameGamera = camera.addComponent(GameCameraFloow);
            var directionLight = this.scene.getChildByName("Directional Light");
            directionLight.shadow = true;
            directionLight.shadowDistance = 30;
            directionLight.shadowResolution = 1024;
            directionLight.shadowPSSMCount = 1;
            directionLight.shadowPCFType = 1;
            this.water = this.scene.getChildByName('EVN').getChildByName("Water");
            this.ranScene = Math.ceil(Math.random() * 4);
            Laya.UnlitMaterial.load("res/scenes/LayaScene_scene0/Conventional/Assets/WaterMaterials/scene1/water" + this.ranScene + ".lmat", Laya.Handler.create(this, function (mat) {
                this.water.meshRenderer.material = mat;
            }));
            this.brige = await Tools.LoadLhSync("res/scenes/LayaScene_prefabs/Conventional/brige" + this.ranScene + ".lh");
            this.taizi = await Tools.LoadLhSync("res/scenes/LayaScene_prefabs/Conventional/taizi" + this.ranScene + ".lh");
            this.walk = await Tools.LoadLhSync("res/scenes/LayaScene_prefabs/Conventional/walk" + this.ranScene + ".lh");
            this.unwalk = await Tools.LoadLhSync("res/scenes/LayaScene_prefabs/Conventional/unwalk" + this.ranScene + ".lh");
            this.stop = await Tools.LoadLhSync("res/scenes/LayaScene_prefabs/Conventional/stop" + this.ranScene + ".lh");
            this.turn = await Tools.LoadLhSync("res/scenes/LayaScene_prefabs/Conventional/turn" + this.ranScene + ".lh");
            this.arrow = await Tools.LoadLhSync("res/scenes/LayaScene_prefabs/Conventional/arrow" + this.ranScene + ".lh");
            this.transfar = await Tools.LoadLhSync("res/scenes/LayaScene_prefabs/Conventional/transfar" + this.ranScene + ".lh");
            this.platform = await Tools.LoadLhSync("res/scenes/LayaScene_prefabs/Conventional/platform" + this.ranScene + ".lh");
            let randombegin = this.randomChoose(1);
            this.bornPoint = SData.bornPoint[randombegin];
            SData.part1 = SData.storagePart1[randombegin];
            SData.part2 = SData.storagePart2[this.randomChoose(2)];
            SData.part3 = SData.storagePart3[this.randomChoose(3)];
            console.log("随机数1", randombegin);
            console.log("随机数2", this.randomChoose(2));
            console.log("随机数3", this.randomChoose(3));
            this.refreshPlayer(DataManager.instance.curPlayerID);
            this.addBrick(1);
            this.addTaizi(1);
            this.addBrick(2);
            this.addTaizi(2);
            if (!UIMain.instance) {
                Tools.ShowUI("prefab/UIMain.json", 10);
            }
        }
        async hideUI() {
            let node = UIMain.instance.owner.getChildAt(this.testIndex);
            if (node) {
                node.active = false;
                console.log(node.name + '隐藏');
                this.testIndex++;
            }
            await Tools.waitMS(2000);
            this.hideUI();
        }
        onUpdate() {
            if (this.water.meshRenderer.material) {
                this.water.meshRenderer.material.tilingOffsetW -= 0.0005;
                this.water.meshRenderer.material.tilingOffsetZ -= 0.001;
            }
        }
        randomChoose(part) {
            if (part == 1) {
                return Math.floor(Math.random() * 5);
            }
            else if (part == 2) {
                if (GData.curLevel <= 5) {
                    return Math.floor(Math.random() * 5);
                }
                else if (GData.curLevel <= 10) {
                    return Math.floor(Math.random() * 4 + 3);
                }
                else if (GData.curLevel <= 15) {
                    return Math.floor(Math.random() * 5 + 5);
                }
                else if (GData.curLevel <= 20) {
                    return Math.floor(Math.random() * 5 + 6);
                }
                else if (GData.curLevel <= 25) {
                    return Math.floor(Math.random() * 5 + 8);
                }
                else if (GData.curLevel <= 30) {
                    return Math.floor(Math.random() * 5 + 10);
                }
                else {
                    return Math.floor(Math.random() * SData.storagePart2.length);
                }
            }
            else {
                if (GData.curLevel <= 5) {
                    return Math.floor(Math.random() * 5);
                }
                else if (GData.curLevel <= 10) {
                    return Math.floor(Math.random() * 4 + 3);
                }
                else if (GData.curLevel <= 15) {
                    return Math.floor(Math.random() * 5 + 5);
                }
                else if (GData.curLevel <= 20) {
                    return Math.floor(Math.random() * 5 + 6);
                }
                else if (GData.curLevel <= 25) {
                    return Math.floor(Math.random() * 5 + 8);
                }
                else if (GData.curLevel <= 30) {
                    return Math.floor(Math.random() * 7 + 14);
                }
                else {
                    return Math.floor(Math.random() * SData.storagePart3.length);
                    ;
                }
            }
        }
        addBrick(id) {
            let z = 0;
            let height = 0;
            if (id == 1) {
                z = 0;
                height = 0;
            }
            else if (id == 2) {
                z = SData.part1[0].length;
                height = (DataManager.instance.needChildren1) * 0.3;
            }
            else if (id == 3) {
                z = SData.part1[0].length + SData.part2[0].length;
                height = (DataManager.instance.needChildren1) * 0.3 + (DataManager.instance.needChildren2) * 0.3;
            }
            else {
                z = SData.part1[0].length + SData.part2[0].length + SData.part3[0].length;
                height = (DataManager.instance.needChildren1) * 0.3 + (DataManager.instance.needChildren2) * 0.3 + (DataManager.instance.needChildren3) * 0.3;
            }
            for (let i = 0; i < SData["part" + id].length; i++) {
                for (let j = 0; j < SData["part" + id][i].length; j++) {
                    let node = null;
                    let tool = null;
                    if (SData["part" + id][i][j] == 0) {
                        node = this.unwalk.clone();
                    }
                    else {
                        node = this.walk.clone();
                        DataManager.instance["needChildren" + id]++;
                        if (SData["part" + id][i][j] == -2) {
                            tool = this.platform.clone();
                        }
                        else if (SData["part" + id][i][j] == 3) {
                            tool = this.stop.clone();
                            node.active = false;
                        }
                        else if (SData["part" + id][i][j] == 4) {
                            tool = this.transfar.clone();
                            node.active = false;
                            Laya.timer.loop(10, tool, () => {
                                tool.transform.localRotationEulerY += 5;
                            });
                        }
                        else if (SData["part" + id][i][j] == 5) {
                            tool = this.turn.clone();
                            tool.transform.localRotationEulerY = 0;
                        }
                        else if (SData["part" + id][i][j] == 6) {
                            tool = this.turn.clone();
                            tool.transform.localRotationEulerY = 180;
                        }
                        else if (SData["part" + id][i][j] == 7) {
                            tool = this.turn.clone();
                            tool.transform.localRotationEulerY = 90;
                        }
                        else if (SData["part" + id][i][j] == 8) {
                            tool = this.turn.clone();
                            tool.transform.localRotationEulerY = 270;
                        }
                        else if (SData["part" + id][i][j] == 9) {
                            tool = this.arrow.clone();
                            tool.transform.localRotationEulerY = 0;
                        }
                        else if (SData["part" + id][i][j] == 10) {
                            tool = this.arrow.clone();
                            tool.transform.localRotationEulerY = 180;
                        }
                        else if (SData["part" + id][i][j] == 11) {
                            tool = this.arrow.clone();
                            tool.transform.localRotationEulerY = 90;
                        }
                        else if (SData["part" + id][i][j] == 12) {
                            tool = this.arrow.clone();
                            tool.transform.localRotationEulerY = 270;
                        }
                    }
                    if (tool) {
                        tool.transform.localPositionX = i;
                        tool.transform.localPositionY = height;
                        tool.transform.localPositionZ = j + z;
                        this.scene.addChild(tool);
                        if (!this["toolArray" + id][i]) {
                            this["toolArray" + id][i] = new Array();
                        }
                        this["toolArray" + id][i][j] = tool;
                    }
                    else {
                        if (!this["toolArray" + id][i]) {
                            this["toolArray" + id][i] = new Array();
                        }
                        this["toolArray" + id][i][j] = null;
                    }
                    if (node) {
                        if (node.name == "walk" + this.ranScene) {
                            node.meshRenderer.castShadow = true;
                            node.transform.localPositionX = i;
                            node.transform.localPositionY = height;
                            node.transform.localPositionZ = j + z;
                        }
                        else {
                            node.active = false;
                            node.transform.localPositionX = i;
                            node.transform.localPositionY = height + 0.1;
                            node.transform.localPositionZ = j + z;
                        }
                        this.scene.addChild(node);
                        let brick = node.addComponent(Brick);
                        brick.brickProperty = SData["part" + id][i][j];
                        if (!this["brickArray" + id][i]) {
                            this["brickArray" + id][i] = new Array();
                        }
                        this["brickArray" + id][i].push(brick);
                    }
                }
            }
            Tools.searchData(SData["part" + id], id);
        }
        addRainbow() {
            this.rainBow = this.brige.clone();
            this.rainBow.transform.position = new Laya.Vector3(4, (DataManager.instance.needChildren1) * 0.3 + (DataManager.instance.needChildren2) * 0.3, 41 + SData.part1[0].length + SData.part2[0].length + SData.part3[0].length);
            this.scene.addChild(this.rainBow);
            this.addPartRainbow();
        }
        addPartRainbow() {
            this.beginTaizi = this.rainBow.getChildByName("changtaizi");
            this.rainbowNumber = Math.floor(DataManager.instance.needChildren3 / 11);
            for (let i = 1; i <= this.rainbowNumber; i++) {
                if (this.rainBow.getChildByName("changtaizi" + i)) {
                    this.rainBow.getChildByName("changtaizi" + i).active = true;
                }
            }
            if (this.rainBow.getChildByName("changtaizi" + (this.rainbowNumber))) {
                this.rainBow.getChildByName("zhongdian").transform.localPositionZ = this.rainBow.getChildByName("changtaizi" + this.rainbowNumber).transform.localPositionZ + 24;
            }
            this.endPoint = this.rainbowNumber * 10 + 30;
        }
        addTaizi(id) {
            let z = 0;
            let cacheZ = 0;
            let height = 0;
            if (id == 1) {
                z = 0;
                cacheZ = SData.part1[0].length - 1;
                height = 0;
            }
            else if (id == 2) {
                z = SData.part1[0].length;
                cacheZ = SData.part1[0].length + SData.part2[0].length - 1;
                height = (DataManager.instance.needChildren1) * 0.3 - 0.1;
            }
            else if (id == 3) {
                z = SData.part1[0].length + SData.part2[0].length;
                cacheZ = SData.part1[0].length + SData.part2[0].length + SData.part3[0].length - 1;
                height = (DataManager.instance.needChildren1 + DataManager.instance.needChildren2) * 0.3 - 0.1;
            }
            else {
                z = SData.part1[0].length + SData.part2[0].length + SData.part3[0].length;
                height = (DataManager.instance.needChildren1) * 0.3 + (DataManager.instance.needChildren2) * 0.3 + (DataManager.instance.needChildren3) * 0.3;
            }
            for (let i = 0; i < DataManager.instance["needChildren" + id]; i++) {
                let b = this.walk.clone();
                this["cacheBrick" + id].addChild(b);
                b.transform.localPosition = new Laya.Vector3(0, i * 0.3, 0);
            }
            this["cacheBrick" + id].transform.position = new Laya.Vector3(4, height, cacheZ);
            this.scene.addChild(this["cacheBrick" + id]);
            this["cacheBrick" + id].active = false;
            this["taizi" + id] = this.taizi.clone();
            this["taizi" + id].getChildByName("Cube").meshRenderer.receiveShadow = true;
            this["taizi" + id].transform.localScale = new Laya.Vector3(0.9, id, SData["part" + id][0].length / 10);
            this["taizi" + id].transform.localPosition = new Laya.Vector3(4, -10 + height - (id - 1) * 10, -0.5 + z);
            this.scene.addChild(this["taizi" + id]);
        }
        async refreshPlayer(id) {
            if (this.playerModel) {
                this.playerModel.removeSelf();
                this.playerModel.destroy();
            }
            this.playerModel = await Tools.LoadLhSync("res/scenes/LayaScene_prefabs/Conventional/player" + id + ".lh");
            this.scene.addChild(this.playerModel);
            let player = Tools.GetChildByName(this.playerModel, "LittleMan_Mesh");
            player.skinnedMeshRenderer.castShadow = true;
            this.player = this.playerModel.addComponent(Player);
            this.gameGamera.setTarget(this.player);
        }
        initOrChangeScene() {
            Tools.ShowUI("prefab/Loading.json", 1000);
            DataManager.instance.needChildren1 = 0;
            DataManager.instance.needChildren2 = 0;
            DataManager.instance.needChildren3 = 0;
            GData.curLevel += 1;
            Tools.brickHeight = 0;
            Start.instance.showGameScene();
        }
    }

    class Start extends Laya.Script {
        onAwake() {
            Start.instance = this;
        }
        async onStart() {
            DataManager.platformSDK = null;
            await Tools.ShowUI("prefab/Loading.json", 1000);
            let curLevel = Number(DataManager.getStorgeByPlatform("curLevel"));
            GData.curLevel = curLevel == 0 ? 1 : curLevel;
            let curGold = Number(DataManager.getStorgeByPlatform("curGold"));
            GData.curTotalGold = curGold == 0 ? 0 : curGold;
            let curKey = Number(DataManager.getStorgeByPlatform("curKey"));
            GData.curKey = curKey == 0 ? 0 : curKey;
            this.showGameScene();
            Tools.changeWxBanner();
        }
        showGameScene() {
            if (this.gameScene) {
                this.gameScene.removeSelf();
                this.gameScene.destroy();
            }
            Laya.Scene3D.load("res/scenes/LayaScene_scene0/Conventional/scene0.ls", Laya.Handler.create(this, async (scene) => {
                Laya.timer.once(100, this, () => {
                    this.gameScene = scene;
                    Laya.stage.addChild(scene);
                    scene.zOrder = 1;
                    scene.addComponent(GameScene);
                });
            }));
        }
    }

    class QCrossWidget6 extends Laya.Script {
        constructor() {
            super(...arguments);
            this._list = null;
            this._pageItem = null;
            this._pageRecItem = null;
            this._jumpList = null;
            this._items = [];
            this.panel = null;
            this.interval = 0;
            this.pageValue = 0;
            this.dict = 15;
            this.pauseTime = 0;
            this.page = 0;
            this.canMove = false;
        }
        onAwake() {
            if (!this.owner)
                return;
            this.panel = this.owner.getChildByName("panel");
            if (this.panel) {
                let ratio = 1;
                if (cc.winSize.height < cc.winSize.width) {
                    ratio = cc.winSize.width / 1920 * 0.7;
                }
                else {
                    ratio = cc.winSize.width / 1080;
                }
                this.owner.scale(ratio, ratio);
                this._list = this.panel.getChildByName("list");
            }
            else {
                this._list = this.owner.getChildByName("list");
            }
            this._list.hScrollBarSkin = "";
        }
        onEnable() {
            this._initWidget();
        }
        _initWidget() {
            this._jumpList = utils.getRecommondGameList();
            if (this._jumpList && this._jumpList.length > 0) {
            }
            else {
                cc.warn("交叉推广数据为null, 6元素交叉推广组件不显示!");
                this.owner.destroy();
                return;
            }
            let data = [];
            for (let i = 0; i < this._jumpList.length; i++) {
                data.push({ "id": i, "gameData": this._jumpList[i] });
            }
            this._list.array = data;
            this._list.renderHandler = new Laya.Handler(this, this.onListRender);
            this.interval = 1;
            if (utils.getServelCofig() && utils.getServelCofig().statement_auto_refresh) {
                this.interval = utils.getServelCofig().statement_auto_refresh;
            }
            utils.showLog(`结算交叉推广组件${this.interval}秒自动刷新`);
            this.pageMax = Math.ceil(this._jumpList.length / 6);
            this.pageValue = (this._list.scrollBar.max + this._list.width) / (Math.ceil(this._jumpList.length / 2));
        }
        onListRender(item, index) {
            let qcrossWidgetItem = item.getComponent(QCrossWidgetItem);
            qcrossWidgetItem._location = "isMoreGame";
            let data = item.dataSource.gameData;
            if (data && data.logo) {
                qcrossWidgetItem.init(data);
            }
            else {
                item.visible = false;
            }
        }
        onUpdate() {
            this.pauseTime += Laya.timer.delta;
            if (this.pauseTime > 2 * 1000) {
                this.canMove = true;
            }
            if (this.dict > 0) {
                if (this._list.scrollBar.value >= this.pageValue * 3 * this.page || this._list.scrollBar.value >= this._list.scrollBar.max) {
                    this.canMove = false;
                    this.pauseTime = 0;
                    this.page = Math.ceil(this._list.scrollBar.value / (this.pageValue * 3)) + 1;
                }
                if (this._list.scrollBar.value >= this._list.scrollBar.max) {
                    this.dict = -Math.abs(this.dict);
                    this.canMove = false;
                    this.pauseTime = 0;
                }
            }
            if (this.dict < 0) {
                if (this._list.scrollBar.value <= this.pageValue * 3 * this.page) {
                    this.canMove = false;
                    this.pauseTime = 0;
                    this.page = Math.ceil(this._list.scrollBar.value / (this.pageValue * 3)) - 1;
                }
                if (this._list.scrollBar.value <= 0) {
                    this.dict = Math.abs(this.dict);
                    this.canMove = false;
                    this.pauseTime = 0;
                }
            }
            if (this.canMove) {
                this._list.scrollBar.value += this.dict;
            }
        }
    }

    class YZ_GameExitDialog extends Laya.Script {
        constructor() {
            super(...arguments);
            this._jumpList = null;
            this._items = [];
            this._pageView = null;
            this._list = null;
            this._pageRecItem = null;
            this._btnCanel = null;
            this._btnOk = null;
            this._panel = null;
            this.nativeData = null;
            this._nativeIsShow = false;
        }
        onClickBtn(e) {
            switch (e.target.name) {
                case "btnCancel":
                    this.onBtnCanelHandler();
                    break;
                case "btnOk":
                    this.onBtnOkHandler();
                    break;
            }
        }
        onAwake() {
            this._panel = this.owner.getChildByName("Panel");
            this._pageView = this._panel.getChildByName("PageView");
            this._list = this._pageView.getChildByName("view");
            console.log("this._list:", this._list);
            this._btnCanel = this._panel.getChildByName("btnCancel");
            this._btnOk = this._panel.getChildByName("btnOk");
            let ratio = 1;
            if (cc.winSize.height < cc.winSize.width) {
                ratio = cc.winSize.width / 1920 * 0.7;
            }
            else {
                ratio = cc.winSize.width / 1080;
            }
            this.owner.scale(ratio, ratio);
            this.owner.on(Laya.Event.CLICK, this, this.onClickBtn);
            this._jumpList = utils.getRecommondGameList();
            if (this._jumpList && this._jumpList.length > 0) {
                this._initWidget();
            }
        }
        hideLastNode() {
            for (let i = 5; i > 2; i--) {
            }
        }
        onBtnCanelHandler() {
            utils.showLog("点击取消按钮！");
            this.owner.destroy();
        }
        onBtnOkHandler() {
            utils.showLog("点击确定按钮！");
            utils.Tool_Native.GameExit();
        }
        _initWidget() {
            this._jumpList = utils.getRecommondGameList();
            if (this._jumpList && this._jumpList.length > 0) {
            }
            else {
                cc.warn("交叉推广数据为null");
                this.owner.destroy();
                return;
            }
            let data = [];
            for (let i = 0; i < this._jumpList.length; i++) {
                data.push({ "id": i, "gameData": this._jumpList[i] });
            }
            this._list.array = data;
            this._list.renderHandler = new Laya.Handler(this, this.onListRender);
        }
        onListRender(item, index) {
            let qcrossWidgetItem = item.getComponent(QCrossWidgetItem);
            qcrossWidgetItem._location = "isMoreGame";
            let data = item.dataSource.gameData;
            if (data && data.logo) {
                qcrossWidgetItem.init(data);
            }
            else {
                item.visible = false;
            }
        }
    }

    class LogOutView extends Laya.Script {
        constructor() {
            super(...arguments);
            this.scrollView = null;
            this.clearBtn = null;
            this.showLogViewBtn = null;
            this.hideLogViewBtn = null;
            this.isNeedFresh = false;
        }
        onStart() {
            this.initUi();
            this.owner.on(Laya.Event.CLICK, this, this.initListener);
            this.initData();
            cc.logView = this;
        }
        initUi() {
            if (!this.owner)
                return;
            this.scrollView = this.owner.getChildByName("ScrollView");
            this.showLogViewBtn = this.owner.getChildByName("BtnShowLogView");
            this.hideLogViewBtn = this.owner.getChildByName("BtnHideLogView");
            this.clearBtn = this.owner.getChildByName("BtnClearLog");
            this.scrollView.vScrollBarSkin = '';
            this.scrollView.vScrollBar.elasticDistance = 20;
            this.html3 = new Laya.HTMLDivElement();
            this.html3.style.lineHeight = 30;
            this.html3.style.width = 640;
            this.html3.style.wordWrap = true;
            this.html3.style.align = "left";
            this.scrollView.addChild(this.html3);
            this.html = "<span style='color:#000;font-weight:bold;fontSize:30'>-.-  -.-   0.0  0.0   初始化日志   -.-  -.-   0.0  0.0</span><br/>";
        }
        addLog(logContent, ...optionalParams) {
            let str = "";
            str += logContent;
            optionalParams.forEach(element => {
                str += "," + element;
            });
            this.html += `<span style='color:#000;font-weight:bold;fontSize:30'>${str}</span><br/>`;
            this.isNeedFresh = true;
        }
        addWarn(logContent, ...optionalParams) {
            let str = "";
            str += logContent;
            optionalParams.forEach(element => {
                str += "," + element;
            });
            this.html += `<span style='color:#ddec30;font-weight:bold;fontSize:30'>${str}</span><br/>`;
            this.isNeedFresh = true;
        }
        addError(logContent, ...optionalParams) {
            let str = "";
            str += logContent;
            optionalParams.forEach(element => {
                str += "," + element;
            });
            this.html += `<span style='color:#f00;font-weight:bold;fontSize:30'>${str}</span><br/>`;
            this.isNeedFresh = true;
        }
        onUpdate() {
            if (!this.isNeedFresh)
                return;
            this.html3.innerHTML = this.html;
            this.isNeedFresh = false;
        }
        initListener(e) {
            switch (e.target.name) {
                case "BtnHideLogView":
                    this.onHideLogView();
                    break;
                case "BtnClearLog":
                    this.clearLogView();
                    break;
                case "BtnShowLogView":
                    this.onShowLogView();
                    break;
            }
        }
        initData() {
        }
        onShowLogView() {
            this.scrollView.visible = true;
            this.clearBtn.visible = true;
            this.showLogViewBtn.visible = false;
            this.hideLogViewBtn.visible = true;
        }
        onHideLogView() {
            this.scrollView.visible = false;
            this.clearBtn.visible = false;
            this.showLogViewBtn.visible = true;
            this.hideLogViewBtn.visible = false;
        }
        clearLogView() {
            this.html = "";
            this.isNeedFresh = true;
        }
    }

    class MoreGamesPanel extends Laya.Script {
        constructor() {
            super(...arguments);
            this._panel = null;
            this._gameList = null;
            this._originScale = 1;
            this._gameItems = [];
            this._jumpList = null;
            this._dataDirty = false;
            this._closeBtnRight = null;
            this._closeBtnLine = null;
            this._closeButton = null;
            this._star = null;
            this._items = [];
        }
        onAwake() {
            if (!this.owner)
                return;
            if (!PlatUtils.IsNativeAndroid) {
                utils.adManager.HideBanner(BannerLocation.Home);
            }
            this._panel = this.owner.getChildByName("Panel");
            this._closeButton = this._panel.getChildByName("btnClose");
            this._gameList = this._panel.getChildByName("GameList");
            this._gameList.vScrollBarSkin = "";
            this._gameList.elasticEnabled = true;
            this._mask = this.owner.getChildByName("Mask");
            this._closeButton.on(Laya.Event.CLICK, this, this.onCloseBtnHandler);
            this.initList();
            this.owner.visible = false;
            let ratio = 1;
            if (cc.winSize.height < cc.winSize.width) {
                ratio = cc.winSize.width / 1920 * 0.6;
            }
            else {
                ratio = cc.winSize.width / 1080;
            }
            this._panel.scale(ratio, ratio);
            this._mask.width = cc.winSize.width;
            this._mask.height = cc.winSize.height;
            this._originScale = ratio;
        }
        initList() {
            var data = [];
            for (let i = 0; i < 15; i++) {
                data.push({ "id": i });
            }
            this._gameList.array = data;
            this._gameList.renderHandler = new Laya.Handler(this, this.onListRender);
        }
        onListRender(item, index) {
            let qcrossWidgetItem = item.getComponent(QCrossWidgetItem);
            qcrossWidgetItem._location = "isMoreGame";
            let data = item.dataSource.gameData;
            if (data && data.logo) {
                qcrossWidgetItem.init(data);
            }
            else {
                item.visible = false;
            }
        }
        _initWidget() {
            utils.postRecommentShowData(SubLocation.isMoreGame);
            utils.showLog("MoreGamePannel: jumpList=", this._jumpList);
            var data = [];
            for (let i = 0; i < this._jumpList.length; i++) {
                data.push({ "id": i, "gameData": this._jumpList[i] });
            }
            utils.showLog("给list赋值");
            this._gameList.array = data;
            this._gameList.refresh();
        }
        onUpdate() {
            if (this._dataDirty) {
                this._dataDirty = false;
                this._updatePanel();
            }
        }
        _updatePanel() {
            this._initWidget();
            return;
            if (this._jumpList.length <= 5) {
                this._closeBtnRight.active = false;
                this._closeBtnLine.active = true;
            }
            else {
                this._closeBtnRight.active = true;
                this._closeBtnLine.active = false;
                for (let i = 0; i < this._jumpList.length; i++) {
                    if (this._gameItems[i]) {
                        this._gameItems[i].init(this._jumpList[i], SubLocation.isMoreGame);
                        this._gameItems[i].owner.active = true;
                    }
                }
            }
        }
        init(jumpList) {
            this._jumpList = jumpList;
            this._dataDirty = true;
        }
        show() {
            this.owner.visible = true;
            if (utils.getServelCofig() && utils.getServelCofig().more_game_skin == 2) {
                let panelWidth = this._panel.width;
                this._panel.x = -panelWidth;
                Laya.Tween.to(this._panel, { x: 0 }, 800, Laya.Ease.circOut, Laya.Handler.create(this, () => {
                }));
            }
        }
        hide() {
            let self = this;
            self.owner.visible = false;
        }
        onCloseBtnHandler(event, data) {
            if (utils.getServelCofig() && utils.getServelCofig().more_game_skin == 2) {
                let panelWidth = this._panel.width;
                Laya.Tween.to(this._panel, { x: -panelWidth }, 1000, Laya.Ease.circIn, Laya.Handler.create(this, () => {
                    this.hide();
                }));
            }
            else {
                this.hide();
            }
        }
    }

    class MoreGamesWidget extends Laya.Script {
        constructor() {
            super(...arguments);
            this.prefab = null;
            this.prefab1 = null;
            this.btnMoreGames = null;
            this.moreGamesPanel = null;
            this.isReve = false;
        }
        onAwake() {
            if (!this.owner)
                return;
            this.btnMoreGames = this.owner.getChildByName("Btn_MoreGames");
            this.btnMoreGames.visible = false;
            if (utils.getServelCofig() && utils.getServelCofig().moregame_bg_img) {
                this.btnMoreGames.skin = utils.getServelCofig().moregame_bg_img;
            }
            this._redPoint = this.btnMoreGames.getChildByName("redpoint");
            if (PlatUtils.Is4399) {
                this._redPoint.visible = false;
            }
            else {
                this._redPoint.visible = true;
            }
            if (this._redPoint) {
                this._redPoint.pivot(13, 13);
            }
        }
        onUpdate() {
            if (this._redPoint) {
                if (this._redPoint.scaleX >= 1) {
                    this.isReve = true;
                }
                if (this._redPoint.scaleX <= 0.5) {
                    this.isReve = false;
                }
                if (!this.isReve) {
                    this._redPoint.scaleX += 0.01;
                    this._redPoint.scaleY += 0.01;
                }
                else {
                    this._redPoint.scaleX -= 0.01;
                    this._redPoint.scaleY -= 0.01;
                }
            }
        }
        onEnable() {
            this.btnMoreGames.on(Laya.Event.CLICK, this, this.onBtnClickedHandler);
            this._setBtnVisible();
        }
        onDisable() {
            this.btnMoreGames.off(Laya.Event.CLICK, this, this.onBtnClickedHandler);
            utils.unregisterServerInitEvent(this);
        }
        _setBtnVisible() {
            let valid = true;
            if (utils.isShowMoreGamesSidePanel()) {
                if (PlatUtils.IsQQ) {
                    this.btnMoreGames.visible = true;
                }
                else if (PlatUtils.Is4399) {
                    this.btnMoreGames.visible = true;
                }
                else if (PlatUtils.IsNativeAndroid && utils.Tool_Native && utils.config.nativeAndroidConfig.channel == "oppo") {
                    this.btnMoreGames.visible = true;
                }
                else {
                    let gameList = utils.getRecommondGameList();
                    if (gameList) {
                        if (gameList.length > 0) {
                            this.btnMoreGames.visible = true;
                        }
                        else {
                            cc.warn("交叉推广数据列表长度为0, 更多游戏按钮不显示!");
                            valid = false;
                        }
                    }
                    else {
                        cc.warn("交叉推广数据列表数据为null, 更多游戏按钮不显示!");
                        valid = false;
                    }
                }
            }
            else {
                valid = false;
            }
            if (!valid) {
                this.owner.visible = false;
            }
        }
        onBtnClickedHandler(event, data) {
            if (PlatUtils.IsQQ) {
                utils.adManager.ShowAppBox(true);
            }
            else if (PlatUtils.IsDouyin) {
                utils.Tool_Douyin.showMoreGamesModal();
            }
            else if (PlatUtils.IsNativeAndroid && utils.Tool_Native && utils.Tool_Native.moreGameShowType == 1) {
                utils.Tool_Native.showMoreGames();
            }
            else if (PlatUtils.Is4399) {
                utils.Tool_4399.showRecommend();
            }
            else {
                if (utils.getServelCofig().show_oppo_rec && utils.getServelCofig().show_oppo_rec == "true") {
                    utils.showLog("服务器配置显示官方互推！");
                    utils.oppoTool.showOppoGamePortal();
                    return;
                }
                let jumpList = utils.getRecommondGameList();
                if (jumpList && jumpList.length > 0) {
                    utils.showLog("MoreGamePanel 交叉推广数据......:" + JSON.stringify(jumpList));
                    let panel;
                    if (utils.getServelCofig() && utils.getServelCofig().more_game_skin == 2) {
                        panel = cc.instantiate(this.prefab1);
                    }
                    else {
                        panel = cc.instantiate(this.prefab);
                    }
                    this.moreGamesPanel = panel.getComponent(MoreGamesPanel);
                    cc.addToStage(panel, 9999);
                    this.moreGamesPanel.init(jumpList);
                    this.moreGamesPanel.show();
                }
                else {
                    utils.showLog("获取交叉推广数据失败!");
                }
            }
        }
    }

    class OpenRedBagPanel extends Laya.Script {
        constructor() {
            super(...arguments);
            this.panel = null;
            this.onOpenPanel = null;
            this.xiaokuang = null;
            this.btnOpen = null;
            this.btn2BK = null;
            this.kai = null;
            this.btn_openVideo = null;
            this.rewardPanel = null;
            this.moneyLbl = null;
            this.totalMoneyLabel = null;
            this.xiaokuang1 = null;
            this.btnDouble = null;
            this.btnClose = null;
            this._redBagInfo = null;
            this._proInfo = null;
            this.selfView = null;
            this._title = null;
            this._btnVideoOpen = null;
            this._money = 0;
            this._canShowVideoOpen = false;
            this._show_type = 1;
        }
        onAwake() {
            if (!PlatUtils.IsNativeAndroid) {
                utils.adManager.HideBanner(BannerLocation.Home);
            }
            this.selfView = this.owner;
            this.panel = this.owner.getChildByName("panel");
            this.onOpenPanel = this.panel.getChildByName("onOpenPanel");
            this._title = this.onOpenPanel.getChildByName("title");
            this.xiaokuang = this.onOpenPanel.getChildByName("xiaokuang");
            this.btnOpen = this.onOpenPanel.getChildByName("btnOpen");
            this.btn2BK = this.btnOpen.getChildByName("btn2BK");
            this._btnVideoOpen = this.btnOpen.getChildByName("btn_openVideo");
            this.kai = this.btnOpen.getChildByName("kai");
            this.btn_openVideo = this.btnOpen.getChildByName("btn_openVideo");
            this.rewardPanel = this.panel.getChildByName("rewardPanel");
            this.totalMoneyLabel = this.rewardPanel.getChildByName("totalMoneyLabel");
            this.moneyLbl = this.rewardPanel.getChildByName("moneyLbl");
            this.xiaokuang1 = this.rewardPanel.getChildByName("xiaokuang1");
            this.btnDouble = this.rewardPanel.getChildByName("btnDouble");
            this.btnClose = this.panel.getChildByName("btnClose");
            this.btnDouble.on(Laya.Event.CLICK, this, this.onBtnDoubleMoney);
            this.xiaokuang1.on(Laya.Event.CLICK, this, this.showWithDrawalPanel);
            this.xiaokuang.on(Laya.Event.CLICK, this, this.showWithDrawalPanel);
            this.btnOpen.on(Laya.Event.CLICK, this, this.openRedBag);
            this.btnClose.on(Laya.Event.CLICK, this, this.onCloseBtnHandler);
            this._redBagInfo = utils.yzRedBagInfo;
            this._proInfo = utils.yzRedBagInfo.curProgressInfo;
            let ratio = 1;
            if (cc.winSize.height < cc.winSize.width) {
                ratio = cc.winSize.width / 1920 * 0.5;
            }
            else {
                ratio = cc.winSize.width / 1080;
            }
            this.panel.scale(ratio, ratio);
            this.init();
        }
        openRedBag() {
            if (this._redBagInfo.progress < this._redBagInfo.totalProgress && !this._redBagInfo.isFreeRedBag && this._redBagInfo.freeRedBagCount <= 0)
                return;
            this.btnClose.alpha = 0;
            this.btnClose.visible = true;
            if (this._canShowVideoOpen) {
                utils.adManager.ShowVideo((res, msg) => {
                    if (res) {
                        utils.SendEvent('拆红包弹窗-视频拆红包成功！');
                        Laya.timer.frameOnce(1, this, () => {
                            this.showRedBag();
                        });
                    }
                    else {
                        utils.SendEvent('拆红包弹窗-视频拆红包失败！');
                        utils.showMsg(msg ? msg : "视频加载失败！");
                        let timeout = utils.ServerConfig.red_bag_close_btn_show_delay ? utils.ServerConfig.red_bag_close_btn_show_delay : 0;
                        setTimeout(() => {
                            utils.showLog("拆红包关闭按钮延迟显示 " + timeout + "秒显示！");
                            this.btnClose.alpha = 1;
                        }, timeout * 1000);
                    }
                });
            }
            else {
                this.showRedBag();
            }
        }
        showRedBag() {
            let money = 0;
            let proInfo = this._proInfo;
            utils.showLog("proInfo ", JSON.stringify(proInfo));
            money = parseFloat((Math.random() * (proInfo.max_money - proInfo.min_money) + proInfo.min_money).toFixed(3));
            utils.showLog("红包金额：" + money);
            this._money = money;
            this._redBagInfo.balance = parseFloat((this._redBagInfo.balance + money).toFixed(3));
            if (this._redBagInfo.isFreeRedBag && this._show_type == 1) {
                this._redBagInfo.lastOpenFreeRedBagTime = new Date().toDateString();
            }
            if (this._show_type == 2) {
                this._redBagInfo.progress -= this._redBagInfo.totalProgress;
            }
            this._redBagInfo.totalMoney = parseFloat((this._redBagInfo.totalMoney + money).toFixed(3));
            this.moneyLbl.text = `¥${money}元`;
            this.totalMoneyLabel.text = `累计获得现金${this._redBagInfo.totalMoney}元`;
            this.rewardPanel.scaleX = 0;
            this.rewardPanel.visible = true;
            Laya.Tween.to(this.onOpenPanel, { scaleX: 0, scaleY: 1 }, 300, null, Laya.Handler.create(this, () => {
                this.onOpenPanel.visible = false;
                this.btnClose.alpha = 1;
                Laya.Tween.to(this.rewardPanel, { scaleX: 1, scaleY: 1 }, 300, null, Laya.Handler.create(this, null));
            }));
        }
        onBtnDoubleMoney(e) {
            utils.SendEvent("拆红包弹窗-点击视频双倍领取");
            utils.adManager.ShowVideo((ret, msg) => {
                if (ret) {
                    this._redBagInfo.balance = parseFloat((this._redBagInfo.balance + this._money).toFixed(3));
                    this._redBagInfo.totalMoney = parseFloat((this._redBagInfo.totalMoney + this._money).toFixed(3));
                    this.totalMoneyLabel.text = `累计获得现金${this._redBagInfo.totalMoney}元`;
                    utils.showMsg("领取双倍红包成功！");
                    utils.SendEvent("拆红包弹窗-视频双倍领取成功");
                    e.target.visible = false;
                }
                else {
                    utils.showMsg(msg);
                    utils.SendEvent("拆红包弹窗-视频双倍领取失败");
                }
            });
        }
        showWithDrawalPanel() {
            utils.SendEvent("拆红包弹窗-点击提现上报");
            utils.showWithdrawalPanel();
        }
        init() {
            utils.SendEvent("拆红包弹窗-展示成功！" + this._show_type + " :" + this._redBagInfo.isFreeRedBag);
            (this._title.getChildAt(0)).visible = this._show_type == 1 && this._redBagInfo.isFreeRedBag;
            (this._title.getChildAt(1)).visible = this._show_type == 2;
            (this._title.getChildAt(2)).visible = this._show_type == 3;
            if (this._proInfo.type == 2 && this._show_type == 2) {
                this._canShowVideoOpen = true;
                this._btnVideoOpen.visible = true;
            }
            else {
                this._canShowVideoOpen = false;
                this._btnVideoOpen.visible = false;
            }
            if (utils.ServerConfig.red_bag_open_view_close_btn_show_delay && utils.ServerConfig.red_bag_open_view_close_btn_show_delay > 0) {
                this.btn2BK.visible = true;
                this.kai.gray = true;
                this.btnClose.alpha = 0;
                let timeout = utils.ServerConfig.red_bag_open_view_close_btn_show_delay ? utils.ServerConfig.red_bag_open_view_close_btn_show_delay : 0;
                utils.showLog("拆红包关闭按钮延迟显示 " + timeout + "秒显示！");
                setTimeout(() => {
                    this.btnClose.alpha = 1;
                }, timeout * 1000);
            }
            else {
                if (this._redBagInfo.progress < this._redBagInfo.totalProgress && !this._redBagInfo.isFreeRedBag && this._redBagInfo.freeRedBagCount <= 0) {
                    (this.btnOpen.getChildAt(0)).visible = true;
                    (this.btnOpen.getChildAt(1)).disabled = true;
                    this.btnClose.alpha = 0;
                    let timeout = utils.ServerConfig.red_bag_close_btn_show_delay ? utils.ServerConfig.red_bag_close_btn_show_delay : 0;
                    utils.showLog("拆红包关闭按钮延迟显示 " + timeout + "秒显示！");
                    setTimeout(() => {
                        this.btnClose.alpha = 1;
                    }, timeout * 1000);
                }
                else {
                    this.btnClose.visible = false;
                }
            }
            this.totalMoneyLabel.text = `累计获得现金${this._redBagInfo.totalMoney}元`;
        }
        onCloseBtnHandler(e) {
            this.hide();
        }
        initData(showType) {
            this._show_type = showType;
        }
        show() {
            this.selfView.visible = true;
        }
        hide() {
            this.selfView.visible = false;
        }
    }

    class PrivacyPolicy extends Laya.Script {
        constructor() {
            super(...arguments);
            this.text = null;
        }
        onAwake() {
            this.text = this.owner.getChildByName("text");
            this.text.on(Laya.Event.CLICK, this, this.onclick);
        }
        onclick() {
            utils.showLog("点击隐私政策");
            utils.Tool_Native && utils.Tool_Native.showPrivacyAgreement();
        }
    }

    class YZ_ListView extends Laya.Script {
        constructor() {
            super(...arguments);
            this._content = null;
            this._visibleCount = 5;
            this._totalCount = 0;
            this._itemArray = [];
            this._recommendData = null;
            this._dataDirty = false;
            this._isInit = false;
            this.prefab = null;
            this._timeTmp = 0;
            this._autoScrollInterval = 1000;
            this._scrollValue = 0;
            this.curIndex = 0;
            this.lastIndex = 0;
            this.isMouse = false;
        }
        onAwake() {
            if (!this.owner)
                return;
            this._gameList = this.owner.getChildByName("content").getChildByName("list");
            this._gameList.hScrollBarSkin = "";
            this.btn_close = this.owner.getChildByName("content").getChildByName("btn_close");
        }
        onUpdate() {
            if (this._dataDirty) {
                this._dataDirty = false;
                this._updateContent();
            }
            this.autoScroll();
        }
        autoScroll() {
            this._timeTmp += Laya.timer.delta;
            if (this._timeTmp >= this._autoScrollInterval && !this.isMouse) {
                this._timeTmp = 0;
                this._gameList.scrollBar.isVertical = false;
                this.lastIndex = this.curIndex;
                if (this.curIndex <= 5) {
                    this.curIndex = this.curIndex + this._totalCount;
                }
                if (this.curIndex >= (this._totalCount * 2 - 5)) {
                    this.curIndex = this.curIndex - this._totalCount;
                }
                this._gameList.scrollBar.value = this.curIndex * this.singleValue;
                this.curIndex++;
                this._scrollValue = this.curIndex * this.singleValue;
            }
            else {
                if (this._gameList.scrollBar.value <= this._scrollValue && !this.isMouse) {
                    if ((this._scrollValue - this._gameList.scrollBar.value) > 10) {
                        this._gameList.scrollBar.value += 10;
                    }
                    else {
                        this._gameList.scrollBar.value = this._scrollValue;
                    }
                }
            }
        }
        getCurIndex() {
            let restValue = this._gameList.scrollBar.value % this.singleValue;
            this.curIndex = Math.floor(this._gameList.scrollBar.value / this.singleValue);
            if (this.curIndex <= 5) {
                this.curIndex = this.curIndex + this._totalCount;
            }
            if (this.curIndex >= (this._totalCount * 2 - 5)) {
                this.curIndex = this.curIndex - this._totalCount;
            }
            this._gameList.scrollBar.value = this.curIndex * this.singleValue + restValue;
            this.curIndex++;
            this._scrollValue = this.curIndex * this.singleValue;
        }
        init(data) {
            if (data) {
                this._recommendData = data;
                this._totalCount = data.length;
                this._dataDirty = true;
            }
        }
        _updateContent() {
            let num = this._recommendData.length;
            this.InitObjs();
        }
        onListRender(item, index) {
            let gameItem = item.getComponent(GameItem);
            let data = item.dataSource.gameData;
            data && gameItem.init(data, SubLocation.isYzBanner);
        }
        InitObjs() {
            var data = [];
            for (let i = 0; i < this._totalCount; i++) {
                data.push({ "id": i, "gameData": this._recommendData[i] });
            }
            for (let i = 0; i < this._totalCount; i++) {
                data.push({ "id": i, "gameData": this._recommendData[i] });
            }
            this._gameList.repeatX = 5;
            this._gameList.repeatY = 1;
            this._gameList.array = data;
            this._gameList.renderHandler = new Laya.Handler(this, this.onListRender);
            this._isInit = true;
            this.maxValue = this._gameList.scrollBar.max;
            this.singleValue = (this.maxValue + this._gameList.width) / (this._totalCount * 2);
            this._gameList.on(Laya.Event.MOUSE_DOWN, this, this.onDown);
            this._gameList.on(Laya.Event.MOUSE_UP, this, this.onUp);
            this.btn_close.on(Laya.Event.CLICK, this, () => {
                this.owner.destroy(true);
            });
        }
        onDown() {
            this.isMouse = true;
        }
        onUp() {
            this.isMouse = false;
            this.getCurIndex();
            this._timeTmp = 0;
        }
    }

    class YZ_RecommendGamesBanner extends Laya.Script {
        constructor() {
            super(...arguments);
            this._listView = null;
            this._isInit = false;
        }
        onAwake() {
            if (!this.owner)
                return;
            this._listView = this.owner.getChildByName("ListView").getComponent(YZ_ListView);
            this._listView.owner.visible = false;
        }
        onEnable() {
            this._initWidget();
            if (!this.owner)
                return;
            let ratio = 1;
            if (cc.winSize) {
                if (cc.winSize.height < cc.winSize.width) {
                    ratio = cc.winSize.width / 1920 * 0.7;
                }
                else {
                    ratio = cc.winSize.width / 1080;
                }
            }
            this.owner.scale(ratio, ratio);
            this.owner.bottom = 0;
            this.owner.left = 0;
        }
        onDisable() {
            utils.unregisterServerInitEvent(this);
        }
        _initWidget() {
            if (this._isInit)
                return;
            if (utils.isShowRecommondGamesBanner()) {
                if (PlatUtils.IsDouyin) {
                    if (!utils.Tool_Douyin.isShowMoreGamesModal()) {
                        this.owner.visible = false;
                        return;
                    }
                }
                let data = utils.getRecommondGameList();
                if (data) {
                    if (data.length > 0) {
                        if (data.length >= 6) {
                            this._isInit = true;
                            this._listView.init(data);
                            this._listView.owner.visible = true;
                            utils.postRecommentShowData(SubLocation.isYzBanner);
                            if (PlatUtils.IsOPPO) {
                                utils.oppoTool.countYzBannerShowCount();
                                utils.adManager.hideKyxBanner();
                            }
                        }
                        else {
                            cc.warn("交叉推广数据长度小于6");
                        }
                    }
                    else {
                        cc.warn("交叉推广数据长度为0");
                    }
                }
                else {
                    cc.warn("交叉推广数据为null!");
                }
            }
            else {
                this.owner.destroy();
            }
        }
    }

    class RecommendGamesNode extends Laya.Script {
        constructor() {
            super(...arguments);
            this._content = null;
            this._visibleCount = 5;
            this._totalCount = 0;
            this._itemArray = [];
            this._recommendData = null;
            this._dataDirty = false;
            this._isInit = false;
            this.prefab = null;
            this.moreGamesPanel = null;
            this.isDestroy = false;
            this._redPoint = null;
            this._timeTmp = 0;
            this._autoScrollInterval = 2500;
            this._scrollValue = 0;
            this.curIndex = 0;
            this.lastIndex = 0;
            this.isReve = false;
            this.isMouse = false;
        }
        onAwake() {
            if (!this.owner)
                return;
            this._gameList = this.owner.getChildByName("content").getChildByName("list");
            this._gameList.hScrollBarSkin = "";
            this.btn_moregame = this.owner.getChildByName("content").getChildByName("btn_moregame");
            this.btn_moregame.on(Laya.Event.CLICK, this, () => {
                if (PlatUtils.IsQQ) {
                    utils.adManager.ShowAppBox(true);
                }
                else if (PlatUtils.IsDouyin) {
                    utils.Tool_Douyin.showMoreGamesModal();
                }
                else {
                    let jumpList = utils.getRecommondGameList();
                    if (jumpList && jumpList.length > 0) {
                        utils.showLog("MoreGamePanel 交叉推广数据:", JSON.stringify(jumpList));
                        utils.showLog("MoreGamePanel 组件：" + this.prefab);
                        let panel = cc.instantiate(this.prefab);
                        this.moreGamesPanel = panel.getComponent(MoreGamesPanel);
                        cc.addToStage(panel, 9999);
                        this.moreGamesPanel.init(jumpList);
                        this.moreGamesPanel.show();
                    }
                    else {
                        utils.showLog("获取交叉推广数据失败!");
                    }
                }
            });
        }
        onUpdate() {
            if (this.isDestroy)
                return;
            if (this._dataDirty) {
                this._dataDirty = false;
                this._updateContent();
            }
            this.autoScroll();
        }
        autoScroll() {
            this._timeTmp += Laya.timer.delta;
            if (this._timeTmp >= this._autoScrollInterval && !this.isMouse) {
                this._timeTmp = 0;
                this._gameList.scrollBar.isVertical = false;
                this.lastIndex = this.curIndex;
                if (this.curIndex >= (this._totalCount / 4 - 1)) {
                    this.curIndex = -1;
                }
                this._gameList.scrollBar.value = this.curIndex * this.singleValue;
                this.curIndex++;
                this._scrollValue = this.curIndex * this.singleValue;
            }
            else if (this._gameList.scrollBar.value <= this._scrollValue && !this.isMouse) {
                if ((this._scrollValue - this._gameList.scrollBar.value) > 10) {
                    this._gameList.scrollBar.value += 10;
                }
                else {
                    this._gameList.scrollBar.value = this._scrollValue;
                }
            }
            else if (this.isMouse) {
                if (this._timeTmp >= this._autoScrollInterval * 2) {
                    this.isMouse = false;
                }
            }
        }
        getCurIndex() {
            let restValue = this._gameList.scrollBar.value % this.singleValue;
            this.curIndex = Math.floor(this._gameList.scrollBar.value / this.singleValue);
            this._gameList.scrollBar.value = this.curIndex * this.singleValue + restValue;
            this._scrollValue = this.curIndex * this.singleValue;
        }
        init(data) {
            if (data) {
                this._recommendData = data;
                this._totalCount = data.length;
                this._dataDirty = true;
            }
        }
        _updateContent() {
            let num = this._recommendData.length;
            utils.postRecommentShowData(SubLocation.isScrollbar);
            this.InitObjs();
        }
        onListRender(item, index) {
            let gameItem = item.getComponent(GameItem);
            let data = item.dataSource.gameData;
            data && gameItem.init(data, SubLocation.isScrollbar);
        }
        InitObjs() {
            var data = [];
            for (let i = 0; i < this._totalCount; i++) {
                data.push({ "id": i, "gameData": this._recommendData[i] });
            }
            this._gameList.repeatX = 5;
            this._gameList.repeatY = 1;
            this._gameList.array = data;
            this._gameList.renderHandler = new Laya.Handler(this, this.onListRender);
            this._isInit = true;
            this.maxValue = this._gameList.scrollBar.max;
            this.singleValue = (this.maxValue + this._gameList.width) / this._totalCount * 4;
            this._gameList.on(Laya.Event.MOUSE_DOWN, this, this.onDown);
            this._gameList.on(Laya.Event.MOUSE_UP, this, this.onUp);
        }
        onDown() {
            this.isMouse = true;
        }
        onUp() {
            this.isMouse = false;
            this.getCurIndex();
            this._timeTmp = 0;
        }
        onDestroy() {
            this._gameList.off(Laya.Event.MOUSE_DOWN, this, this.onDown);
            this._gameList.off(Laya.Event.MOUSE_UP, this, this.onUp);
            this.isDestroy = true;
        }
    }

    class YZ_RecommendScorllBar extends Laya.Script {
        constructor() {
            super(...arguments);
            this._listView = null;
            this._isInit = false;
            this.isFirst = false;
        }
        onAwake() {
            if (!this.owner)
                return;
            this._listView = this.owner.getChildByName("ListView").getComponent(RecommendGamesNode);
            this._listView.owner.visible = false;
        }
        onEnable() {
            if (!this.owner)
                return;
            let ratio = 1;
            if (cc.winSize) {
                if (cc.winSize.height < cc.winSize.width) {
                    ratio = cc.winSize.width / 1920 * 0.7;
                }
                else {
                    ratio = cc.winSize.width / 1080;
                }
            }
            this.owner.scale(ratio, ratio);
            this.owner.centerX = 30;
        }
        onDisable() {
            utils.unregisterServerInitEvent(this);
        }
        onUpdate() {
            if (!this.isFirst) {
                this._initWidget();
                this.isFirst = true;
            }
        }
        _initWidget() {
            if (this._isInit)
                return;
            if (utils.isShowRecommondGamesList()) {
                if (PlatUtils.IsDouyin) {
                    if (!utils.Tool_Douyin.isShowMoreGamesModal()) {
                        this.owner.visible = false;
                        return;
                    }
                }
                let data = utils.getRecommondGameList();
                if (data) {
                    if (data.length > 0) {
                        if (data.length >= 6) {
                            this._isInit = true;
                            this._listView.init(data);
                            this._listView.owner.visible = true;
                            utils.postRecommentShowData(SubLocation.isScrollbar);
                        }
                        else {
                            cc.warn("交叉推广数据长度小于6");
                        }
                    }
                    else {
                        cc.warn("交叉推广数据长度为0");
                    }
                }
                else {
                    cc.warn("交叉推广数据为null!");
                }
            }
            else {
                this.owner.destroy(true);
            }
        }
    }

    class YZ_RecordWidget extends Laya.Script {
        constructor() {
            super(...arguments);
            this._panel = null;
            this._normalBtn = null;
            this._actionBtn = null;
            this.background = null;
            this._originScale = 1;
            this._isSmall = true;
        }
        onAwake() {
            if (!this.owner)
                return;
            this._panel = this.owner.getChildByName("Panel");
            this._panel.visible = false;
            this.background = this._panel.getChildByName("Background");
            this._normalBtn = this.background.getChildByName("normalBtn");
            this._actionBtn = this.background.getChildByName("actionBtn");
            this._originScale = this._actionBtn.scaleX;
        }
        _onGameMessage(event) {
            switch (event.type) {
                case "YZ_RecordStart": {
                    this._updateState();
                    break;
                }
                case "YZ_RecordEnd": {
                    this._updateState();
                    break;
                }
            }
        }
        onEnable() {
            Laya.stage.on("YZ_CommonMessage", this, this._onGameMessage);
            if (PlatUtils.IsDouyin) {
                if (utils.Tool_Douyin.ServerConfig.is_share_video && utils.Tool_Douyin.ServerConfig.is_share_video == "true") {
                    utils.showLog("服务器配置为自动开启录屏！");
                    utils.recordStart();
                }
            }
            this._panel.on(Laya.Event.CLICK, this, (event) => {
                event.stopPropagation();
                if (!utils.isRecording) {
                    utils.recordStart();
                }
                else {
                    utils.recordEnd();
                    utils.Tool_Douyin.isClickEnd = true;
                }
            });
            this._updateState();
            utils.registerServerInitEvent(() => {
                if (utils.isShowRecordWidget()) {
                    this._panel.visible = true;
                }
                else {
                    utils.showLog("不支持录屏!");
                    this.owner.visible = false;
                }
            }, this);
            if (PlatUtils.IsDouyin) {
                utils.showLog("record onEnable");
                utils.Tool_Douyin.isAutoShare = true;
            }
        }
        onUpdate() {
            if (utils.isRecording) {
                if (this._isSmall) {
                    this._actionBtn.scale(this._actionBtn.scaleX - 0.005, this._actionBtn.scaleX - 0.005);
                    if (this._actionBtn.scaleX < 0.8) {
                        this._isSmall = false;
                    }
                }
                else {
                    this._actionBtn.scale(this._actionBtn.scaleX + 0.005, this._actionBtn.scaleX + 0.005);
                    if (this._actionBtn.scaleX > 1) {
                        this._isSmall = true;
                    }
                }
            }
        }
        onDisable() {
            this.owner.offAllCaller(this);
            this._updateState();
            if (PlatUtils.IsDouyin) {
                utils.showLog("record onDisable");
                utils.Tool_Douyin.isAutoShare = false;
            }
            utils.recordEnd();
        }
        _updateState() {
            if (utils.isRecording) {
                this._normalBtn.visible = false;
                this._actionBtn.visible = true;
            }
            else {
                this._normalBtn.visible = true;
                this._actionBtn.visible = false;
            }
        }
    }

    class RedBagProgressNode extends Laya.Script {
        constructor() {
            super(...arguments);
            this.selfPanel = null;
            this.Icon = null;
            this.ProgressLbl = null;
            this.ProgressBar = null;
            this.tripNode = null;
            this.labelLevel = null;
            this.shakeTimes = 0;
            this.callbaclId = null;
        }
        onAwake() {
            this.selfPanel = this.owner;
            this.Icon = this.owner.getChildByName("Icon");
            this.ProgressLbl = this.owner.getChildByName("ProgressLbl");
            this.ProgressBar = this.owner.getChildByName("ProgressBar");
            this.tripNode = this.owner.getChildByName("tripNode");
            this.labelLevel = this.tripNode.getChildByName("labelLevel");
            this.ProgressBar.sizeGrid = "4,4,4,4,1";
            this.tripNode.visible = false;
            this.rotate();
        }
        rotate() {
            if (this.shakeTimes > 10) {
                this.shakeTimes = 0;
                this.selfPanel.rotation = 0;
                if (this.callbaclId != null) {
                    clearTimeout(this.callbaclId);
                }
                this.callbaclId = setTimeout(() => {
                    if (this != null && this != undefined) {
                        this.rotate();
                    }
                }, 2000);
                return;
            }
            this.shakeTimes++;
            let target = 0;
            if (this.selfPanel.rotation >= 5) {
                target = -5;
            }
            else {
                target = 5;
            }
            Laya.Tween.to(this.selfPanel, { rotation: target }, 60, null, Laya.Handler.create(this, this.rotate));
        }
        init(data) {
            this.ProgressBar.value = utils.yzRedBagInfo.progress / utils.yzRedBagInfo.totalProgress;
            this.ProgressLbl.text = `${utils.yzRedBagInfo.progress}/${utils.yzRedBagInfo.totalProgress}`;
            this.labelLevel.text = `通过${utils.yzRedBagInfo.totalProgress}关即可领取红包`;
            if (utils.yzRedBagInfo.progress >= utils.yzRedBagInfo.totalProgress) {
                this.Icon.getChildAt(0).visible = false;
                this.Icon.getChildAt(1).visible = true;
                this.Icon.getChildAt(1).scale(1.2, 1.2);
                Laya.Tween.to(this.Icon.getChildAt(0), { scaleX: 0, scaleY: 1 }, 500, null, Laya.Handler.create(this, null));
            }
            else {
                this.Icon.getChildAt(0).visible = true;
                this.Icon.getChildAt(1).visible = false;
            }
            setTimeout(() => {
                if (this.tripNode && cc.isValid(this.tripNode)) {
                    this.tripNode.visible = true;
                    Laya.timer.once(3000, this, () => {
                        this.tripNode.visible = false;
                    });
                }
            }, 3000);
        }
        onEnable() {
            this.init();
            utils.SendEvent(`红包进度挂件-展示成功`);
            Laya.stage.on("YZ_RED_BAG_PROGRESS_CHANGE", this, () => {
                this.init();
            });
        }
        showOpenRedBagPanel() {
            utils.SendEvent(`红包进度挂件-点击上报`);
            utils.showOpenRedBagPanel();
        }
        onDisable() {
            if (this.callbaclId != null) {
                clearTimeout(this.callbaclId);
            }
            Laya.timer.clearAll(this);
            Laya.stage.off("YZ_RED_BAG_PROGRESS_CHANGE", this, null);
        }
        onDestroy() {
            if (this.callbaclId != null) {
                clearTimeout(this.callbaclId);
            }
        }
    }

    class RedBagProgressWidget extends Laya.Script {
        constructor() {
            super(...arguments);
            this.panel = null;
            this._isInit = false;
            this._data = null;
        }
        onAwake() {
            this.panel = this.owner.getChildByName("panel");
            this.panel.visible = false;
        }
        onEnable() {
            utils.registerServerInitEvent(() => {
                this._initWidget();
            }, this);
        }
        init(data) {
            this._data = data;
        }
        onDisable() {
            utils.unregisterServerInitEvent(this);
        }
        _initWidget() {
            this.panel.visible = true;
        }
    }

    class RewardBoxPanel extends Laya.Script {
        constructor() {
            super(...arguments);
            this.checked = null;
            this.showVideoBtn = null;
            this.goldLabel = null;
            this.tirpNode = null;
            this.tripLabel = null;
            this.btnLabel = null;
            this.panel = null;
            this.checkBtn = null;
            this.Image = null;
            this.spriteDouble = null;
            this.spritePass = null;
            this.videoIcon = null;
            this.rewardCallFunc = null;
            this.rewardValue = 0;
        }
        onEnable() {
            this.panel = this.owner.getChildByName("panel");
            this.Image = this.panel.getChildByName("Image");
            this.goldLabel = this.Image.getChildByName("DiamondLabel");
            this.tirpNode = this.panel.getChildByName("checkNode");
            this.tripLabel = this.tirpNode.getChildByName("tripLabel");
            this.checked = this.tirpNode.getChildByName("checkBtn");
            this.showVideoBtn = this.panel.getChildByName("BtnVideo");
            this.spriteDouble = this.showVideoBtn.getChildByName("spriteDouble");
            this.spritePass = this.showVideoBtn.getChildByName("spritePass");
            this.videoIcon = this.showVideoBtn.getChildByName("videoIcon");
            this.btnLabel = this.panel.getChildByName("getBtn");
            this.checkBtn = this.tirpNode.getChildByName("checkDesc");
            this.rewardCallFunc = utils.rewardCallFunc;
            this.rewardValue = utils.rewardValue;
            utils.showLog("RewardBoxPanel onEnable");
            utils.adManager.ShowBanner(BannerLocation.Game);
            let result = utils.controView(ViewLocation.box);
            if (result.is_open === true) {
                utils.delayShowNode(this.tirpNode);
                this.checked.visible = result.isSelect;
                this.spritePass.visible = !this.checked.visible;
                this.spriteDouble.visible = this.checked.visible;
                this.videoIcon.visible = this.checked.visible;
                this.btnLabel.visible = false;
            }
            else {
                this.tirpNode.visible = false;
                this.checked.visible = false;
                utils.showSkipBtn(this.btnLabel);
            }
            this.goldLabel.text = "+" + this.rewardValue.toString();
            let ratio = 1;
            if (cc.winSize.height < cc.winSize.width) {
                ratio = cc.winSize.height / 1920;
            }
            else {
                ratio = cc.winSize.height / 1920 * 0.8;
                this.panel.centerX = 0;
                this.panel.centerY = -200;
            }
            this.panel.scale(ratio, ratio);
            this.checkBtn.on(Laya.Event.CLICK, this, this.onCheck);
            this.btnLabel.on(Laya.Event.CLICK, this, this.onGetGold, [1, 1]);
            this.showVideoBtn.on(Laya.Event.CLICK, this, this.onGetGold, [5, 5]);
        }
        onDisable() {
            this.checkBtn.off(Laya.Event.CLICK, this, this.onCheck);
            this.btnLabel.off(Laya.Event.CLICK, this, this.onGetGold);
            this.showVideoBtn.off(Laya.Event.CLICK, this, this.onGetGold);
        }
        onDestroy() {
            if (utils.rewardBoxPanelCloseFunc) {
                utils.rewardBoxPanelCloseFunc();
                utils.rewardBoxPanelCloseFunc = null;
            }
            else {
                utils.rewardCloseFunc && utils.rewardCloseFunc();
                utils.rewardCloseFunc = null;
            }
            this.owner.removeSelf();
            this.owner = null;
            utils.adManager.HideBanner(BannerLocation.Game);
        }
        onCheck() {
            this.checked.visible = !this.checked.visible;
            this.spritePass.visible = !this.checked.visible;
            this.spriteDouble.visible = this.checked.visible;
            this.videoIcon.visible = this.checked.visible;
        }
        onPlayVideo() {
            utils.adManager.ShowVideo((ret, msg) => {
                if (ret) {
                    utils.showMsg("获得五倍奖励! +" + this.rewardValue * 5);
                    this.rewardValue = this.rewardValue * 5;
                }
                else {
                    utils.showMsg("获得奖励! +" + this.rewardValue);
                }
                let result = new YZ_Reward();
                result.rewardValue = this.rewardValue;
                if (this.rewardCallFunc) {
                    this.rewardCallFunc(result);
                }
                this.owner.destroy();
            });
        }
        onGetGold(e, id) {
            if (this.spriteDouble.visible && id === 5) {
                this.onPlayVideo();
            }
            else {
                utils.showMsg("获得奖励! +" + this.rewardValue);
                if (this.rewardCallFunc) {
                    let result = new YZ_Reward();
                    result.rewardValue = this.rewardValue;
                    this.rewardCallFunc(result);
                }
                this.owner.destroy();
            }
        }
    }

    class LuckBoxPannel extends Laya.Script {
        constructor() {
            super(...arguments);
            this.showVideoBtn = null;
            this.clickBtn = null;
            this.btnLabel = null;
            this.panel = null;
            this.videoIcon = null;
            this.progressBar = null;
            this.boxNode = null;
            this.rewardCallFunc = null;
            this.rewardValue = 0;
            this._luck_box_ad_type = "1";
            this._delay_show_btn_time = 0;
            this._luck_box_progressbar_back_time = 1000;
            this._showAdProgress = 0.8;
            this.isVertical = false;
            this._openSlowDown = false;
            this._timetaskId = 0;
            this._cancelSlowDown = false;
            this._slowDownSpeed = 0.2;
            this._progresss = 0;
            this._totalProgress = 5;
            this._isShowAd = false;
            this._videoIsPlay = false;
        }
        onAwake() {
            this.panel = this.owner.getChildByName("Panel");
            this.boxNode = this.panel.getChildByName("box");
            this.clickBtn = this.showVideoBtn = this.panel.getChildByName("BtnClick");
            this.btnLabel = this.panel.getChildByName("getBtn");
            this.videoIcon = this.clickBtn.getChildByName("icon");
            this.progressBar = this.panel.getChildByName("ClickProgressBar");
            this.progressBar.sizeGrid = "4,4,4,4,1";
            this.progressBar.value = 0;
            this.rewardCallFunc = utils.rewardCallFunc;
            this.rewardValue = utils.rewardValue;
            this.panel.scale(0, 0);
            utils.SendEvent("幸运宝箱-显示成功！");
            this.btnLabel.alpha = 0;
            this.btnLabel.visible = false;
            this.btnLabel.on(Laya.Event.CLICK, this, (evet) => {
                this.onClose();
            });
            this.clickBtn.on(Laya.Event.MOUSE_DOWN, this, (evet) => {
                this.onBtnClick();
            });
            this.clickBtn.on(Laya.Event.MOUSE_UP, this, (evet) => {
                this.clickBtnTouchCancel();
            });
            this.clickBtn.on(Laya.Event.MOUSE_OUT, this, (evet) => {
                this.clickBtnTouchCancel();
            });
            utils.luckBoxShowCount++;
            let adTypes = utils.ServerConfig.luck_box_ad_type ? utils.ServerConfig.luck_box_ad_type.split(",") : this._luck_box_ad_type;
            let closeBtnShowDelays = utils.ServerConfig.luck_box_close_btn_show_delay ? utils.ServerConfig.luck_box_close_btn_show_delay.split(",") : this._delay_show_btn_time;
            let progressbarBackTimes = utils.ServerConfig.luck_box_progressbar_back_time ? utils.ServerConfig.luck_box_progressbar_back_time.split(",") : this._luck_box_progressbar_back_time;
            if (utils.luckBoxShowCount > adTypes.length - 1) {
                utils.luckBoxShowCount = 0;
            }
            utils.showLog(`幸运宝箱显示次数：${utils.luckBoxShowCount}`);
            this._luck_box_ad_type = adTypes[utils.luckBoxShowCount];
            this._delay_show_btn_time = closeBtnShowDelays[utils.luckBoxShowCount];
            this._luck_box_progressbar_back_time = progressbarBackTimes[utils.luckBoxShowCount];
            console.log("utils.ServerConfig.luck_box_show_ad_progress_percent......", utils.ServerConfig.luck_box_show_ad_progress_percent);
            if (utils.ServerConfig.luck_box_show_ad_progress_percent) {
                let showAdProPercents = utils.ServerConfig.luck_box_show_ad_progress_percent.split(",");
                this._showAdProgress = showAdProPercents[utils.luckBoxShowCount];
            }
            else {
                switch (this._luck_box_ad_type) {
                    case "1":
                    case "5":
                        this._showAdProgress = 0.45;
                        break;
                    case "2":
                        this._showAdProgress = 0.3;
                        break;
                    case "3":
                        this._showAdProgress = 0.85;
                        break;
                    case "4":
                        this._showAdProgress = 0.85;
                        break;
                    default:
                        this._showAdProgress = 0.45;
                        break;
                }
            }
            utils.showLog(`幸运宝箱显示类型：${this._luck_box_ad_type} #showBtnTime=${this._delay_show_btn_time} #progressbarBackTime=${this._luck_box_progressbar_back_time}`);
            if (this._luck_box_ad_type != "4") {
                Laya.timer.once(this._delay_show_btn_time * 1000, this, () => {
                    this.btnLabel.visible = true;
                    this.btnLabel.alpha = 1;
                });
            }
            let ratio = 1;
            if (cc.winSize.height < cc.winSize.width) {
                ratio = cc.winSize.width / 1920 * 0.5;
                this.isVertical = false;
            }
            else {
                ratio = cc.winSize.width / 1080;
                this.isVertical = true;
            }
            this.panel.scale(ratio, ratio);
            if (this.isVertical) {
                this.clickBtn.y = cc.winSize.height - 200;
            }
            else {
                this.clickBtn.y = cc.winSize.width + 200;
            }
            if (utils.ServerConfig.luck_box_video_icon_is_show && utils.ServerConfig.luck_box_video_icon_is_show == "true") {
                this.videoIcon.active = true;
            }
            else {
                this.videoIcon.active = false;
            }
            if (this._luck_box_ad_type == "1") {
                utils.adManager.HideBanner(BannerLocation.Game);
                if (PlatUtils.IsIOS && PlatUtils.IsQQ) {
                    Laya.timer.frameOnce(1, this, () => {
                        this.clickBtn.visible = true;
                    });
                    Laya.timer.once(10000, this, () => {
                        if (this.clickBtn && cc.isValid(this.clickBtn)) {
                            if (this.isVertical) {
                                this.clickBtn.y = this.progressBar.y + 200;
                                this.btnLabel.y = this.progressBar.y + 500;
                            }
                            else {
                                this.clickBtn.y = this.progressBar.y + 100;
                                this.btnLabel.y = this.progressBar.y + 300;
                            }
                        }
                    });
                }
                else {
                    if (this.isVertical) {
                        this.clickBtn.y = cc.winSize.height - 200;
                    }
                    else {
                        this.clickBtn.y = 1920 - 400;
                    }
                }
            }
            else {
                if (this.isVertical) {
                    this.clickBtn.y = this.progressBar.y + 200;
                    this.btnLabel.y = this.progressBar.y + 500;
                }
                else {
                    this.clickBtn.y = this.progressBar.y + 100;
                    this.btnLabel.y = this.progressBar.y + 300;
                }
            }
        }
        clickBtnTouchCancel() {
            clearTimeout(this._timetaskId);
            this._timetaskId = setTimeout(() => {
                this._openSlowDown = true;
            }, this._luck_box_progressbar_back_time * 1000);
        }
        onUpdate() {
            if (this.progressBar.value > 0 && this.progressBar.value < 1 && this._openSlowDown && !this._cancelSlowDown) {
                this.progressBar.value -= (Laya.timer.delta * this._slowDownSpeed) / 1000;
                if (this.progressBar.value <= 0) {
                    this.progressBar.value = 0;
                }
            }
        }
        onBtnClick() {
            this._openSlowDown = false;
            if (this.progressBar.value < 1) {
                this.progressBar.value += 0.10;
                if (this.progressBar.value >= 1) {
                    this.progressBar.value = 1;
                    this.openLuckBox();
                }
            }
            if (this.videoIcon.visible && !this._videoIsPlay) {
                this._videoIsPlay = true;
                utils.adManager.ShowVideo((res, msg) => {
                    if (PlatUtils.IsDouyin) {
                        if (res) {
                            utils.showMsg("获得奖励! +" + this.rewardValue);
                            let result = new YZ_Reward();
                            result.rewardValue = this.rewardValue;
                            if (this.rewardCallFunc) {
                                this.rewardCallFunc(result);
                            }
                            this.onClose();
                        }
                        else {
                            this._videoIsPlay = false;
                            utils.showMsg(msg ? msg : "视频加载失败！");
                        }
                    }
                    else {
                        utils.showMsg("获得奖励! +" + this.rewardValue);
                        let result = new YZ_Reward();
                        result.rewardValue = this.rewardValue;
                        if (this.rewardCallFunc) {
                            this.rewardCallFunc(result);
                        }
                        this.onClose();
                    }
                });
            }
            if (this.progressBar.value >= this._showAdProgress && !this._isShowAd) {
                this._isShowAd = true;
                switch (this._luck_box_ad_type) {
                    case "1":
                        utils.showLog("服务器配置幸运宝箱展示-banner广告！");
                        utils.adManager.ShowBanner(BannerLocation.Game);
                        setTimeout(() => {
                            if (this.clickBtn && cc.isValid(this.clickBtn)) {
                                if (this.isVertical) {
                                    this.clickBtn.y = this.progressBar.y + 200;
                                    this.btnLabel.y = this.progressBar.y + 500;
                                }
                                else {
                                    this.clickBtn.y = this.progressBar.y + 100;
                                    this.btnLabel.y = this.progressBar.y + 300;
                                }
                            }
                        }, 900);
                        break;
                    case "2":
                        utils.showLog("服务器配置幸运宝箱展示-插屏广告！");
                        utils.adManager.ShowInterstitial();
                        break;
                    case "3":
                        utils.showLog("服务器配置幸运宝箱展示-盒子广告！");
                        utils.adManager.ShowAppBox();
                        break;
                    case "4":
                        utils.showLog("服务器配置幸运宝箱展示-视频广告！");
                        this.videoIcon.visible = true;
                        this._cancelSlowDown = true;
                        Laya.timer.once(this._delay_show_btn_time * 1000, this, () => {
                            if (this.btnLabel && cc.isValid(this.btnLabel)) {
                                this.btnLabel.visible = true;
                                this.btnLabel.alpha = 1;
                            }
                        });
                        break;
                    case "5":
                        utils.showLog("服务器配置幸运宝箱展示-互推banner广告！");
                        utils.showRecommendGamesBanner();
                        break;
                    default:
                        utils.showLog("服务器配置幸运宝箱展示banner广告！");
                        utils.adManager.ShowBanner(BannerLocation.Game);
                        setTimeout(() => {
                            if (this.clickBtn && cc.isValid(this.clickBtn)) {
                                if (this.isVertical) {
                                    this.clickBtn.y = this.progressBar.y + 200;
                                    this.btnLabel.y = this.progressBar.y + 500;
                                }
                                else {
                                    this.clickBtn.y = this.progressBar.y + 100;
                                    this.btnLabel.y = this.progressBar.y + 300;
                                }
                            }
                        }, 500);
                        break;
                }
            }
        }
        openLuckBox() {
            if (utils.ServerConfig.luck_box_play_video == "true") {
                this.onPlayVideo();
                this.onClose();
            }
            else {
                utils.showMsg("获得奖励! +" + this.rewardValue);
                let result = new YZ_Reward();
                result.rewardValue = this.rewardValue;
                if (this.rewardCallFunc) {
                    this.rewardCallFunc(result);
                }
                this.onClose();
            }
        }
        onHideBtn() {
            this.onClose();
        }
        onClose() {
            this.owner.visible = false;
            utils.adManager.HideBanner(BannerLocation.Game);
            utils.hideRecommendGamesBanner();
            if (utils.rewardLuckBoxPanelCloseFunc) {
                utils.rewardLuckBoxPanelCloseFunc();
                utils.rewardLuckBoxPanelCloseFunc = null;
            }
            else {
                utils.rewardCloseFunc && utils.rewardCloseFunc();
                utils.rewardCloseFunc = null;
            }
        }
        onPlayVideo() {
            utils.adManager.ShowVideo((ret, msg) => {
                if (ret) {
                    utils.showMsg("获得奖励! +" + this.rewardValue);
                    this.rewardValue = this.rewardValue;
                    AldUtils.SendEvent("幸运宝箱-获取奖励成功！");
                }
                else {
                    utils.showMsg("获得奖励! +" + this.rewardValue);
                    AldUtils.SendEvent("幸运宝箱-视频播放失败！");
                }
                let result = new YZ_Reward();
                result.rewardValue = this.rewardValue;
                if (this.rewardCallFunc) {
                    this.rewardCallFunc(result);
                }
                this.onClose();
            });
        }
    }

    class RewardRedBagPanel extends Laya.Script {
        constructor() {
            super(...arguments);
            this.panel = null;
            this.huodeHongbao = null;
            this.btnClose = null;
            this.btnShowPanel = null;
            this.selfView = null;
            this.shakeTimes = 0;
            this.callbaclId = null;
        }
        onAwake() {
            this.selfView = this.owner;
            this.panel = this.owner.getChildByName("panel");
            this.huodeHongbao = this.panel.getChildByName("huodeHongbao");
            this.btnClose = this.panel.getChildByName("btnClose");
            this.btnShowPanel = this.panel.getChildByName("btnShowPanel");
            this.btnClose.on(Laya.Event.CLICK, this, this.onCloseBtnHandler);
            this.btnShowPanel.on(Laya.Event.CLICK, this, this.openRedBag);
            let ratio = 1;
            if (cc.winSize.height < cc.winSize.width) {
                ratio = cc.winSize.width / 1920 * 0.5;
            }
            else {
                ratio = cc.winSize.width / 1080;
            }
            this.panel.scale(ratio, ratio);
            this.rotate();
            this.init();
        }
        rotate() {
            if (this.shakeTimes > 10) {
                this.shakeTimes = 0;
                this.huodeHongbao.rotation = 0;
                if (this.callbaclId != null) {
                    clearTimeout(this.callbaclId);
                }
                this.callbaclId = setTimeout(() => {
                    if (this != null && this != undefined) {
                        this.rotate();
                    }
                }, 2000);
                return;
            }
            this.shakeTimes++;
            let target = 0;
            if (this.huodeHongbao.rotation >= 5) {
                target = -5;
            }
            else {
                target = 5;
            }
            Laya.Tween.to(this.huodeHongbao, { rotation: target }, 60, null, Laya.Handler.create(this, this.rotate));
        }
        openRedBag(e) {
            utils.SendEvent("恭喜获得红包弹窗-点击领取红包！");
            utils.showOpenRedBagPanel({ showType: 2 });
            this.hide();
        }
        init() {
            utils.SendEvent("恭喜获得红包弹窗-展示成功！");
        }
        hide() {
            this.selfView.visible = false;
        }
        onCloseBtnHandler(e) {
            this.hide();
        }
        onDisable() {
            if (this.callbaclId != null) {
                clearTimeout(this.callbaclId);
            }
        }
        onDestroy() {
            if (this.callbaclId != null) {
                clearTimeout(this.callbaclId);
            }
        }
    }

    class RewardShortCutPanel extends Laya.Script {
        constructor() {
            super(...arguments);
            this.bg = null;
            this.panel = null;
            this.btnOk = null;
            this.btnCancel = null;
            this.glodLabel = null;
            this.rewardCallFunc = null;
            this.rewardValue = 0;
        }
        onEnable() {
            utils.SendEvent("结算前广告-创建快捷桌面-展示成功！");
            let shortcutCreated = false;
            if (PlatUtils.IsOPPO) {
                shortcutCreated = utils.oppoTool._shortcutCreated;
            }
            else if (PlatUtils.IsVIVO) {
                shortcutCreated = utils.Tool_Vivo._shortcutCreated;
            }
            if (shortcutCreated) {
                utils.showLog("已经存在桌面快捷方式，当前窗口直接销毁！");
                utils.SendEvent("结算前广告-创建快捷桌面-已经存在桌面快捷方式！");
                this.owner.visible = false;
                this.onDestroy();
                return;
            }
            if (utils.getServelCofig().auto_desktop != undefined && utils.getServelCofig().auto_desktop === 0) {
                utils.showLog("服务器配置直接创建桌面，不显示弹窗，当前窗口直接销毁！");
                utils.SendEvent("结算前广告-创建快捷桌面-服务器配置直接创建桌面，不显示弹窗！");
                utils.cur_tool && utils.cur_tool.createShortcut && utils.cur_tool.createShortcut((res) => {
                    utils.SendEvent("结算前广告-直接创建快捷桌面-创建成功！");
                });
                this.owner.visible = false;
                this.onDestroy();
                return;
            }
            this.rewardValue = utils.rewardValue;
            this.rewardCallFunc = utils.rewardCallFunc;
            this.initUi();
            this.initListener();
            if (cc.winSize.height < cc.winSize.width) {
                utils.adManager.HideBanner(BannerLocation.Game);
            }
            else {
                utils.adManager.ShowBanner(BannerLocation.Game);
            }
            let ratio = 1;
            if (cc.winSize.height < cc.winSize.width) {
                ratio = cc.winSize.width / 1920 * 0.6;
            }
            else {
                ratio = cc.winSize.width / 1080;
            }
            this.panel.scale(ratio, ratio);
        }
        initUi() {
            this.panel = this.owner.getChildByName("panel");
            this.bg = this.panel.getChildAt(0);
            this.btnCancel = this.bg.getChildByName("btnClose");
            this.btnOk = this.bg.getChildByName("btnOk");
            this.glodLabel = this.bg.getChildByName("rewardLabel");
            this.glodLabel.text = "奖励+" + this.rewardValue;
            if (this.rewardValue == 0) {
                this.glodLabel.visible = false;
            }
            if (utils)
                utils.showSkipBtn(this.btnCancel);
            else
                this.btnCancel.visible = true;
            console.log("监听按钮点击");
            this.btnOk.on(Laya.Event.CLICK, this, (event) => {
                console.log("创建桌面");
                this.onCreateShortCut();
            });
            this.btnCancel.on(Laya.Event.CLICK, this, (event) => {
                this.onClose();
            });
        }
        onDestroy() {
            utils.adManager.HideBanner(BannerLocation.Game);
            if (utils.rewardShortCutPanelCloseFunc) {
                utils.rewardShortCutPanelCloseFunc();
                utils.rewardShortCutPanelCloseFunc = null;
                ;
            }
            else {
                utils.rewardCloseFunc && utils.rewardCloseFunc();
                utils.rewardCloseFunc = null;
            }
            utils.cur_tool && utils.cur_tool.checkHasShortCut && utils.cur_tool.checkHasShortCut();
        }
        onClose() {
            this.owner.destroy();
        }
        onCreateShortCut() {
            if (PlatUtils.IsOPPO) {
                utils.oppoTool.createShortcut((res) => {
                    utils.SendEvent("结算前广告-创建快捷桌面-创建成功！");
                    this.rewardFunc(res);
                });
            }
            else if (PlatUtils.IsVIVO) {
                utils.Tool_Vivo.createShortcut((res) => {
                    utils.SendEvent("结算前广告-创建快捷桌面-创建成功！");
                    this.rewardFunc(res);
                });
            }
        }
        initListener() {
        }
        rewardFunc(ret) {
            if (ret) {
                let result = new YZ_Reward();
                result.rewardValue = this.rewardValue;
                utils.showMsg("添加成功！奖励：+" + this.rewardValue);
                if (this.rewardCallFunc) {
                    this.rewardCallFunc(result);
                }
                this.onClose();
            }
            else {
                utils.showMsg("添加失败！");
                this.onClose();
            }
        }
        initData() {
        }
    }

    const ST_TurntableCounts = "turntable_counts";
    const ST_TurntableTimes = "turntable_times";
    class YZ_Turntable extends Laya.Script {
        constructor() {
            super(...arguments);
            this.spinBtn = null;
            this.wheelSp = null;
            this.greaSprite = null;
            this.firstSpriteFrame = "res/common/Textures/BeforGameOverAd/toutiao_8.png";
            this.secondSpriteFrame = "res/common/Textures/BeforGameOverAd/toutiao_7.png";
            this.lastSpriteFrame = "res/common/Textures/BeforGameOverAd/toutiao_1.png";
            this.effectAudio = null;
            this.panel = null;
            this.close_Btn = null;
            this.btnVideo = null;
            this.icon = null;
            this.cj = null;
            this.bc = null;
            this.checkNode = null;
            this.checkDesc = null;
            this.checkBtn = null;
            this.tripLabel = null;
            this.maxSpeed = 12;
            this.duration = 3;
            this.acc = 0.1;
            this.targetID = 0;
            this.springback = false;
            this.wheelState = 0;
            this.curSpeed = 0;
            this.spinTime = 0;
            this.gearNum = 8;
            this.defaultAngle = 360 / 8 / 2 - 22;
            this.gearAngle = 360 / this.gearNum;
            this.finalAngle = 0;
            this.effectFlag = 0;
            this.audioID = 0;
            this.decAngle = 0;
            this._turntableCount = 0;
            this.rewardCallFunc = null;
            this.gearInfo = [200, 100, 300, 400, 800, 500, 1000, 4000];
        }
        get turntableCount() {
            return this._turntableCount;
        }
        set turntableCount(count) {
            this._turntableCount = count;
            cc.setItem(ST_TurntableTimes, new Date().toDateString());
            cc.setItem(ST_TurntableCounts, this._turntableCount);
        }
        init(closeCallFunc, rewardCallFunc, gearInfo, gearImagePath) {
            this.rewardCallFunc = rewardCallFunc;
            if (gearInfo.length > 0) {
                this.gearInfo = gearInfo;
            }
            if (gearImagePath) {
                utils.showLog("配置为服务器的奖励图片：", gearImagePath);
                cc.loader.load(gearImagePath, Laya.Handler.create(this, (err, res) => {
                    if (!err && cc.isValid(this) && this.greaSprite) {
                    }
                }));
            }
        }
        startTurnTable() {
            if (this.wheelState !== 0) {
                return;
            }
            console.log("开始抽奖");
            if (this.turntableCount <= 0) {
                utils.adManager.ShowVideo((ret, msg) => {
                    if (ret) {
                        this.turntableCount = 1;
                        this.startTurnTable();
                    }
                    else {
                        utils.showMsg("观看完整视频可以获取一次抽奖机会！");
                        this.owner.destroy();
                    }
                });
                return;
            }
            this.turntableCount = 0;
            this.targetID = this.getTargetId();
            this.wheelState = 1;
            this.wheelSp.rotation = 0;
            this.turnCheck();
        }
        turnCheck() {
            console.log(this.targetID);
            let gel = 45;
            Laya.Tween.to(this.wheelSp, { "rotation": 360 * 1 }, 1000, Laya.Ease.circIn, Laya.Handler.create(this, () => {
                Laya.Tween.to(this.wheelSp, { "rotation": (360 * 4 + gel * (this.targetID)) * -1 }, 2000, Laya.Ease.elasticOut, Laya.Handler.create(this, () => {
                    this.wheelState = 0;
                    this.showRes();
                }));
            }));
        }
        showRes() {
            console.log('中奖结果：' + this.gearInfo[this.targetID]);
            utils.showMsg("获得奖励！+" + this.gearInfo[this.targetID]);
            if (this.rewardCallFunc) {
                let result = new YZ_Reward();
                result.rewardValue = this.gearInfo[this.targetID];
                this.rewardCallFunc(result);
            }
            this.checkBtnSpriteFrame();
        }
        onDisable() {
            this.spinBtn.off(Laya.Event.CLICK, this, (event) => {
                this.startTurnTable();
            });
            this.btnVideo.off(Laya.Event.CLICK, this, (event) => {
                this.startTurnTable();
            });
            this.checkDesc.off(Laya.Event.CLICK, this, (event) => {
                this.startTurnTable();
            });
            this.close_Btn.off(Laya.Event.CLICK, this, (event) => {
                this.owner.destroy();
            });
        }
        onEnable() {
            this.panel = this.owner.getChildByName("Panel");
            this.spinBtn = this.panel.getChildByName("btnCancel");
            this.wheelSp = this.panel.getChildByName("turn");
            this.greaSprite = this.wheelSp.getChildByName("icon");
            this.effectAudio = null;
            this.close_Btn = this.panel.getChildByName("btn_close");
            this.btnVideo = this.panel.getChildByName("btnVideo");
            this.icon = this.btnVideo.getChildByName("icon");
            this.cj = this.btnVideo.getChildByName("cj");
            this.bc = this.btnVideo.getChildByName("bc");
            this.checkNode = this.panel.getChildByName("checkNode");
            this.checkDesc = this.checkNode.getChildByName("checkDesc");
            this.checkBtn = this.checkNode.getChildByName("checkBtn");
            this.tripLabel = this.checkNode.getChildByName("tripLabel");
            this.initCount();
            if (this.turntableCount <= 0) {
                let result = utils.controView(ViewLocation.turntable);
                if (result.is_open === true) {
                    utils.delayShowNode(this.checkNode);
                    this.checkBtn.visible = result.isSelect;
                    this.bc.visible = !this.checkBtn.visible;
                    this.cj.visible = this.checkBtn.visible;
                    this.icon.visible = this.checkBtn.visible;
                    this.close_Btn.visible = false;
                    this.btnVideo.visible = true;
                    this.spinBtn.visible = false;
                }
                else {
                    this.checkBtn.visible = false;
                    this.btnVideo.visible = false;
                    this.spinBtn.visible = false;
                    this.spinBtn.skin = this.firstSpriteFrame;
                }
            }
            this.wheelSp.rotation = this.defaultAngle;
            this.spinBtn.on(Laya.Event.CLICK, this, (event) => {
                this.startTurnTable();
            });
            this.close_Btn.on(Laya.Event.CLICK, this, (event) => {
                this.owner.destroy();
            });
            this.checkDesc.on(Laya.Event.CLICK, this, (event) => {
                this.onCheck();
            });
            this.btnVideo.on(Laya.Event.CLICK, this, (event) => {
                if (this.bc.visible) {
                    this.owner.destroy();
                }
                else {
                    this.startTurnTable();
                }
            });
            if (this.turntableCount <= 0) {
                this.spinBtn.skin = this.secondSpriteFrame;
            }
            let ratio = 1;
            if (cc.winSize.height < cc.winSize.width) {
                ratio = cc.winSize.width / 1920 * 0.4;
            }
            else {
                ratio = cc.winSize.width / 1080;
            }
            this.panel.scale(ratio, ratio);
            this.rewardCallFunc = utils.rewardCallFunc;
            utils.adManager.ShowBanner(BannerLocation.Game);
        }
        onDestroy() {
            if (utils.turnTablePanelCloseFunc) {
                utils.turnTablePanelCloseFunc();
                utils.turnTablePanelCloseFunc = null;
            }
            else {
                utils.rewardCloseFunc && utils.rewardCloseFunc();
                utils.rewardCloseFunc = null;
            }
            this.owner.removeSelf();
            this.owner = null;
            utils.adManager.HideBanner(BannerLocation.Game);
        }
        checkBtnSpriteFrame() {
            if (this.turntableCount <= 0) {
                let result = utils.controView(ViewLocation.turntable);
                if (result.is_open === true) {
                    utils.delayShowNode(this.checkNode);
                    this.checkBtn.visible = result.isSelect;
                    this.bc.visible = !this.checkBtn.visible;
                    this.cj.visible = this.checkBtn.visible;
                    this.icon.visible = this.checkBtn.visible;
                    this.close_Btn.visible = false;
                    this.btnVideo.visible = true;
                    this.spinBtn.visible = false;
                }
                else {
                    this.checkBtn.visible = false;
                    this.btnVideo.visible = false;
                    this.spinBtn.visible = true;
                    this.spinBtn.skin = this.secondSpriteFrame;
                }
            }
        }
        initCount() {
            let turntableCount = cc.getItem(ST_TurntableCounts);
            let day = cc.getItem(ST_TurntableTimes);
            let curDate = new Date();
            if (day != curDate.toDateString()) {
                this.turntableCount = 1;
            }
            else {
                this._turntableCount = turntableCount;
            }
            utils.showLog("当前剩余抽奖次数：", this.turntableCount);
        }
        getTargetId() {
            var ranNum = Math.random();
            let result = 0;
            if (ranNum < 0.01) {
                result = 1;
            }
            else if (ranNum < 0.0001) {
                result = 7;
            }
            else if (ranNum < 0.001) {
                result = 6;
            }
            else if (ranNum < 0.009) {
                result = 5;
            }
            else if (ranNum < 0.02) {
                result = 4;
            }
            else if (ranNum < 0.09) {
                result = 3;
            }
            else if (ranNum < 0.2) {
                result = 2;
            }
            else if (ranNum < 0.7) {
                result = 1;
            }
            else {
                result = 0;
            }
            return result;
        }
        onCheck() {
            this.checkBtn.visible = !this.checkBtn.visible;
            this.bc.visible = !this.checkBtn.visible;
            this.cj.visible = this.checkBtn.visible;
            this.icon.visible = this.checkBtn.visible;
            AldUtils.SendEvent(`转盘抽奖-用户${this.checkBtn.visible ? "点击勾选" : "取消勾选"}`);
        }
    }

    class ShareRecordPanel extends Laya.Script {
        constructor() {
            super(...arguments);
            this.bg = null;
            this.btnOk = null;
            this.btnCancel = null;
            this.glodNode = null;
            this.glodLabel = null;
            this.cross = null;
            this.panel = null;
            this.rewardCallFunc = null;
            this.rewardValue = 0;
            this.maxY = 0;
            this.isUp = true;
        }
        initUi() {
            this.panel = this.owner.getChildByName("panel");
            this.cross = this.panel.getChildByName("cross");
            this.btnCancel = this.panel.getChildByName("btnCancel");
            this.btnOk = this.panel.getChildByName("btnOk");
            this.glodNode = this.btnOk.getChildByName("rewardNode");
            this.glodLabel = this.glodNode.getChildByName("goldLbl");
            let ratio = 1;
            if (cc.winSize.height < cc.winSize.width) {
                ratio = cc.winSize.width / 1920 * 0.5;
            }
            else {
                ratio = cc.winSize.height / 1920;
            }
            this.panel.scale(ratio, ratio);
            if (utils)
                utils.showSkipBtn(this.btnCancel);
            else
                this.btnCancel.visible = true;
            this.glodLabel.text = "+" + this.rewardValue;
            this.glodNode.visible = true;
            if (this.rewardValue == 0) {
                this.glodNode.visible = false;
            }
            this.maxY = this.glodNode.y + 50;
        }
        onUpdate() {
            if (this.isUp) {
                this.glodNode.y -= 3;
                if (this.glodNode.y < (this.maxY - 50)) {
                    this.isUp = false;
                }
            }
            else {
                this.glodNode.y += 3;
                if (this.glodNode.y > this.maxY) {
                    this.isUp = true;
                }
            }
        }
        onDestroy() {
            console.log(utils.shareRecordPanelCloseFunc);
            if (utils.shareRecordPanelCloseFunc) {
                utils.shareRecordPanelCloseFunc();
                utils.shareRecordPanelCloseFunc = null;
                ;
            }
            else {
                utils.rewardCloseFunc && utils.rewardCloseFunc();
                utils.rewardCloseFunc = null;
            }
            this.owner.removeSelf();
            this.owner = null;
            utils.shareRecordPanel = null;
            utils.adManager.HideBanner(BannerLocation.Game);
        }
        onEnable() {
            this.rewardValue = utils.rewardValue;
            this.rewardCallFunc = utils.rewardCallFunc;
            this.initUi();
            this.initListener();
            utils.adManager.ShowBanner(BannerLocation.Game);
        }
        initListener() {
            this.btnCancel.on(Laya.Event.CLICK, this, () => {
                utils.isShowShareRecordPanel = true;
                if (utils.getServelCofig() && utils.getServelCofig().cancel_btn_is_share && utils.getServelCofig().cancel_btn_is_share == "true") {
                    utils.showLog("服务器配置取消按钮也会触发分享！");
                    utils.share(this.rewardFunc.bind(this));
                }
                else {
                    this.onDestroy();
                }
            });
            this.btnOk.on(Laya.Event.CLICK, this, () => {
                utils.isShowShareRecordPanel = true;
                utils.share(this.rewardFunc.bind(this));
            });
        }
        rewardFunc(ret, msg) {
            if (ret) {
                let result = new YZ_Reward();
                result.rewardValue = this.rewardValue;
                utils.showMsg("分享成功！奖励：+" + this.rewardValue);
                if (this.rewardCallFunc) {
                    this.rewardCallFunc(result);
                }
                this.owner.destroy();
            }
            else {
                utils.showMsg(msg ? msg : "分享失败！");
                this.owner.destroy();
            }
        }
        initData() {
        }
    }

    class TryGameNode extends Laya.Script {
        constructor() {
            super(...arguments);
            this._data = null;
            this._icon = null;
            this._nameLabel = null;
            this._gameJumpInterval = 1;
            this._jumpInfo = null;
            this._index = -1;
            this._jumping = false;
            this.isScale = false;
            this._isFirst = false;
            this.isReve = false;
            this.shakeTimes = 0;
        }
        init(data) {
            this._bg = this.owner.getChildByName("bg");
            this._icon = this.owner.getChildByName("bg").getChildByName("icon");
            this._redPoint = this.owner.getChildByName("redpoint");
            utils.showLog("初始化data");
            this._data = data;
            if (this._data) {
                this._jumpInfo = this._data.jump_list;
                this._isFirst = true;
                this._gameJumpInterval = this._data.jump_refresh_time;
                this.jump();
            }
            else {
            }
        }
        onUpdate() {
            if (!this.owner || !this.owner.parent)
                return;
            if (this.isScale && this._redPoint) {
                if (this._redPoint.scaleX >= 1) {
                    this.isReve = true;
                }
                if (this._redPoint.scaleX <= 0.5) {
                    this.isReve = false;
                }
                if (!this.isReve) {
                    this._redPoint.scaleX += 0.01;
                    this._redPoint.scaleY += 0.01;
                }
                else {
                    this._redPoint.scaleX -= 0.01;
                    this._redPoint.scaleY -= 0.01;
                }
            }
        }
        shake() {
            let own = this.owner.getChildByName("bg");
            if (this.shakeTimes > 10) {
                this.shakeTimes = 0;
                own.rotation = 0;
                return;
            }
            this.shakeTimes++;
            let target = 0;
            if (own.rotation >= 5) {
                target = -5;
            }
            else {
                target = 5;
            }
            Laya.Tween.to(own, { rotation: target }, 40, null, Laya.Handler.create(this, this.shake));
        }
        onEnable() {
            if (!this.owner)
                return;
            this._bg = this.owner.getChildByName("bg");
            this._icon = this.owner.getChildByName("bg").getChildByName("icon");
            this._redPoint = this.owner.getChildByName("redpoint");
            Laya.timer.loop(this._gameJumpInterval * 1000, this, this.jump);
            this._bg.pivot(94, 94);
            this._bg.x += 94;
            this._bg.y += 94;
            this.owner.getChildByName("btn").on(Laya.Event.CLICK, this, () => {
                if (PlatUtils.IsDouyin) {
                    utils.Tool_Douyin.showMoreGamesModal();
                }
                else if (PlatUtils.IsQQ) {
                    utils.adManager.ShowAppBox(true);
                }
                else if (this._jumpInfo[this._index] && this._jumpInfo[this._index].appid) {
                    utils.showLog("小游戏跳转! info=", this._jumpInfo[this._index]);
                    let index = this._index;
                    this._postClickData(this._jumpInfo[index].appid);
                    utils.navigateToMiniGame(this._jumpInfo[index], (ret) => {
                        if (ret) {
                            if (this._jumpInfo && this._jumpInfo[index] && this._jumpInfo[index].appid) {
                                this._postData(this._jumpInfo[index].appid);
                            }
                        }
                    });
                }
            });
            if (this._redPoint) {
                this._redPoint.pivot(13, 13);
            }
            this.isScale = true;
            this._redPoint.visible = true;
        }
        onDisable() {
        }
        jump() {
            if (this._jumping)
                return;
            if (!this._jumpInfo)
                return;
            this.owner.visible = true;
            this._jumping = true;
            this._index = this._index + 1;
            if (this._index >= this._jumpInfo.length) {
                this._index = 0;
            }
            if (this._jumpInfo[this._index] && this._jumpInfo[this._index].icon) {
                let remoteUrl = this._jumpInfo[this._index].icon;
                this._icon.skin = remoteUrl;
                if (this._isFirst == true) {
                    this._isFirst = false;
                }
            }
            this._jumping = false;
            this.shake();
            if (this._gameJumpInterval > 2) {
                Laya.timer.once((this._gameJumpInterval - 1.5) * 1000, this, this.shake);
            }
        }
        _postData(appid) {
            utils.postDataByLocation(appid, SubLocation.isTryGame, 1);
        }
        _postClickData(appid) {
            utils.postDataByLocation(appid, SubLocation.isTryGame, 0);
        }
    }

    class TryGamesWidget extends Laya.Script {
        constructor() {
            super(...arguments);
            this._tryGameNode = null;
            this._isInit = false;
        }
        onAwake() {
            if (!this.owner)
                return;
            this._tryGameNode = this.owner.getChildByName("TryGameNode").getComponent(TryGameNode);
            this._tryGameNode.owner.visible = false;
        }
        onEnable() {
            this._initWidget();
        }
        onDisable() {
            utils.unregisterServerInitEvent(this);
        }
        _initWidget() {
            utils.showLog("初始化组件", this._isInit);
            if (this._isInit)
                return;
            utils.showLog("初始化组件");
            if (utils.isShowTryGamesWidget()) {
                let dataValid = true;
                let data = utils.getInnerRecommendData();
                if (data) {
                    if (data.jump_refresh_time != null) {
                        if (data.jump_refresh_time <= 0) {
                            cc.warn("字段jump_refresh_time的值应该>0");
                            dataValid = false;
                        }
                    }
                    else {
                        cc.warn("字段jump_refresh_time不存在！");
                        dataValid = false;
                    }
                    if (data.jump_list) {
                        if (data.jump_list.length <= 0) {
                            cc.warn("字段jump_list的长度不合法！");
                            dataValid = false;
                        }
                    }
                    else {
                        cc.warn("字段jump_list不存在！");
                        dataValid = false;
                    }
                }
                else {
                    cc.warn("交叉推广数据为null");
                    dataValid = false;
                }
                utils.showLog("dataValid:", dataValid);
                if (dataValid) {
                    this._isInit = true;
                    utils.showLog("交叉推广数据:", JSON.stringify(data));
                    this._tryGameNode.init({ "jump_refresh_time": data.jump_refresh_time, "jump_list": data.jump_list });
                    this._tryGameNode.owner.visible = true;
                }
                else {
                    this._tryGameNode.owner.visible = false;
                }
            }
            else {
                this._tryGameNode.owner.visible = false;
            }
        }
    }

    class VerticalRecommentItem extends Laya.Script {
        constructor() {
            super(...arguments);
            this.selfBox = null;
            this.icon = null;
            this.itembg = null;
            this.LabelShadow = null;
            this.redpoint = null;
            this.label = null;
            this._location = null;
            this.count = 0;
            this.data = null;
            this._subNameLength = 4;
        }
        onAwake() {
            if (this.data == null || this.data == undefined)
                return;
            this.icon.on(Laya.Event.CLICK, this, () => {
                if (PlatUtils.IsDouyin) {
                    utils.Tool_Douyin.showMoreGamesModal();
                    return;
                }
                this._postClickData(this.data.appid);
                if (this.data.is_jump && this.data.is_jump == "true" && this.data.appid) {
                    utils.showLog("直接跳转!" + this.data.appid);
                    utils.navigateToMiniGame(this.data, (ret) => {
                        if (ret) {
                            if (this.data && this.data.appid) {
                                this._postData(this.data.appid);
                            }
                        }
                    });
                }
                else if (this.data.is_jump && this.data.is_jump == "false" && this.data.qr_code) {
                    if (PlatUtils.IsWechat) {
                        utils.showLog("二维码跳转!" + this.data.qr_code);
                        utils.wechatTool.previewImage(this.data.qr_code);
                        if (this.data && this.data.appid) {
                            this._postData(this.data.appid);
                        }
                    }
                    else {
                        utils.showLog("不支持二维码跳转!");
                    }
                }
                else {
                    utils.showLog("没有is_jump直接跳转!" + this.data.appid);
                    if (this.data.appid) {
                        utils.navigateToMiniGame(this.data, (ret) => {
                            if (ret) {
                                if (this.data.appid) {
                                    this._postData(this.data.appid);
                                }
                            }
                        });
                    }
                }
            });
        }
        onEnable() {
            if (this.data == null && this.data == undefined)
                return;
            if (this._location && (this._location == SubLocation.isYzBanner || this._location == SubLocation.isScrollbar || this._location == SubLocation.isMoreGame || this._location == SubLocation.isBoxInsertAd || this._location == SubLocation.isBeforGameOverAd)) {
                if (this.data && this.data.red && this.data.red != "0") {
                    if (this.data.red != "1") {
                        this.zoom();
                    }
                }
                else {
                    if (this.redpoint != null) {
                        this.redpoint.destroy();
                    }
                }
            }
        }
        init(data, location) {
            this.selfBox = this.owner;
            this.icon = this.owner.getChildByName("Icon");
            this.itembg = this.owner.getChildByName("itembg");
            this.LabelShadow = this.owner.getChildByName("LabelShadow");
            this.redpoint = this.owner.getChildByName("redpoint");
            this.label = this.owner.getChildByName("label");
            let checkSubString = [SubLocation.isMoreGame, SubLocation.isBoxInsertAd, SubLocation.isBeforGameOverAd, SubLocation.isVerticalPanel];
            if (checkSubString.indexOf(this._location) > -1) {
                this._subNameLength = 6;
            }
            this.count = 0;
            this.selfBox.rotation = 0;
            this.data = data;
            this._location = location;
            this.rotate();
            this.setSkin();
        }
        rotate() {
            if (this.count > 10) {
                this.count = 0;
                this.selfBox.rotation = 0;
                return;
            }
            this.count++;
            let target = 0;
            if (this.selfBox.rotation >= 5) {
                target = -5;
            }
            else {
                target = 5;
            }
            Laya.Tween.to(this.selfBox, { rotation: target }, 60, null, Laya.Handler.create(this, this.rotate));
        }
        zoom() {
            if (this == null || this == undefined)
                return;
            Laya.Tween.to(this.redpoint, { scaleX: 0.6, scaleY: 0.6 }, 1000, null, Laya.Handler.create(this, () => {
                if (this == null || this == undefined)
                    return;
                Laya.Tween.to(this.redpoint, { scaleX: 1, scaleY: 1 }, 1000, null, Laya.Handler.create(this, this.zoom));
            }));
        }
        setSkin() {
            if (this.data != null && this.data != undefined) {
                if (this.data.name) {
                    let gameName = this.data.name;
                    if (this.data.name.length > this._subNameLength) {
                        gameName = gameName.slice(0, this._subNameLength);
                        gameName += "...";
                    }
                    this.label.text = gameName;
                    this.LabelShadow.text = gameName;
                    if (this.data.icon != null && this.data.icon != undefined) {
                        this.icon.skin = this.data.icon;
                    }
                }
            }
            else {
                this.selfBox.visible = false;
            }
        }
        _postData(appid) {
            utils.postDataByLocation(appid, SubLocation.isTryGame, 1);
        }
        _postClickData(appid) {
            utils.postDataByLocation(appid, SubLocation.isTryGame, 0);
        }
        onDisable() {
            this.icon.off(Laya.Event.CLICK, this, null);
        }
        onDestroy() {
            this.icon.off(Laya.Event.CLICK, this, null);
        }
    }

    class VerticalRecommentPanel extends Laya.Script {
        constructor() {
            super(...arguments);
            this.panel = null;
            this.verticalRecommentItem = [];
            this.recommendGamesNode = null;
            this._curIndex = 0;
            this._isInit = false;
            this._data = null;
        }
        onAwake() {
            this.panel = this.owner.getChildByName("panel");
            this.recommendGamesNode = this.panel.getChildByName("RecommendGamesNode");
            for (let index = 0; index < this.recommendGamesNode.numChildren; index++) {
                this.verticalRecommentItem.push(this.recommendGamesNode.getChildAt(index).getComponent(VerticalRecommentItem));
            }
        }
        onEnable() {
            utils.registerServerInitEvent(() => {
                this._initWidget();
            }, this);
        }
        _initWidget() {
            if (this._isInit)
                return;
            let valid = true;
            if (utils.isVerticalRecommentPanel()) {
                if (PlatUtils.IsDouyin) {
                    if (!utils.Tool_Douyin.isShowMoreGamesModal()) {
                        this.owner.destroy();
                    }
                }
                this._data = utils.getRecommondGameList();
                var temp = [];
                for (var i = this._data.length - 1; i >= 0; i--) {
                    temp.push(this._data[i]);
                }
                this._data = temp;
                if (this._data) {
                    if (this._data.length > 0) {
                        this._isInit = true;
                        this._initData();
                        Laya.timer.loop(3000, this, this._initData);
                    }
                    else {
                        console.warn("交叉推广数据长度为0");
                        valid = false;
                    }
                }
                else {
                    console.warn("交叉推广数据为null!");
                    valid = false;
                }
            }
            if (!valid) {
                this.owner.destroy();
            }
        }
        _initData() {
            if (this == null && this == undefined)
                return;
            for (let index = 0; index < this.verticalRecommentItem.length; index++) {
                if (this._curIndex > this._data.length - 1) {
                    this._curIndex = 0;
                }
                this.verticalRecommentItem[index].init(this._data[this._curIndex], SubLocation.isVerticalPanel);
                this._curIndex++;
            }
        }
        onDisable() {
            Laya.timer.clearAll(this);
        }
        onDestroy() {
            Laya.timer.clearAll(this);
        }
    }

    class WithdrawalPanel extends Laya.Script {
        constructor() {
            super(...arguments);
            this.panel = null;
            this.btnClose = null;
            this.balanceLabel = null;
            this.btnWithdrawal = null;
            this.WithdrawalPriceNodes = null;
            this.itemArr = [];
            this.selfViwe = null;
            this._location = SubLocation.isMoreGame;
            this._redBagInfo = null;
            this._selectedMoneyItemIndex = -1;
        }
        onAwake() {
            this._redBagInfo = utils.yzRedBagInfo;
            this.selfViwe = this.owner;
            this.panel = this.owner.getChildByName("panel");
            this.btnClose = this.panel.getChildByName("btnClose");
            this.balanceLabel = this.panel.getChildByName("balanceLabel");
            this.btnWithdrawal = this.panel.getChildByName("btnWithdrawal");
            this.WithdrawalPriceNodes = this.panel.getChildByName("WithdrawalPriceNodes");
            let ratio = 1;
            if (cc.winSize.height < cc.winSize.width) {
                ratio = cc.winSize.width / 1920 * 0.5;
            }
            else {
                ratio = cc.winSize.width / 1080;
            }
            this.panel.scale(ratio, ratio);
            this._initWidget();
        }
        _initWidget() {
            this.btnWithdrawal.on(Laya.Event.CLICK, this, this.withDrawalMoney);
            this.btnClose.on(Laya.Event.CLICK, this, this.onCloseBtnHandler);
            for (let index = 0; index < this.WithdrawalPriceNodes.numChildren; index++) {
                this.itemArr.push(this.WithdrawalPriceNodes.getChildAt(index));
            }
            if (this._redBagInfo.balance > 0) {
                this.balanceLabel.text = `${this._redBagInfo.balance}元`;
            }
            for (let index = 0; index < this.itemArr.length; index++) {
                let data = utils.yzRedBagInfo.withdrawaMoneys[index];
                if (data) {
                    this.itemArr[index].getChildByName("PriceLbl").text = `${data}元`;
                    this.itemArr[index].on(Laya.Event.CLICK, this, this.selectedMoneyNode, [index, index]);
                }
            }
        }
        selectedMoneyNode(e, itemIndex) {
            if (this._redBagInfo.balance >= utils.yzRedBagInfo.withdrawaMoneys[itemIndex]) {
                this._selectedMoneyItemIndex = itemIndex;
                for (let index = 0; index < this.itemArr.length; index++) {
                    if (itemIndex != index) {
                        this.itemArr[index].getChildByName("selectedBg").active = false;
                    }
                }
                this.itemArr[itemIndex].getChildByName("selectedBg").active = true;
            }
            else {
                utils.showMsg("当前余额不足！");
            }
        }
        withDrawalMoney(e) {
            console.log("money");
            if (this._selectedMoneyItemIndex > -1) {
            }
            else {
                utils.showMsg("请选择要提现的金额！");
            }
        }
        onCloseBtnHandler(e) {
            this.hide();
        }
        _updatePanel() {
            utils.postRecommentShowData(this._location);
            this._initWidget();
            return;
        }
        init(YzRedBagInfo) {
        }
        hide() {
            this.selfViwe.visible = false;
        }
    }

    class WithdrawalNode extends Laya.Script {
        constructor() {
            super(...arguments);
            this.balanceLbl = null;
            this.boderBg = null;
            this.btntTixiang = null;
        }
        onAwake() {
            this.boderBg = this.owner.getChildByName("boderBg");
            this.balanceLbl = this.boderBg.getChildByName("balanceLbl");
            this.btntTixiang = this.boderBg.getChildByName("btntTixiang");
            this.btntTixiang.on(Laya.Event.CLICK, this, this.showWithdrawalPanel);
        }
        init(data) {
            if (utils.yzRedBagInfo.balance > 0) {
                this.balanceLbl.text = `¥${utils.yzRedBagInfo.balance}`;
            }
            else {
                this.balanceLbl.text = `¥0.00`;
            }
        }
        showWithdrawalPanel() {
            utils.SendEvent("红包提现框-点击提现按钮！");
            utils.showWithdrawalPanel();
        }
        onEnable() {
            utils.SendEvent("红包提现框-展示成功！");
            this.init();
            Laya.stage.on("YZ_RED_BAG_BALANCE_CHANGE", this, () => {
                this.init();
            });
        }
        onDisable() {
            Laya.stage.off("YZ_RED_BAG_BALANCE_CHANGE", this, null);
        }
    }

    class YZ_ShakeNode extends Laya.Script {
        constructor() {
            super(...arguments);
            this.icon = null;
            this.shakeTimes = 0;
            this.callbaclId = null;
        }
        onAwake() {
            this.icon = this.owner.getChildByName("boderBg").getChildByName("Icon");
            this.shake();
        }
        shake() {
            if (this.shakeTimes > 10) {
                this.shakeTimes = 0;
                this.icon.rotation = 0;
                if (this.callbaclId != null) {
                    clearTimeout(this.callbaclId);
                }
                this.callbaclId = setTimeout(() => {
                    if (this != null && this != undefined) {
                        this.shake();
                    }
                }, 2000);
                return;
            }
            this.shakeTimes++;
            let target = 0;
            if (this.icon.rotation >= 5) {
                target = -5;
            }
            else {
                target = 5;
            }
            Laya.Tween.to(this.icon, { rotation: target }, 60, null, Laya.Handler.create(this, this.shake));
        }
        onDisable() {
            if (this.callbaclId != null) {
                clearTimeout(this.callbaclId);
            }
        }
        onDestroy() {
            if (this.callbaclId != null) {
                clearTimeout(this.callbaclId);
            }
        }
    }

    class WithdrawalWidget extends Laya.Script {
        constructor() {
            super(...arguments);
            this._withdrawalNode = null;
            this._isInit = false;
        }
        onAwake() {
            this._withdrawalNode = this.owner.getChildByName("WithdrawalNode").getComponent(WithdrawalNode);
            this._withdrawalNode.owner.visible = false;
        }
        onEnable() {
            utils.registerServerInitEvent(() => {
                this._initWidget();
            }, this);
        }
        onDisable() {
            utils.unregisterServerInitEvent(this);
        }
        _initWidget() {
            this._withdrawalNode.owner.visible = true;
            this._withdrawalNode.init({});
        }
    }

    class HelpHandAction extends Laya.Script {
        constructor() {
            super();
            this._hand = null;
            this.down = {};
            this.up = {};
            this.runTime = 300;
        }
        onAwake() {
            this._hand = this.owner;
            this.down = { x: this._hand.x + 50, y: this._hand.y + 50 };
            this.up = { x: this._hand.x - 50, y: this._hand.y - 50 };
        }
        onEnable() {
            let action = () => {
                Laya.Tween.to(this._hand, { x: this.down.x, y: this.down.y }, this.runTime, null, Laya.Handler.create(this, () => {
                    if (!this._hand)
                        return;
                    Laya.Tween.to(this._hand, { x: this.up.x, y: this.up.y }, this.runTime, null, Laya.Handler.create(this, () => {
                        if (!this._hand)
                            return;
                        action();
                    }));
                }));
            };
            action();
        }
        onDisable() {
            Laya.Tween.clearTween(this);
        }
    }

    class UILoading extends Laya.Script {
        constructor() {
            super(...arguments);
            this.progress = 0;
        }
        onAwake() {
            UILoading.instance = this;
            this.bg = this.owner.getChildByName("bg");
            this.bg.on(Laya.Event.CLICK, this, () => { null; });
            this.bg.on(Laya.Event.MOUSE_DOWN, this, () => { null; });
            this.bg.on(Laya.Event.MOUSE_MOVE, this, () => { null; });
            this.bg.on(Laya.Event.MOUSE_UP, this, () => { null; });
            this.logo = this.owner.getChildByName("logo");
            this.progressBox = this.owner.getChildByName("progressBox");
            this.imgPro = this.progressBox.getChildByName("progress");
            this.flash = this.progressBox.getChildByName("flash");
            this.textPro = this.progressBox.getChildByName("tip");
            this.startX = this.flash.x;
            this.startDis = this.flash.x - this.imgPro.x;
            this.fitUI();
        }
        onStart() {
            console.log('fb UILoading  onStart');
            FBInstant.setLoadingProgress(100);
            FBInstant.startGameAsync().then(function () {
                DataManager.instance.loadFbVideo();
                DataManager.instance.loadFBInterstitialAd();
            });
        }
        fitUI() {
            this.bg.height = Laya.stage.height;
            this.logo.x = Laya.stage.width / 2;
            this.logo.y = 300;
            this.progressBox.x = Laya.stage.width / 2;
            this.progressBox.y = Laya.stage.height - this.progressBox.height;
        }
        onUpdate() {
            if (this.progress < 99) {
                this.progress++;
            }
            else {
                if (UIMain.instance && GameScene.instance.taizi1 && GameScene.instance.player) {
                    this.owner.removeChildren();
                    this.owner.destroy();
                    UIMain.instance.initUiMain();
                    return;
                }
            }
            if (this.imgPro.width < 350) {
                this.imgPro.width += 2;
                this.textPro.text = Math.round((this.imgPro.width / 357) * 100) + "%";
            }
            if (this.imgPro.width < this.flash.width) {
                this.flash.visible = false;
            }
            else {
                this.flash.visible = true;
                this.flash.x += 7;
                this.maxX = this.imgPro.x + this.imgPro.width - this.startDis - this.flash.width;
                if (this.flash.x >= this.maxX) {
                    this.flash.x = this.startX;
                }
            }
        }
    }

    class UIResurgence extends Laya.Script {
        onStart() {
            let bg = this.owner.getChildByName('BG');
            bg.on(Laya.Event.CLICK, this, () => { });
            this.actNode = this.owner.getChildByName('Action');
            this.actNode.scale(0.5, 0.5, true);
            Laya.Tween.to(this.actNode, { scaleX: 0.9, scaleY: 0.9 }, 400, Laya.Ease.elasticOut);
            this.title = this.actNode.getChildByName('Title');
            this.btnYes = this.actNode.getChildByName('BtnYes');
            this.btnNo = this.actNode.getChildByName('BtnNo');
            if (utils) {
                utils.adManager.ShowBanner(BannerLocation.Game);
                utils.showSkipBtn(this.btnNo, true);
            }
            else
                this.btnNo.visible = true;
            Tools.showBanner(true);
            this.fitUI();
            this.addEvent();
        }
        addEvent() {
            Tools.AddClickEvent(this.btnYes, this, this.onBtnYesClick, this.btnYes.scaleX);
            Tools.AddClickEvent(this.btnNo, this, this.onBtnNoClick, this.btnNo.scaleX);
        }
        fitUI() {
            this.actNode.x = Laya.stage.width / 2;
            this.actNode.y = Laya.stage.height / 2;
        }
        onBtnYesClick(e) {
            let self = this;
            let cb = function () {
                self.destroyMine();
                UIMain.instance.resurgence = null;
                UIMain.instance.isTimeKeep = true;
                UIMain.instance.onTimeKeeping();
            };
            Tools.watchVideo(cb);
        }
        onBtnNoClick(e) {
            this.destroyMine();
            GameScene.instance.player.isWin = false;
            UIMain.instance.gameOver();
            UIMain.instance.showNativeTryGameWidgetByEnd();
        }
        destroyMine() {
            Tools.showBanner(false);
            this.owner.removeSelf();
            this.owner.destroy();
        }
    }

    class UIReward extends Laya.Script {
        onStart() {
            let bg = this.owner.getChildByName('BG');
            bg.on(Laya.Event.CLICK, this, () => { });
            this.actNode = this.owner.getChildByName('Action');
            this.actNode.scale(0.5, 0.5, true);
            Laya.Tween.to(this.actNode, { scaleX: 0.9, scaleY: 0.9 }, 400, Laya.Ease.elasticOut);
            this.title = this.actNode.getChildByName('Title');
            this.btnMore = this.actNode.getChildByName('BtnMore');
            this.btnNo = this.actNode.getChildByName('BtnNo');
            this.fitUI();
            this.addEvent();
        }
        addEvent() {
            Tools.AddClickEvent(this.btnMore, this, this.onBtnYesClick, this.btnMore.scaleX);
            Tools.AddClickEvent(this.btnNo, this, this.onBtnNoClick, this.btnNo.scaleX);
        }
        fitUI() {
            this.actNode.x = Laya.stage.width / 2;
            this.actNode.y = Laya.stage.height / 2;
        }
        onBtnYesClick(e) {
            let self = this;
            let cb = function () {
                GData.curTotalGold += 100;
                Laya.stage.event("onUpdateGold");
                self.destroyMine();
            };
            Tools.watchVideo(cb);
        }
        onBtnNoClick(e) {
            this.destroyMine();
        }
        destroyMine() {
            this.owner.removeSelf();
            this.owner.destroy();
        }
    }

    class UIShop extends Laya.Script {
        constructor() {
            super(...arguments);
            this.page1Cur = 1;
            this.page1Max = 2;
            this.touchLefts = 0;
            this.touchRights = 0;
            this.black = new Laya.Vector4(0, 0, 0, 0);
            this.white = new Laya.Vector4(1, 1, 1, 1);
            this.iconClickId = -1;
            this.tableTouchPosX = 0;
            this.isTableMove = false;
            this.playerCanRorate = false;
            this.mouseBeginX = 0;
        }
        onStart() {
            this.actNode = this.owner.getChildByName('Action');
            this.bg = this.owner.getChildByName('BG');
            this.btn = this.actNode.getChildByName("Btn");
            this.condition = this.btn.getChildByName("condition");
            let table = this.actNode.getChildByName('Table');
            this.closeBtn = this.actNode.getChildByName('BtnClose');
            this.uipage = this.actNode.getChildByName('UIPage');
            this.dotNode = this.actNode.getChildByName('Dot');
            this.glow = this.actNode.getChildByName('Glow');
            this.infoNode = this.owner.getChildByName('Info');
            this.gold = this.infoNode.getChildByName('gold');
            this.labelGold = this.infoNode.getChildByName('goldNumber');
            this.touch = this.actNode.getChildByName("Touch");
            table.on(Laya.Event.MOUSE_DOWN, this, this.tableDown);
            table.on(Laya.Event.MOUSE_MOVE, this, this.tableMove);
            if (utils)
                utils.showSkipBtn(this.closeBtn);
            else
                this.closeBtn.visible = true;
            this.fitUI();
            this.addEvent();
            this.init3D();
            this.refreshUI(true);
            this.updateDot();
            this.refresh3D(DataManager.instance.curPlayerID, true);
            if (utils) {
                let tryGame = utils.adManager.showNativeTryGameWidget({ left: 0, scale: 1 });
                if (tryGame) {
                    tryGame.scale(0.6, 0.6);
                    tryGame.x = this.closeBtn.x + 150;
                    tryGame.y = this.closeBtn.y - 20;
                    ;
                    tryGame.zOrder = 994;
                }
            }
        }
        onUpdate() {
            if (this.glow) {
                this.glow.rotation++;
            }
        }
        addEvent() {
            Laya.stage.on('onUpdateGold', this, this.onUpdateGold);
            Tools.AddClickEvent(this.closeBtn, this, this.closeShop, this.closeBtn.scaleX);
            Tools.AddClickEvent(this.btn, this, this.btnGetClick, this.btn.scaleX);
            this.touch.on(Laya.Event.MOUSE_DOWN, this, this.touchStart);
            this.touch.on(Laya.Event.MOUSE_MOVE, this, this.touchMove);
            this.touch.on(Laya.Event.MOUSE_UP, this, this.touchEnd);
            this.bg.on(Laya.Event.CLICK, this, this.btnBgClick);
        }
        fitUI() {
            this.infoNode.x = 0;
            this.infoNode.y = 100;
            this.uipage.width = Laya.stage.width;
            this.uipage.x = Laya.stage.width / 2;
            this.uipage.y = Laya.stage.height - this.uipage.height + 100;
            this.dotNode.x = Laya.stage.width / 2;
            this.dotNode.y = this.uipage.y + this.uipage.height / 2;
            this.closeBtn.x = 0;
            let gap = Laya.stage.height / Laya.stage.width > 2 ? 200 : 100;
            this.closeBtn.y = this.infoNode.y + gap;
            this.glow.x = Laya.stage.width / 2;
            this.glow.y = Laya.stage.height / Laya.stage.width > 2 ? 300 : 200;
            this.touch.y = this.uipage.y - this.touch.height;
            this.btn.x = Laya.stage.width / 2;
            this.btn.y = this.uipage.y - this.uipage.height / 2 - 50;
        }
        init3D() {
            this.roleScene = new Laya.Scene3D();
            this.owner.addChild(this.roleScene);
            this.roleScene.zOrder = 999;
            this.roleScene.ambientColor = new Laya.Vector3(0.4, 0.4, 0.4);
            let camera = (this.roleScene.addChild(new Laya.Camera(0, 0.1, 100)));
            camera.clearFlag = 2;
            camera.transform.translate(new Laya.Vector3(0, 2, 6));
            let ratio = 65 * (0.5 - Laya.stage.width / Laya.stage.height);
            camera.transform.rotationEuler = new Laya.Vector3(-40 + ratio, 0, 0);
            var directionLight = this.roleScene.addChild(new Laya.DirectionLight());
            directionLight.color = new Laya.Vector3(0.7, 0.7, 0.7);
            directionLight.transform.translate(new Laya.Vector3(0, 0, 0));
            directionLight.transform.rotationEuler = new Laya.Vector3(-45, 0, 0);
            this.rolePlaneRotate = new Laya.Sprite3D();
            this.roleScene.addChild(this.rolePlaneRotate);
            this.rolePlane = new Laya.MeshSprite3D();
            this.rolePlaneRotate.addChild(this.rolePlane);
        }
        tween3DShowAction(obj, scale) {
            Laya.Tween.to(obj, { scale: { x: scale, y: scale, z: scale } }, 1000, Laya.Ease.elasticOut);
        }
        tween3DCloseActon(obj) {
            Laya.Tween.to(obj, { scale: { x: 0, y: 0, z: 0 } }, 300);
        }
        update3DRotate(angle) {
            this.rolePlaneRotate.transform.rotate(new Laya.Vector3(0, angle, 0), true);
        }
        refresh3D(id, isUnLock = false) {
            if (this.uipage.visible) {
                this.rolePlane.active = true;
                Laya.Sprite3D.load("res/scenes/LayaScene_prefabs/Conventional/player" + id + ".lh", Laya.Handler.create(this, (sp) => {
                    this.rolePlane.removeChildren();
                    let node = (sp.clone());
                    this.rolePlane.addChild(node);
                    node.getChildByName('tail').active = false;
                    node.transform.localPosition = new Laya.Vector3(0, -2, -1);
                    node.transform.localRotationY = 180;
                    let SkinMat = Tools.GetChildByName(node, "LittleMan_Mesh");
                    for (let i = 0; i < SkinMat.skinnedMeshRenderer.materials.length; i++) {
                        SkinMat.skinnedMeshRenderer.materials[i].albedoColor = isUnLock ? this.white : this.black;
                    }
                    this.rolePlane.transform.scale = new Laya.Vector3(1, 1, 1);
                    this.tween3DShowAction(this.rolePlane, 1);
                }));
            }
        }
        refreshUI(isAddClick = false) {
            let planeCell1 = this.uipage.getChildByName('1');
            let planeCell2 = this.uipage.getChildByName('2');
            this.initCellByData(planeCell1, 0, isAddClick);
            this.initCellByData(planeCell2, 6, isAddClick);
            this.onUpdateGold();
        }
        initCellByData(node, idStart, isAddClick) {
            for (let i = 0; i < 6; i++) {
                let data = PLAYER_INFO[idStart + i];
                let cell = node.getChildByName('Cell' + i);
                let icon = cell.getChildByName('Icon');
                let lock = cell.getChildByName('Lock');
                let wenhao = lock.getChildByName("wen");
                let iconPath = 'skinicon/skin' + (idStart + i) + '.png';
                let isHave = DataManager.instance.isHaveFaceByID(idStart + i);
                let isUnLock = DataManager.instance.isUnlockFaceByID(idStart + i);
                icon.skin = iconPath;
                icon.width = icon.height = 150;
                lock.visible = !isHave;
                wenhao.visible = !isUnLock;
                icon.visible = isUnLock || isHave;
                cell.skin = DataManager.instance.curPlayerID == data.id ? 'uimain/yellow.png' : 'uimain/green.png';
                if (isAddClick) {
                    cell.on(Laya.Event.MOUSE_DOWN, this, this.tableDown);
                    cell.on(Laya.Event.MOUSE_MOVE, this, this.tableMove);
                    cell.on(Laya.Event.CLICK, this, this.touchIconClick, [idStart + i]);
                }
            }
        }
        onUpdateGold() {
            this.labelGold.value = GData.curTotalGold.toString();
        }
        touchIconClick(id) {
            this.iconClickId = id;
            if (DataManager.instance.isHaveFaceByID(id)) {
                DataManager.instance.curPlayerID = id;
                localStorage.setItem('curPlayerID', DataManager.instance.curPlayerID.toString());
                this.refreshUI();
            }
            this.refreshTopInfo();
        }
        refreshTopInfo() {
            let id = this.iconClickId;
            if (DataManager.instance.isHaveFaceByID(id)) {
                this.refresh3D(id, true);
                this.btn.visible = false;
            }
            else {
                if (DataManager.instance.isUnlockFaceByID(id)) {
                    if (DataManager.instance.isCanBuyFaceByID(id)) {
                        this.refresh3D(id, true);
                        this.btn.visible = !this.glow.visible;
                        if (this.btn.visible) {
                            let text = this.btn.getChildByName('text');
                            let icon = this.btn.getChildByName('video');
                            text.skin = "textures/lijigoumai.png";
                            let str = DataManager.instance.getFaceBuyDescByID(id);
                            let index = str.indexOf('观看视频');
                            let isVideo = index > -1;
                            if (index > -1) {
                                str = str.replace('观看视频', '');
                            }
                            this.condition.text = str;
                            icon.visible = isVideo;
                            text.pos(isVideo ? 179 : 144, 57);
                        }
                    }
                    else {
                        this.refresh3D(id, false);
                        this.btn.visible = !this.glow.visible;
                        if (this.btn.visible) {
                            let text = this.btn.getChildByName('text');
                            let icon = this.btn.getChildByName('video');
                            text.skin = "textures/lijijiesuo.png";
                            let str = DataManager.instance.getFaceUnlockDescByID(id);
                            let index = str.indexOf('观看视频');
                            let isVideo = index > -1;
                            if (index > -1) {
                                str = str.replace('观看视频', '');
                            }
                            this.condition.text = str;
                            icon.visible = isVideo;
                            text.pos(isVideo ? 179 : 144, 57);
                        }
                    }
                }
                else {
                    this.refresh3D(id, false);
                    this.btn.visible = !this.glow.visible;
                    if (this.btn.visible) {
                        let text = this.btn.getChildByName('text');
                        let icon = this.btn.getChildByName('video');
                        text.skin = "textures/lijijiesuo.png";
                        let str = DataManager.instance.getFaceUnlockDescByID(id);
                        let index = str.indexOf('观看视频');
                        let isVideo = index > -1;
                        if (index > -1) {
                            str = str.replace('观看视频', '');
                        }
                        this.condition.text = str;
                        icon.visible = isVideo;
                        text.pos(isVideo ? 179 : 144, 57);
                    }
                }
            }
        }
        tableDown(e) {
            this.isTableMove = false;
            this.tableTouchPosX = e.stageX;
        }
        tableMove(e) {
            let x = e.stageX;
            let length = this.tableTouchPosX - x;
            if (Math.abs(length) > 100 && !this.isTableMove) {
                this.isTableMove = true;
                let curUI = this.uipage;
                let dir = length > 0 ? -750 : 750;
                this.movePage(curUI, dir);
            }
        }
        movePage(page, dir) {
            if (page == this.uipage) {
                if (this.btn) {
                    this.btn.visible = false;
                }
                if (dir > 0 && this.page1Cur > 1) {
                    this.closeBtn.visible = false;
                    this.page1Cur--;
                    Laya.Tween.to(this.uipage, { x: this.uipage.x + dir }, 200, null, Laya.Handler.create(this, () => {
                        this.closeBtn.visible = true;
                    }));
                }
                else if (dir < 0 && this.page1Cur < this.page1Max) {
                    this.closeBtn.visible = false;
                    this.page1Cur++;
                    Laya.Tween.to(this.uipage, { x: this.uipage.x + dir }, 200, null, Laya.Handler.create(this, () => {
                        this.closeBtn.visible = true;
                    }));
                }
            }
            this.updateDot();
        }
        updateDot() {
            let index = this.page1Cur;
            for (let i = 1; i <= 2; i++) {
                let sp = this.dotNode.getChildByName('' + i);
                if (sp) {
                    sp.skin = i == index ? 'textures/dian1.png' : 'textures/dian2.png';
                    this.glow.visible = i == index;
                    this.bg.skin = i == index ? 'textures/skinbg2.png' : 'textures/skinbg1.png';
                }
            }
        }
        btnGetClick() {
            let id = this.iconClickId;
            if (DataManager.instance.isHaveFaceByID(id)) {
                Tools.showTip('已拥有该皮肤');
                return;
            }
            if (DataManager.instance.isUnlockFaceByID(id)) {
                this.buyFace(id);
            }
            else {
                if (DataManager.instance.isCanUnlockFaceByID(id)) {
                    this.unlockFace(id);
                }
                else {
                    Tools.showTip('Unsatisfied Unlock Conditions');
                }
            }
        }
        unlockFace(id) {
            let info = SHOP_INFO[id];
            for (let i = 0; i < info.unlockInfo.length; i++) {
                let data = info.unlockInfo[i];
                if (data.type == SHOP_TPYE.sign) {
                    if (DataManager.instance.signDays.length < data.count) {
                        Tools.showTip('签到天数不足');
                        return;
                    }
                    else {
                        this.unlockSuccess(0, id);
                    }
                }
            }
            let needGold = 0;
            for (let i = 0; i < info.unlockInfo.length; i++) {
                let data = info.unlockInfo[i];
                if (data.type == SHOP_TPYE.gold) {
                    needGold = data.count;
                    if (GData.curTotalGold < data.count) {
                        Tools.ShowUI("prefab/UIReward.json", 995);
                        return;
                    }
                    else {
                        let isNeedVideo = false;
                        for (let j = 0; j < info.unlockInfo.length; j++) {
                            if (info.unlockInfo[j].type == SHOP_TPYE.video && info.unlockInfo[j].count > 0) {
                                isNeedVideo = true;
                                break;
                            }
                        }
                        if (isNeedVideo) {
                        }
                        else {
                            this.unlockSuccess(needGold, id);
                        }
                    }
                }
            }
            for (let i = 0; i < info.unlockInfo.length; i++) {
                let data = info.unlockInfo[i];
                if (data.type == SHOP_TPYE.video) {
                    if (data.count > 0) {
                        let cb = function () {
                            this.unlockSuccess(needGold, id);
                        }.bind(this);
                        Tools.watchVideo(cb);
                        return;
                    }
                }
            }
        }
        buyFace(id) {
            let info = SHOP_INFO[id];
            for (let i = 0; i < info.buyInfo.length; i++) {
                let data = info.buyInfo[i];
                if (data.type == SHOP_TPYE.sign) {
                    if (DataManager.instance.signDays.length < data.count) {
                        Tools.showTip('签到天数不足');
                        return;
                    }
                }
            }
            let needGold = 0;
            for (let i = 0; i < info.buyInfo.length; i++) {
                let data = info.buyInfo[i];
                if (data.type == SHOP_TPYE.gold) {
                    needGold = data.count;
                    if (GData.curTotalGold < data.count) {
                        Tools.ShowUI("prefab/UIReward.json", 995);
                        return;
                    }
                    else {
                        let isNeedVideo = false;
                        for (let j = 0; j < info.buyInfo.length; j++) {
                            if (info.buyInfo[j].type == SHOP_TPYE.video && info.buyInfo[j].count > 0) {
                                isNeedVideo = true;
                                break;
                            }
                        }
                        if (isNeedVideo) {
                        }
                        else {
                            this.buySuccess(needGold, id);
                        }
                    }
                }
            }
            for (let i = 0; i < info.buyInfo.length; i++) {
                let data = info.buyInfo[i];
                if (data.type == SHOP_TPYE.video) {
                    if (data.count > 0) {
                        let cb = function () {
                            this.buySuccess(needGold, id);
                        }.bind(this);
                        Tools.watchVideo(cb);
                        return;
                    }
                }
            }
        }
        unlockSuccess(price, id) {
            GData.curTotalGold -= price;
            DataManager.instance.unlockFaceByID(id);
            this.refreshUI();
            this.refreshTopInfo();
        }
        buySuccess(price, id) {
            GData.curTotalGold -= price;
            DataManager.instance.buyFaceByID(id);
            this.refreshUI();
            this.refreshTopInfo();
        }
        getCellById(cells, id) {
            for (let i = 0; i < cells.length; i++) {
                if (cells[i].name == id.toString()) {
                    return cells[i];
                }
            }
            return null;
        }
        closeShop() {
            if (utils)
                utils.adManager.hideNativeTryGameWidget();
            GameScene.instance.refreshPlayer(DataManager.instance.curPlayerID);
            Laya.Tween.clearAll;
            this.owner.removeSelf();
            this.owner.destroy();
            Laya.stage.offAllCaller(this);
            UIMain.instance.showNativeTryGameWidget();
        }
        touchStart(event) {
            this.playerCanRorate = true;
            this.mouseBeginX = Laya.stage.mouseX;
        }
        touchMove(event) {
            if (this.playerCanRorate) {
                this.rolePlane.getChildAt(0).transform.localRotationEulerY += (Laya.stage.mouseX - this.mouseBeginX) / 30;
            }
        }
        touchEnd(event) {
            this.playerCanRorate = false;
        }
        btnBgClick() {
        }
    }

    class UISign extends Laya.Script {
        constructor() {
            super(...arguments);
            this.cells = [];
            this.isOpenDouble = false;
        }
        onStart() {
            let bg = this.owner.getChildByName('BG');
            bg.on(Laya.Event.CLICK, this, this.onBtnClose);
            this.actNode = this.owner.getChildByName("Action");
            this.actNode.scale(0.5, 0.5, true);
            Laya.Tween.to(this.actNode, { scaleX: 0.9, scaleY: 0.9 }, 400, Laya.Ease.elasticOut);
            let btnClose = this.actNode.getChildByName("BtnClose");
            this.btnGet = this.actNode.getChildByName("BtnGet");
            this.btnDone = this.actNode.getChildByName("BtnDone");
            this.btnDouble = this.actNode.getChildByName("BtnDouble");
            console.log('sign onStart');
            Tools.showBanner(true);
            DataManager.instance.showFBInterstitialAd();
            if (utils) {
                utils.adManager.ShowBanner(BannerLocation.Sign);
                utils.showSkipBtn(this.btnGet);
                utils.showSkipBtn(btnClose, true);
                if (utils.ServerConfig.isInterstitial == "true" || utils.ServerConfig.isInterstitial) {
                    console.log('调用插屏广告');
                    utils.adManager.ShowInterstitial();
                }
            }
            else {
                this.btnGet.visible = true;
                btnClose.visible = true;
            }
            Tools.AddClickEvent(btnClose, this, this.onBtnClose, btnClose.scaleX);
            Tools.AddClickEvent(this.btnDone, this, this.onBtnDoneClick, this.btnDone.scaleX);
            Tools.AddClickEvent(this.btnGet, this, this.onBtnGetClick, this.btnGet.scaleX);
            Tools.AddClickEvent(this.btnDouble, this, this.onBtnDoubleClick, this.btnDouble.scaleX);
            for (let i = 1; i <= 7; i++) {
                let cell = this.actNode.getChildByName("Cell" + i);
                this.cells.push(cell);
            }
            this.refreshUI();
            this.fitUI();
        }
        fitUI() {
            this.actNode.x = Laya.stage.width / 2;
            this.actNode.y = Laya.stage.height / 2;
        }
        refreshUI() {
            let day = (new Date()).getDate();
            let isSignedToday = DataManager.instance.signDays.indexOf(day) > -1;
            let signedDays = DataManager.instance.signDays.length;
            for (let i = 0; i < this.cells.length; i++) {
                let cell = this.cells[i];
                let ok = cell.getChildByName('OK');
                let cover = cell.getChildByName("Cover");
                ok.visible = signedDays > i;
                if (isSignedToday) {
                    cover.visible = i >= signedDays;
                }
                else {
                    cover.visible = i > signedDays;
                }
            }
            this.btnDone.visible = isSignedToday || signedDays >= 7;
            this.btnDouble.visible = !this.btnDone.visible;
        }
        onBtnDoubleClick(e) {
            let self = this;
            let cb = function () {
                self.videoSuccess(true);
            };
            Tools.watchVideo(cb);
        }
        onBtnGetClick(e) {
            this.btnOut(e);
            this.videoSuccess(false);
        }
        videoSuccess(isDouble) {
            let day = (new Date()).getDate();
            let reward = SIGN_INFO[DataManager.instance.signDays.length];
            if (reward) {
                DataManager.instance.signDays.push(day);
                localStorage.setItem("signDays", DataManager.instance.signDays.join(','));
                if (reward.type == ITEM_TYPE.GOLD) {
                    GData.curTotalGold += isDouble ? reward.count * 2 : reward.count;
                    Laya.stage.event("onUpdateGold");
                }
                else if (reward.type == ITEM_TYPE.KEY) {
                    GData.curKey += isDouble ? reward.count * 2 : reward.count;
                    Laya.stage.event("onUpdateKey");
                }
                else if (reward.type == ITEM_TYPE.TURN) {
                    DataManager.instance.lotteryTimes += isDouble ? reward.count * 2 : reward.count;
                    localStorage.setItem('lotteryTimes', DataManager.instance.lotteryTimes.toString());
                }
                else if (reward.type == ITEM_TYPE.SKIN) {
                    DataManager.instance.curPlayerID = reward.count;
                    DataManager.instance.buyFaceByID(reward.count);
                }
                Tools.showTip("Get Reward");
                this.refreshUI();
            }
        }
        onBtnDoneClick(e) {
            if (DataManager.instance.signDays.length >= 7) {
                Tools.showTip("All Rewards Received");
            }
            else {
                Tools.showTip("Received");
            }
        }
        onBtnClose() {
            this.owner.removeSelf();
            this.owner.destroy();
            Tools.showBanner(false);
        }
        btnOut(e) { e.target.scale(1, 1, true); }
    }

    class UITest extends Laya.Script {
        onStart() {
            let bg = this.owner.getChildByName('BG');
            bg.on(Laya.Event.CLICK, this, () => { });
            let actNode = this.owner.getChildByName('Action');
            this.title = actNode.getChildByName('Title');
            this.light = actNode.getChildByName('Light');
            this.icon = actNode.getChildByName('Icon');
            this.btnYes = actNode.getChildByName('BtnYes');
            this.btnNo = actNode.getChildByName('BtnNo');
            if (utils)
                utils.showSkipBtn(this.btnNo);
            else {
                this.btnNo.visible = true;
            }
            this.fitUI();
            this.addEvent();
            this.init3D();
            this.refresh3D(UIMain.instance.UITestId);
            Tools.showBanner(true, BannerLocation.Game);
        }
        addEvent() {
            Tools.AddClickEvent(this.btnYes, this, this.onBtnYesClick, this.btnYes.scaleX);
            Tools.AddClickEvent(this.btnNo, this, this.onBtnNoClick, this.btnNo.scaleX);
        }
        fitUI() {
            this.title.x = Laya.stage.width / 2;
            this.title.y = Laya.stage.height / Laya.stage.width > 2 ? 300 : 200;
            this.light.x = Laya.stage.width / 2;
            this.light.y = Laya.stage.height / 2 - 100;
            this.icon.x = Laya.stage.width / 2;
            this.icon.y = Laya.stage.height / 2;
            this.btnYes.x = Laya.stage.width / 2;
            this.btnYes.y = Laya.stage.height - 300;
            this.btnNo.x = Laya.stage.width / 2;
            this.btnNo.y = this.btnYes.y + 100;
        }
        onUpdate() {
            if (this.light && this.light.parent) {
                this.light.rotation++;
            }
        }
        init3D() {
            this.roleScene = new Laya.Scene3D();
            this.owner.addChild(this.roleScene);
            this.roleScene.zOrder = 999;
            this.roleScene.ambientColor = new Laya.Vector3(0.4, 0.4, 0.4);
            var camera = (this.roleScene.addChild(new Laya.Camera(0, 0.1, 100)));
            camera.clearFlag = 2;
            camera.transform.translate(new Laya.Vector3(0, 2, 6));
            let ratio = 65 * (0.5 - Laya.stage.width / Laya.stage.height);
            camera.transform.rotationEuler = new Laya.Vector3(-40 + ratio, 0, 0);
            var directionLight = this.roleScene.addChild(new Laya.DirectionLight());
            directionLight.color = new Laya.Vector3(0.4, 0.4, 0.4);
            directionLight.transform.translate(new Laya.Vector3(0, 0, 0));
            directionLight.transform.rotationEuler = new Laya.Vector3(-45, 0, 0);
            this.rolePlaneRotate = new Laya.Sprite3D();
            this.roleScene.addChild(this.rolePlaneRotate);
            this.rolePlane = new Laya.MeshSprite3D();
            this.rolePlaneRotate.addChild(this.rolePlane);
        }
        refresh3D(id) {
            if (this.icon.visible) {
                this.rolePlane.active = true;
                Laya.Sprite3D.load("res/scenes/LayaScene_prefabs/Conventional/player" + id + ".lh", Laya.Handler.create(this, (sp) => {
                    this.rolePlane.removeChildren();
                    let node = (sp.clone());
                    this.rolePlane.addChild(node);
                    node.getChildByName('tail').active = false;
                    node.transform.localRotationY = -180;
                    let posY = (750 / Laya.stage.height) * 5;
                    node.transform.localPosition = new Laya.Vector3(0, -posY, 0);
                    this.rolePlane.transform.scale = new Laya.Vector3(1.5, 1.5, 1.5);
                }));
            }
        }
        onBtnYesClick(e) {
            this.watchVideo();
        }
        onBtnNoClick(e) {
            this.destroyMine();
        }
        watchVideo() {
            let self = this;
            let cb = function () {
                GameScene.instance.refreshPlayer(UIMain.instance.UITestId);
                self.destroyMine();
            };
            Tools.watchVideo(cb);
        }
        destroyMine() {
            DataManager.instance.isRealyBegin = true;
            this.owner.removeSelf();
            this.owner.destroy();
        }
    }

    class UITipChest extends Laya.Script {
        constructor() {
            super(...arguments);
            this.chestTips = [];
            this.page1Cur = 1;
            this.page1Max = 2;
            this.tableTouchPosX = 0;
            this.isTableMove = false;
        }
        onAwake() {
            let BG = this.owner.getChildByName("BG");
            BG.on(Laya.Event.CLICK, this, () => { null; });
            this.chestBox = this.owner.getChildByName("chestBox");
            this.dotNode = this.owner.getChildByName('Dot');
            this.page = this.chestBox.getChildByName("page");
            this.back = this.owner.getChildByName("back");
            this.getTip = this.owner.getChildByName('getTip');
            this.icon = this.getTip.getChildByName('icon');
            this.yesGold = this.getTip.getChildByName('yesGold');
            this.yesVideo = this.getTip.getChildByName("yesVideo");
            this.no = this.getTip.getChildByName('no');
            this.glow = this.getTip.getChildByName('glow');
            DataManager.instance.showFBInterstitialAd();
            Tools.showBanner(true);
            if (utils) {
                utils.adManager.ShowBanner(BannerLocation.Sign);
                utils.showSkipBtn(this.back, true);
                if (utils.ServerConfig.isInterstitial == "true" || utils.ServerConfig.isInterstitial) {
                    console.log('调用插屏广告');
                    utils.adManager.ShowInterstitial();
                }
            }
            else {
                this.back.visible = true;
            }
            this.fitUI();
            this.addEvent();
            for (let i = 0; i < 4; i++) {
                this.showGift(this.page.getChildByName("page1").getChildByName("chest" + i).getChildByName("reward"), i, CHEST_GIFT[i].type, CHEST_GIFT[i].count, 1);
                this.showGift(this.page.getChildByName("page2").getChildByName("chest" + i).getChildByName("reward"), 4 + i, CHEST_GIFT[4 + i].type, CHEST_GIFT[4 + i].count, 1);
            }
        }
        onStart() {
            this.getTip.visible = false;
            this.initChest();
        }
        onUpdate() {
            if (this.glow) {
                this.glow.rotation++;
            }
        }
        initChest() {
            let chestCell1 = this.page.getChildByName('page1');
            let chestCell2 = this.page.getChildByName('page2');
            this.initCellByData(chestCell1, 0);
            this.initCellByData(chestCell2, 4);
        }
        initCellByData(node, idStart) {
            let self = this;
            for (let i = 0; i < 4; i++) {
                let cell = node.getChildByName('chest' + i);
                let chest = cell.getChildByName('chest');
                let tip = cell.getChildByName("tip");
                let btn = cell.getChildByName("btn");
                let lock = cell.getChildByName("lock");
                let reward = cell.getChildByName("reward");
                if (!DataManager.instance.chestRewardInfo[idStart + i]) {
                    return;
                }
                switch (DataManager.instance.chestRewardInfo[idStart + i].state) {
                    case 0:
                        tip.visible = false;
                        lock.visible = true;
                        reward.visible = false;
                        chest.alpha = 0.5;
                        btn.skin = "textures/wo.png";
                        break;
                    case 1:
                        reward.visible = false;
                        tip.visible = true;
                        tip.text = DataManager.instance.getChestUnlockDescByID(idStart + i);
                        lock.visible = false;
                        chest.alpha = 1;
                        btn.skin = "textures/jiesuo.png";
                        if (CHEST_INFO[idStart + i].unlockInfo[0].type == CHEST_TYPE.level) {
                            if (GData.curLevel >= CHEST_INFO[idStart + i].unlockInfo[0].count) {
                                DataManager.instance.chestRewardInfo[idStart + i].state = 2;
                                localStorage.setItem('chestRewardInfo', JSON.stringify(DataManager.instance.chestRewardInfo));
                                btn.skin = "textures/jie.png";
                            }
                        }
                        if (CHEST_INFO[idStart + i].unlockInfo[0].type == CHEST_TYPE.sign) {
                            if (DataManager.instance.signDays.length >= CHEST_INFO[idStart + i].unlockInfo[0].count) {
                                DataManager.instance.chestRewardInfo[idStart + i].state = 2;
                                localStorage.setItem('chestRewardInfo', JSON.stringify(DataManager.instance.chestRewardInfo));
                                btn.skin = "textures/jie.png";
                            }
                        }
                        if (CHEST_INFO[idStart + i].unlockInfo[0].type == CHEST_TYPE.video) {
                            DataManager.instance.chestRewardInfo[idStart + i].state = 2;
                            localStorage.setItem('chestRewardInfo', JSON.stringify(DataManager.instance.chestRewardInfo));
                            btn.skin = "textures/jievideo.png";
                        }
                        break;
                    case 2:
                        reward.visible = false;
                        tip.visible = true;
                        tip.text = DataManager.instance.getChestUnlockDescByID(idStart + i);
                        lock.visible = false;
                        chest.alpha = 1;
                        if (CHEST_INFO[idStart + i].unlockInfo[0].type == CHEST_TYPE.video) {
                            btn.skin = "textures/jievideo.png";
                        }
                        else {
                            btn.skin = "textures/jie.png";
                        }
                        break;
                    case 3:
                        tip.visible = false;
                        lock.visible = false;
                        chest.visible = false;
                        reward.visible = true;
                        btn.skin = "textures/ling.png";
                        break;
                    case 4:
                        reward.visible = true;
                        tip.visible = false;
                        lock.visible = false;
                        chest.visible = false;
                        btn.skin = "textures/yilingqu.png";
                        break;
                    default:
                        break;
                }
                btn.on(Laya.Event.CLICK, this, this.chestClick, [idStart + i]);
            }
        }
        chestClick(index) {
            let self = this;
            switch (DataManager.instance.chestRewardInfo[index].state) {
                case 0:
                    console.log('1235111');
                    let cb = function () {
                        DataManager.instance.chestRewardInfo[index].state = 1;
                        localStorage.setItem('chestRewardInfo', JSON.stringify(DataManager.instance.chestRewardInfo));
                        self.initChest();
                    };
                    Tools.watchVideo(cb);
                    break;
                case 1:
                    console.log('123235');
                    Tools.showTip("Unsatisfied Unlock Conditions");
                    break;
                case 2:
                    console.log('1222235');
                    if (CHEST_INFO[index].unlockInfo[0].type == CHEST_TYPE.video) {
                        if (DataManager.instance.videoUnlockChestTimes[index] >= CHEST_INFO[index].unlockInfo[0].count - 1) {
                            let cb = function () {
                                DataManager.instance.chestRewardInfo[index].state = 3;
                                localStorage.setItem('chestRewardInfo', JSON.stringify(DataManager.instance.chestRewardInfo));
                                self.initChest();
                            };
                            Tools.watchVideo(cb);
                        }
                        else {
                            let cb = function () {
                                DataManager.instance.videoUnlockChestTimes[index]++;
                                localStorage.setItem('videoUnlockChestTimes', DataManager.instance.videoUnlockChestTimes.join(','));
                                self.initChest();
                            };
                            Tools.watchVideo(cb);
                        }
                    }
                    else {
                        DataManager.instance.chestRewardInfo[index].state = 3;
                        localStorage.setItem('chestRewardInfo', JSON.stringify(DataManager.instance.chestRewardInfo));
                        self.initChest();
                    }
                    break;
                case 3:
                    console.log('1211');
                    self.showGetTip(index);
                    break;
                case 4:
                    console.log('1235112');
                    Tools.showTip("Received");
                    break;
                default:
                    break;
            }
        }
        showGift(node, index, type, count, scale) {
            let self = this;
            if (node) {
                if (type == ITEM_TYPE.GOLD && UIMain.instance.goldReward) {
                    console.log('1235');
                    let gold = Laya.Pool.getItemByCreateFun("goldReward", UIMain.instance.goldReward.create, UIMain.instance.goldReward);
                    gold.pos(node.x, node.y);
                    gold.scaleX = scale;
                    gold.scaleY = scale;
                    node.addChild(gold);
                    gold.getChildByName("number").text = count.toString();
                }
                else if (type == ITEM_TYPE.KEY && UIMain.instance.keyReward) {
                    console.log('12345');
                    let key = Laya.Pool.getItemByCreateFun("keyReward", UIMain.instance.keyReward.create, UIMain.instance.keyReward);
                    key.pos(node.x, node.y);
                    key.scaleX = scale;
                    key.scaleY = scale;
                    node.addChild(key);
                    key.getChildByName("number").text = count.toString();
                }
                else if (type == ITEM_TYPE.SKIN && UIMain.instance.skinReward) {
                    console.log('1234');
                    let skin = Laya.Pool.getItemByCreateFun("skinReward", UIMain.instance.skinReward.create, UIMain.instance.skinReward);
                    skin.pos(node.x, node.y);
                    skin.scaleX = scale;
                    skin.scaleY = scale;
                    node.addChild(skin);
                    skin.getChildByName("skin").skin = 'skinicon/skin' + count + '.png';
                    Laya.timer.loop(10, this, () => {
                        if (skin.getChildByName("glow")) {
                            skin.getChildByName("glow").rotation++;
                        }
                    });
                }
            }
        }
        getGift(index) {
            let self = this;
            if (CHEST_GIFT[index].type == ITEM_TYPE.GOLD) {
                GData.curTotalGold += CHEST_GIFT[index].count;
                Laya.stage.event("onUpdateGold");
            }
            else if (CHEST_GIFT[index].type == ITEM_TYPE.KEY) {
                GData.curKey += CHEST_GIFT[index].count;
                Laya.stage.event("onUpdateKey");
            }
            else if (CHEST_GIFT[index].type == ITEM_TYPE.SKIN) {
                DataManager.instance.curPlayerID = CHEST_GIFT[index].count;
                DataManager.instance.buyFaceByID(CHEST_GIFT[index].count);
            }
        }
        showGetTip(index) {
            let bg = this.getTip.getChildByName("bg");
            bg.on(Laya.Event.CLICK, this, () => {
                null;
            });
            this.getTip.visible = true;
            this.getTip.scale(0.5, 0.5, true);
            Laya.Tween.to(this.getTip, { scaleX: 1, scaleY: 1 }, 400, Laya.Ease.elasticOut);
            let number = this.yesGold.getChildByName("number");
            number.text = CHEST_INFO[index].buyInfo[0].count.toString();
            this.yesGold.offAllCaller(this);
            this.yesGold.on(Laya.Event.CLICK, this, this.onYesClick, [index, false]);
            this.yesVideo.on(Laya.Event.CLICK, this, this.onYesClick, [index, true]);
            this.icon.removeChildAt(0);
            this.showGift(this.icon, index, CHEST_GIFT[index].type, CHEST_GIFT[index].count, 1.5);
        }
        tableDown(e) {
            this.isTableMove = false;
            this.tableTouchPosX = e.stageX;
        }
        tableMove(e) {
            let x = e.stageX;
            let length = this.tableTouchPosX - x;
            if (Math.abs(length) > 100 && !this.isTableMove) {
                this.isTableMove = true;
                let curUI = this.page;
                let dir = length > 0 ? -750 : 750;
                this.movePage(curUI, dir);
            }
        }
        movePage(page, dir) {
            if (page == this.page) {
                if (dir > 0 && this.page1Cur > 1) {
                    this.page1Cur--;
                    Laya.Tween.to(this.page, { x: this.page.x + dir }, 200);
                }
                else if (dir < 0 && this.page1Cur < this.page1Max) {
                    this.page1Cur++;
                    Laya.Tween.to(this.page, { x: this.page.x + dir }, 200);
                }
            }
            this.updateDot();
        }
        updateDot() {
            let index = this.page1Cur;
            for (let i = 1; i <= 2; i++) {
                let sp = this.dotNode.getChildByName('' + i);
                if (sp) {
                    sp.skin = i == index ? 'textures/dian1.png' : 'textures/dian2.png';
                }
            }
        }
        fitUI() {
            let gap = Laya.stage.height / 2 ? 150 : 100;
            this.chestBox.y = 50;
            this.back.x = Laya.stage.width / 2;
            this.back.y = Laya.stage.height - gap;
            if (this.back.y < 1000) {
                this.back.y = 1000;
            }
            this.dotNode.x = Laya.stage.width / 2;
            this.dotNode.y = this.back.y - 100;
            this.getTip.x = Laya.stage.width / 2;
            this.getTip.y = Laya.stage.height / 2;
        }
        addEvent() {
            this.chestBox.on(Laya.Event.MOUSE_DOWN, this, this.tableDown);
            this.chestBox.on(Laya.Event.MOUSE_MOVE, this, this.tableMove);
            Tools.AddClickEvent(this.back, this, this.onBackClick, this.back.scaleX);
            Tools.AddClickEvent(this.no, this, this.onNoClick, this.no.scaleX);
        }
        onBackClick() {
            this.owner.removeSelf();
            this.owner.destroy();
            Tools.showBanner(false);
            Laya.stage.offAllCaller(this);
        }
        onNoClick() {
            this.getTip.visible = false;
        }
        onYesClick(index, videoOrgold) {
            let self = this;
            self.getTip.visible = false;
            if (videoOrgold) {
                let cb = function () {
                    self.getGift(index);
                    DataManager.instance.chestRewardInfo[index].state = 4;
                    localStorage.setItem('chestRewardInfo', JSON.stringify(DataManager.instance.chestRewardInfo));
                    self.initChest();
                };
                Tools.watchVideo(cb);
            }
            else {
                if (GData.curTotalGold >= CHEST_INFO[index].buyInfo[0].count) {
                    GData.curTotalGold -= CHEST_INFO[index].buyInfo[0].count;
                    Laya.stage.event("onUpdateGold");
                    self.getGift(index);
                    DataManager.instance.chestRewardInfo[index].state = 4;
                    localStorage.setItem('chestRewardInfo', JSON.stringify(DataManager.instance.chestRewardInfo));
                    self.initChest();
                }
                else {
                    Tools.ShowUI("prefab/UIReward.json", 3000);
                }
            }
        }
    }

    class UITurntable extends Laya.Script {
        constructor() {
            super(...arguments);
            this.luckNumber = 0;
            this.isRotation = false;
            this.isFree = true;
        }
        onAwake() {
            let bg = this.owner.getChildByName('BG');
            bg.on(Laya.Event.CLICK, this, () => { });
            let actNode = this.owner.getChildByName('Action');
            this.title = actNode.getChildByName('Title');
            this.turn = actNode.getChildByName("turn");
            this.pointer = actNode.getChildByName('pointer');
            this.btnBegin = actNode.getChildByName('BtnBegin');
            this.btnNo = actNode.getChildByName('BtnNo');
            this.lotteryNumber = actNode.getChildByName("lotteryNumber");
            this.isRotation = false;
            if (utils) {
                utils.adManager.ShowBanner(BannerLocation.Sign);
                utils.showSkipBtn(this.btnNo, true);
                if (utils.ServerConfig.isInterstitial == "true" || utils.ServerConfig.isInterstitial) {
                    console.log('调用插屏广告');
                    utils.adManager.ShowInterstitial();
                }
            }
            else {
                this.btnNo.visible = true;
            }
            Tools.showBanner(true);
            DataManager.instance.showFBInterstitialAd();
            this.fitUI();
            this.addEvent();
        }
        onStart() {
            this.curLotteryNumber = 0;
            this.maxLotteryNumber = DataManager.instance.lotteryTimes;
            this.updateLotteryNumber();
        }
        addEvent() {
            Tools.AddClickEvent(this.btnBegin, this, this.onBtnBeginClick, this.btnBegin.scaleX);
            Tools.AddClickEvent(this.btnNo, this, this.onBtnNoClick, this.btnNo.scaleX);
        }
        fitUI() {
            let gap = Laya.stage.height / Laya.stage.width > 2 ? 200 : 100;
            this.title.x = Laya.stage.width / 2 - 25;
            this.title.y = gap;
            this.turn.x = Laya.stage.width / 2 - 25;
            this.turn.y = Laya.stage.height / 2;
            this.pointer.pos(this.turn.x, this.turn.y - this.turn.height / 2);
            this.btnBegin.x = Laya.stage.width / 2 - 25;
            this.btnBegin.y = this.turn.y + this.turn.height / 2 + 50;
            this.btnNo.x = Laya.stage.width - 100;
            this.btnNo.y = 300;
            this.lotteryNumber.x = Laya.stage.width / 2 - 25;
            this.lotteryNumber.y = this.btnBegin.y - 80;
        }
        updateLotteryNumber() {
            this.lotteryNumber.text = this.curLotteryNumber + "/" + this.maxLotteryNumber;
            if (this.curLotteryNumber >= this.maxLotteryNumber) {
                this.btnBegin.skin = "textures/choujiang.png";
                this.isFree = false;
            }
            else {
                this.btnBegin.skin = "textures/chou.png";
                this.isFree = true;
            }
        }
        getLuckNumber() {
            this.luckNumber = Math.floor(Math.random() * 8);
        }
        BeginRotation() {
            this.isRotation = true;
            let rotateNumber = 0;
            switch (this.luckNumber) {
                case 0:
                    rotateNumber = 3600;
                    break;
                case 1:
                    rotateNumber = 3600 - 45;
                    break;
                case 2:
                    rotateNumber = 3600 - 45 * 2;
                    break;
                case 3:
                    rotateNumber = 3600 - 45 * 3;
                    break;
                case 4:
                    rotateNumber = 3600 - 45 * 4;
                    break;
                case 5:
                    rotateNumber = 3600 - 45 * 5;
                    break;
                case 6:
                    rotateNumber = 3600 - 45 * 6;
                    break;
                case 7:
                    rotateNumber = 3600 - 45 * 7;
                    break;
            }
            this.turn.rotation = 0;
            Laya.Tween.to(this.turn, { rotation: rotateNumber }, 5000, Laya.Ease.strongInOut, Laya.Handler.create(this, () => {
                this.isRotation = false;
                this.getReward(this.luckNumber);
            }));
        }
        getReward(id) {
            Tools.showTip("Get " + TURNTABLE_INFO[id].count + " " + TURNTABLE_INFO[id].describe);
            if (TURNTABLE_INFO[id].type == ITEM_TYPE.GOLD) {
                GData.curTotalGold += TURNTABLE_INFO[id].count;
                Laya.stage.event("onUpdateGold");
            }
            else if (TURNTABLE_INFO[id].type == ITEM_TYPE.KEY) {
                GData.curKey += TURNTABLE_INFO[id].count;
                Laya.stage.event("onUpdateKey");
            }
            else {
            }
        }
        onBtnBeginClick(e) {
            let self = this;
            if (self.isRotation) {
                return;
            }
            if (self.isFree) {
                self.getLuckNumber();
                self.BeginRotation();
                self.curLotteryNumber++;
                self.updateLotteryNumber();
            }
            else {
                let cb = function () {
                    self.getLuckNumber();
                    self.BeginRotation();
                };
                Tools.watchVideo(cb);
            }
        }
        onBtnNoClick(e) {
            if (this.isRotation) {
                Tools.showTip("Lottery");
                return;
            }
            this.destroyMine();
        }
        destroyMine() {
            Tools.showBanner(false);
            DataManager.instance.lotteryTimes -= this.curLotteryNumber;
            localStorage.setItem('lotteryTimes', DataManager.instance.lotteryTimes.toString());
            this.owner.removeSelf();
            this.owner.destroy();
        }
    }

    class GameConfig {
        constructor() {
        }
        static init() {
            var reg = Laya.ClassUtils.regClass;
            reg("script/Start.ts", Start);
            reg("common/scripts/BeforGameOverRecGamesPanel.ts", BeforGameOverRecGamesPanel);
            reg("common/scripts/GameItem.ts", GameItem);
            reg("common/scripts/YzUtils.ts", YzUtils);
            reg("common/scripts/CommonConfig.ts", CommonConfig);
            reg("common/scripts/OtherConfig.ts", OtherConfig);
            reg("common/scripts/QCrossWidgetItem.ts", QCrossWidgetItem);
            reg("common/scripts/QCrossWidget6.ts", QCrossWidget6);
            reg("common/scripts/YZ_GameExitDialog.ts", YZ_GameExitDialog);
            reg("common/scripts/LogOutView.ts", LogOutView);
            reg("common/scripts/MoreGamesPanel.ts", MoreGamesPanel);
            reg("common/scripts/MoreGamesWidget.ts", MoreGamesWidget);
            reg("common/scripts/YZ_NativeBanner.ts", YZ_NativeBanner);
            reg("common/scripts/YZ_NativeInsert.ts", YZ_NativeInsert);
            reg("common/scripts/NativeTryGameNode.ts", NativeTryGameNode);
            reg("common/scripts/NativeTryGamesWidget.ts", NativeTryGamesWidget);
            reg("common/scripts/OpenRedBagPanel.ts", OpenRedBagPanel);
            reg("common/scripts/PrivacyPolicy.ts", PrivacyPolicy);
            reg("common/scripts/YZ_ListView.ts", YZ_ListView);
            reg("common/scripts/YZ_RecommendGamesBanner.ts", YZ_RecommendGamesBanner);
            reg("common/scripts/RecommendGamesNode.ts", RecommendGamesNode);
            reg("common/scripts/YZ_RecommendScorllBar.ts", YZ_RecommendScorllBar);
            reg("common/scripts/YZ_RecordWidget.ts", YZ_RecordWidget);
            reg("common/scripts/RedBagProgressNode.ts", RedBagProgressNode);
            reg("common/scripts/RedBagProgressWidget.ts", RedBagProgressWidget);
            reg("common/scripts/RewardBoxPanel.ts", RewardBoxPanel);
            reg("common/scripts/LuckBoxPannel.ts", LuckBoxPannel);
            reg("common/scripts/RewardRedBagPanel.ts", RewardRedBagPanel);
            reg("common/scripts/RewardShortCutPanel.ts", RewardShortCutPanel);
            reg("common/scripts/YZ_Turntable.ts", YZ_Turntable);
            reg("common/scripts/ShareRecordPanel.ts", ShareRecordPanel);
            reg("common/scripts/YZ_ShortcutWidget.ts", YZ_ShortcutWidget);
            reg("common/scripts/YZ_NativeItem.ts", YZ_NativeItem);
            reg("common/scripts/TryGameNode.ts", TryGameNode);
            reg("common/scripts/TryGamesWidget.ts", TryGamesWidget);
            reg("common/scripts/VerticalRecommentItem.ts", VerticalRecommentItem);
            reg("common/scripts/VerticalRecommentPanel.ts", VerticalRecommentPanel);
            reg("common/scripts/WithdrawalPanel.ts", WithdrawalPanel);
            reg("common/scripts/WithdrawalNode.ts", WithdrawalNode);
            reg("common/scripts/YZ_ShakeNode.ts", YZ_ShakeNode);
            reg("common/scripts/WithdrawalWidget.ts", WithdrawalWidget);
            reg("common/scripts/HelpHandAction.ts", HelpHandAction);
            reg("script/UILoading.ts", UILoading);
            reg("script/UIChest.ts", UIChest);
            reg("script/UIMain.ts", UIMain);
            reg("script/UIResurgence.ts", UIResurgence);
            reg("script/UIReward.ts", UIReward);
            reg("script/UIShop.ts", UIShop);
            reg("script/UISign.ts", UISign);
            reg("script/UITest.ts", UITest);
            reg("script/UITip.ts", UITip);
            reg("script/UITipChest.ts", UITipChest);
            reg("script/UITurntable.ts", UITurntable);
        }
    }
    GameConfig.width = 640;
    GameConfig.height = 1136;
    GameConfig.scaleMode = "fixedwidth";
    GameConfig.screenMode = "vertical";
    GameConfig.alignV = "top";
    GameConfig.alignH = "left";
    GameConfig.startScene = "GameScene.scene";
    GameConfig.sceneRoot = "";
    GameConfig.debug = false;
    GameConfig.stat = false;
    GameConfig.physicsDebug = false;
    GameConfig.exportSceneToJson = true;
    GameConfig.init();

    class TweenExt {
        static init() {
            Laya.Tween.prototype["_initProps"] = TweenExt["_initProps"];
            Laya.Tween.prototype["_updateEase"] = TweenExt["_updateEase"];
            Laya.Tween.prototype["complete"] = TweenExt["complete"];
            Laya.Tween.prototype["completData"] = TweenExt["completData"];
        }
        static _initProps(target, props, isTo) {
            for (let p in props) {
                if ((typeof (target[p]) == 'number')) {
                    let start = isTo ? target[p] : props[p];
                    let end = isTo ? props[p] : target[p];
                    this["_props"].push([p, start, end - start]);
                    if (!isTo)
                        target[p] = start;
                }
                if (target[p] instanceof Laya.Vector4) {
                    let v4_lerp = new Laya.Vector4();
                    let v4_start = isTo ? target[p].clone() : props[p];
                    let v4_end = isTo ? props[p] : target[p].clone();
                    if (!(v4_start instanceof Laya.Vector4)) {
                        v4_start = new Laya.Vector4(v4_start.x, v4_start.y, v4_start.z, v4_start.w);
                    }
                    v4_end = new Laya.Vector4(v4_end.x, v4_end.y, v4_end.z, v4_end.w);
                    Laya.Vector4.subtract(v4_end, v4_start, v4_lerp);
                    this["_props"].push([p, v4_start, v4_lerp, v4_end]);
                    if (!isTo)
                        target[p] = v4_start;
                }
                if (target.transform && target.transform[p] instanceof Laya.Vector3) {
                    let v3_lerp = new Laya.Vector3();
                    let v3_start = isTo ? target.transform[p].clone() : props[p];
                    let v3_end = isTo ? props[p] : target.transform[p].clone();
                    if (!(v3_start instanceof Laya.Vector3)) {
                        v3_start = new Laya.Vector3(v3_start.x, v3_start.y, v3_start.z);
                    }
                    v3_end = new Laya.Vector3(v3_end.x, v3_end.y, v3_end.z);
                    Laya.Vector3.subtract(v3_end, v3_start, v3_lerp);
                    this["_props"].push([p, v3_start, v3_lerp, v3_end]);
                    if (!isTo)
                        target[p] = v3_start;
                }
            }
        }
        static _updateEase(time) {
            var target = this["_target"];
            if (!target)
                return;
            if (target.destroyed)
                return this["clearTween"] && this["clearTween"](target);
            var usedTimer = this["_usedTimer"] = time - this["_startTimer"] - this["_delay"];
            if (usedTimer < 0)
                return;
            if (usedTimer >= this["_duration"])
                return this["complete"]();
            var ratio = usedTimer > 0 ? this["_ease"](usedTimer, 0, 1, this["_duration"]) : 0;
            var props = this["_props"];
            for (var i = 0, n = props.length; i < n; i++) {
                var prop = props[i];
                if (typeof target[prop[0]] === "number") {
                    target[prop[0]] = prop[1] + (ratio * prop[2]);
                }
                if (target[prop[0]] instanceof Laya.Vector4) {
                    let x = prop[1].x + (ratio * prop[2].x);
                    let y = prop[1].y + (ratio * prop[2].y);
                    let z = prop[1].z + (ratio * prop[2].z);
                    let w = prop[1].w + (ratio * prop[2].w);
                    target[prop[0]] = new Laya.Vector4(x, y, z, w);
                }
                if (target[prop[0]] instanceof Laya.Vector3) {
                    let x = prop[1].x + (ratio * prop[2].x);
                    let y = prop[1].y + (ratio * prop[2].y);
                    let z = prop[1].z + (ratio * prop[2].z);
                    target[prop[0]] = new Laya.Vector3(x, y, z);
                }
                if (target.transform && target.transform[prop[0]] instanceof Laya.Vector3) {
                    let x = prop[1].x + (ratio * prop[2].x);
                    let y = prop[1].y + (ratio * prop[2].y);
                    let z = prop[1].z + (ratio * prop[2].z);
                    target.transform[prop[0]] = new Laya.Vector3(x, y, z);
                }
            }
            if (this["update"])
                this["update"].run();
        }
        static complete() {
            if (!this["_target"])
                return;
            Laya.timer.runTimer(this, this["firstStart"]);
            var handler = this["_complete"];
            this.completData();
            if (this["update"])
                this["update"].run();
            this["_count"]++;
            if (this["repeat"] != 0 && this["_count"] >= this["repeat"]) {
                this["clear"]();
                handler && handler.run();
            }
            else {
                this["restart"]();
            }
        }
        static completData() {
            var target = this["_target"];
            var props = this["_props"];
            for (var i = 0, n = props.length; i < n; i++) {
                var prop = props[i];
                if (typeof target[prop[0]] === "number") {
                    target[prop[0]] = prop[1] + prop[2];
                }
                if (target[prop[0]] instanceof Laya.Vector4) {
                    target[prop[0]] = prop[3];
                }
                if (target[prop[0]] instanceof Laya.Vector3) {
                    target[prop[0]] = prop[3];
                }
                if (target.transform && target.transform[prop[0]] instanceof Laya.Vector3) {
                    target.transform[prop[0]] = prop[3];
                }
            }
        }
    }

    class Main {
        constructor() {
            Config.isAntialias = true;
            Config.useWebGL2 = false;
            if (window["Laya3D"])
                Laya3D.init(GameConfig.width, GameConfig.height);
            else
                Laya.init(GameConfig.width, GameConfig.height, Laya["WebGL"]);
            Laya["Physics"] && Laya["Physics"].enable();
            Laya["DebugPanel"] && Laya["DebugPanel"].enable();
            Laya.stage.scaleMode = GameConfig.scaleMode;
            Laya.stage.screenMode = GameConfig.screenMode;
            Laya.stage.alignV = GameConfig.alignV;
            Laya.stage.alignH = GameConfig.alignH;
            Laya.URL.exportSceneToJson = GameConfig.exportSceneToJson;
            if (GameConfig.debug || Laya.Utils.getQueryString("debug") == "true")
                Laya.enableDebugPanel();
            if (GameConfig.physicsDebug && Laya["PhysicsDebugDraw"])
                Laya["PhysicsDebugDraw"].enable();
            if (GameConfig.stat)
                Laya.Stat.show();
            Laya.alertGlobalError = true;
            if (typeof qg !== 'undefined') {
                Laya.loader.load('http://xcx.youletd.com/xcx/vivo/fklql/v101/NewResources/GameScene.json', Laya.Handler.create(this, (json) => {
                    if (json) {
                        console.log("json文件", json);
                    }
                    else {
                        Tools.showTip("网络错误,请重新加载");
                        return;
                    }
                }));
            }
            new DataManager();
            Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
        }
        onVersionLoaded() {
            this.onConfigLoaded();
        }
        onConfigLoaded() {
            FBInstant.initializeAsync().then(function () {
                DataManager.instance.initFbLoading();
            });
            if (typeof qg != 'undefined') {
                if (typeof qg.getSystemInfoSync !== 'undefined') {
                    let info = qg.getSystemInfoSync();
                    if (info.brand == 'vivo') {
                        Laya.VVMiniAdapter.nativefiles = [
                            'version.json',
                            'fileconfig.json'
                        ];
                        console.log("当前是vivo平台");
                        Laya.URL.basePath = 'http://xcx.youletd.com/xcx/vivo/fklql/v101/NewResources/';
                    }
                    else {
                        Laya.QGMiniAdapter.nativefiles = [
                            'version.json',
                            'fileconfig.json'
                        ];
                        console.log("当前是oppo平台");
                        Laya.URL.basePath = 'http://xcx.youletd.com/xcx/oppo/fklql/v101/NewResources/';
                    }
                }
            }
            GameConfig.startScene && Laya.Scene.open(GameConfig.startScene);
            TweenExt.init();
        }
    }
    new Main();

}());
